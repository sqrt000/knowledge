///////////////////////////////////
//// МЕТОДЫ ДЛЯ ВНУТР. ОТЧЕТОВ ////
///////////////////////////////////

// Функция - Получить ТЗИз отчета
//
// Параметры:
//  ИмяОтчета - Строка - Имя отчета, как в конфигураторе
//  ИмяМакета - Строка - Имя макета, как в конфигураторе
//  ПараметрыДанных	 - Структура - Где ключ это имя параметра, а значение это значение параметра
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Произвольная таблица значений с колонками, как в отчете
//
Функция ПолучитьТЗИзОтчета(ИмяОтчета, ИмяМакета, ИмяВариантаНастроек, ПараметрыДанных) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	//нужно прикрутить проверку на существовование отчета и макета
	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВариантаНастроек).Настройки;
	
	//проверить поведение, если передать несуществующий параметр
	Для Каждого КлючИЗначение Из ПараметрыДанных Цикл
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    //Создаем процессор компоновки
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
        
    //Выводим в таблицу значений
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);
    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
    Возврат Результат;
    
КонецФункции


Процедура СформироватьТабличныйДокументПоТаблице(ТабДок, ТаблицаДанных, Колонки = "") Экспорт
		
	Построитель = Новый ПостроительОтчета;
	Если ЗначениеЗаполнено(Колонки) Тогда
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДанных.Скопировать(, Колонки));
	Иначе
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДанных);	
	КонецЕсли;
	Построитель.Вывести(ТабДок);
	
КонецПроцедуры

Функция ПолучитьПараметрыИзОтчета(ИмяОтчета, ИмяМакета) Экспорт

	ПараметрыДанных = Новый Структура;
	
	СхемаКомпоновкиДанных = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого СтрокаПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
		ПараметрыДанных.Вставить(Строка(СтрокаПараметр.Параметр), СтрокаПараметр.Значение);	
	КонецЦикла;
		
    Возврат ПараметрыДанных;
    
КонецФункции


////////////////////////////////////
//// МЕТОДЫ ДЛЯ ВНЕШНИХ ОТЧЕТОВ ////
////////////////////////////////////

Функция ПримерВнешнийОтчет(ИмяОтчета, ИмяМакета, ИмяВариантаНастроек, ДатаНачала, ДатаОкончания)

  ВнешнийОтчет = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОтчета);
  
  ПараметрыДанных = ПолучитьПараметрыИзВнешнегоОтчета(ВнешнийОтчет, ИмяМакета);
  Если ПараметрыДанных.Свойство("ДатаНачала") Тогда
    ПараметрыДанных.ДатаНачала = ДатаНачала;
  КонецЕсли;
  Если ПараметрыДанных.Свойство("ДатаОкончания") Тогда
    ПараметрыДанных.ДатаОкончания = ДатаОкончания;                   
  КонецЕсли;
  
  ПолучитьТЗИзВнешнегоОтчета(ВнешнийОтчет, ИмяМакета, ИмяВариантаНастроек, ПараметрыДанных);
  
КонецФункции

Функция ПолучитьПараметрыИзВнешнегоОтчета(ВнешнийОтчет, ИмяМакета) Экспорт

  ПараметрыДанных = Новый Структура;
  
  обВнешнийОтчет = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВнешнийОтчет);  
  Если обВнешнийОтчет = Неопределено Тогда
    Возврат ПараметрыДанных;
  КонецЕсли;
  
  СхемаКомпоновкиДанных = обВнешнийОтчет.ПолучитьМакет(ИмяМакета);
  КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
  
  Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
  Для Каждого СтрокаПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
    ПараметрыДанных.Вставить(Строка(СтрокаПараметр.Параметр), СтрокаПараметр.Значение);  
  КонецЦикла;
    
    Возврат ПараметрыДанных;
    
КонецФункции

Функция ПолучитьТЗИзВнешнегоОтчета(ВнешнийОтчет, ИмяМакета, ИмяВариантаНастроек, ПараметрыДанных) Экспорт
  
  Результат = Новый ТаблицаЗначений;
  
  обВнешнийОтчет = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВнешнийОтчет);  
  Если обВнешнийОтчет = Неопределено Тогда
    Возврат Результат;
  КонецЕсли;
  
  //нужно прикрутить проверку на существовование отчета и макета
  СхемаКомпоновкиДанных = обВнешнийОтчет.ПолучитьМакет(ИмяМакета);
  КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
  Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВариантаНастроек).Настройки;
  
  //проверить поведение, если передать несуществующий параметр
  Для Каждого КлючИЗначение Из ПараметрыДанных Цикл
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(КлючИЗначение.Ключ, КлючИЗначение.Значение);
  КонецЦикла;
  
  
  МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    //Создаем процессор компоновки
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
        
    //Выводим в таблицу значений
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);
    Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
    Возврат Результат;
  
КонецФункции

//нужно переписать
Функция ПолучитьТабДокИзВПФ(МассивОбъектовНазначения,ИдентификаторКомандыПечати,ИмяВПФ)
	
	ССылкаВПФ = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяВПФ);
	Если ССылкаВПФ.Пустая() Тогда
		Сообщить("Не найдена печ.форма реестра:\"+ИмяВПФ+"\ Обратитесь к знающим людям!");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода(); //}всякая шляпа, не имеющая отношения к формированию табдока
	
	ОбъектыПечати = Новый СписокЗначений; //заглушка
	
	КоллекцияФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ИдентификаторКомандыПечати); //}Функция БСП. Подготовка ТЗ, без заполненного ТабДока
	
	стПараметрыИсточника = Новый Структура;
	стПараметрыИсточника.Вставить("ИдентификаторКоманды",ИдентификаторКомандыПечати); 
	стПараметрыИсточника.Вставить("ОбъектыНазначения",МассивОбъектовНазначения); 
	
	УправлениеПечатью.ПечатьПоВнешнемуИсточнику(ССылкаВПФ,стПараметрыИсточника,КоллекцияФорм,ОбъектыПечати,ПараметрыВывода); //}Процедура БСП, заполняем табдок в ТЗ КоллФорм
	
	Рез = Неопределено;
	Если КоллекцияФорм.Количество() И ТипЗнч(КоллекцияФорм[0].ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Рез = КоллекцияФорм[0].ТабличныйДокумент; //}получаем ТабДок, если он заполнен в ТЗ
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции
