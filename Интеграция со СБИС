#Область МетодыAPI

Функция Аутентификация(Логин, Пароль, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	
	//// ОПИСАНИЕ С САЙТА ////
		
	//Команда позволяет выполнить аутентификацию по логину/паролю и возвращает идентификатор сессии.
	//Для выполнения аутентификации используйте логин и пароль от личного кабинета online.sbis.ru и параметр app_client_id, который всегда имеет значение 10259314507151. 
	//Метод запроса: POST Адрес выполнения запроса: https://api.sbis.ru/oauth/service/
		
	//Параметр			Тип						Описание						Пример
	//app_client_id		String, обязательный	Константа «1025293145607151»	«1025293145607151»
	//login				String, обязательный	Логин пользователя				«user1»
	//password			String, обязательный	Пароль пользователя				«secret»


	//// ГОТОВИМ ТЕЛО POST ЗАПРОСА ////
	
	//{  
	//   "app_client_id":"1025293145607151",
	//   "login":"user1",
	//   "password":"secret"
	//}

	СтруктураТелаЗапроса = Новый Структура;
	СтруктураТелаЗапроса.Вставить("app_client_id", "1025293145607151");
	СтруктураТелаЗапроса.Вставить("login", Логин);
	СтруктураТелаЗапроса.Вставить("password", Пароль);
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла();
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ИмяФайлаОтправки, , , ) ;
	ЗаписатьJSON(ЗаписьJSON, СтруктураТелаЗапроса); 
	ЗаписьJSON.Закрыть();
	
	АдресРесурса = "/oauth/service/";
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
	
	//// POST ЗАПРОС ////
	Сервер = "api.sbis.ru";
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		ТекстОшибки = "Не удалось получить данные. Описание ошибки: " + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;

	//// РАБОТА С ОТВЕТОМ САЙТА ////
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВыходногоФайла, КодировкаТекста.UTF8);          
	ТекстОтвета = ЧтениеТекста.Прочитать();
			
	Возврат ТекстОтвета;
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(Аутентификация)

Функция ПолучениеФискальногоДокументаПоИдентификатору(Параметры, ИдентификаторСессии, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	
	//// ОПИСАНИЕ С САЙТА ////
	//https://api.sbis.ru/ofd/v1/orgs/<inn>/kkts/<regId>/storages/<storageId>/docs/<docNum>?format=<format>
	
	//Параметр		Тип						Описание									Пример
	//inn			String, обязательный	ИНН организации-владельца ККТ				«1234567890»
	//regId			String, обязательный	Регистрационный номер ККТ					«123456»
	//storageId		String, обязательный	Регистрационный номер ФН					«9999999»
	//docNum		String, обязательный	Номер запрашиваемого фискального документа	«123»
	//docDate		String, обязательный	Дата запрашиваемого документа				«2018-11-23T12:10:04»
	//format		String, обязательный	Формат выдачи документа:					«json» - в виде JSON, «pdf» - в виде PDF

	//// СООТВЕТСТВИЕ НАШИМ РЕКВИЗИТАМ ИЗ ЧЕКА ////
	//regId 	- 	РНККТ_Кирилл
	//storageId - 	ЗНФН_Кирилл
	//docNum 	- 	ФДН_Кирилл
	
	// https://api.sbis.ru/ofd/v1/orgs/661203552050/kkts/0001484200034143/storages/9287440300160949/docs/67?format=pdf
	// 661203552050 - инн организации
	// 0001484200034143 - РНККТ_Кирилл
	// 9287440300160949 - ЗНФН_Кирилл
	// 67 - ФДН_Кирилл
		
	//// ГОТОВИМ ТЕКСТ ЗАПРОСА ////	
	inn = Параметры.inn;
	regId = Параметры.regId;
	storageId = Параметры.storageId;
	docNum = Параметры.docNum;
	docDate = Параметры.docDate;
	format = Параметры.format;
		
	АдресРесурса = "ofd/v1/orgs/" + inn + "/kkts/" + regId + "/storages/" + storageId + "/docs/" + docNum + "?docDate=" + docDate + "&format=" + format; 
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	//// ДОБАВЛЯЕМ ЗАГОЛОВКИ ////
	HTTPЗапрос.Заголовки.Вставить("Cookie", "sid=" + ИдентификаторСессии);
		
	// GET ЗАПРОС ////
	Сервер = "api.sbis.ru";
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла(format);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		ТекстОшибки = "Не удалось получить данные. Описание ошибки: " + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//// РАБОТА С ОТВЕТОМ САЙТА ////
	ОтветСайта = "";
	Если format = "json" Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВыходногоФайла, КодировкаТекста.UTF8);          
		ОтветСайта = ЧтениеТекста.Прочитать();	
	Иначе
		//пока не нужно, пусть просто путь к файлу возвращается
		ОтветСайта = ИмяВыходногоФайла;
	КонецЕсли;

	Возврат ОтветСайта;
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(ПолучениеФискальногоДокументаПоИдентификатору)

Функция ПолучениеФискальногоДокументаПоСсылке(Параметры, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	
	//Кассовый чек можно получить по прямой ссылке, которая формируется по шаблону: ofd.sbis.ru/rec/{kktregid}/{date}/{fiscal_sign}
	
	//Параметр		Описание										Пример
	//kktregid		Регистрационный номер ККТ						«09740923443»
	//date			Дата фискального документа в формате «ddmmgg»	«211117»
	//fiscal_sign	Фискальная подпись документа					«2557833132»

	//В результате прямая сслыка на фискальный документ будет выглядеть так: ofd.sbis.ru/rec/09740923443/211117/2557833132
	//https://ofd.sbis.ru/rec/0001546673021022/231018/1543748136
	
	//// СООТВЕТСТВИЕ НАШИМ РЕКВИЗИТАМ ИЗ ЧЕКА ////
	//kktregid		- РНККТ_Кирилл
	//date			- ВремяПробития_Кирилл
	//fiscal_sign   - ФПД_Кирилл
	
	kktregid = Параметры.kktregid;
	date = Параметры.date;
	fiscal_sign = Параметры.fiscal_sign;
	
	СсылкаНаЧек = "https://ofd.sbis.ru/rec/" + kktregid + "/" + date + "/" + fiscal_sign;
	
	Возврат СсылкаНаЧек;
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(ПолучениеФискальногоДокументаПоСсылке)

Функция СписокФискальныхДокументовПоФискальномуНакопителю(Параметры, ИдентификаторСессии, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	
	//Адрес для выполнения запроса: https://api.sbis.ru/ofd/v1/orgs/<inn>/kkts/<regId>/storages/<storageId>/docs?dateFrom=<dateFrom>&dateTo=<dateTo>&shiftNumber=<shiftNumber>&startId=<startId>&limit=<limit>
	//Метод: GET
	//Доступна фильтрация по смене, дате и времени.

	//Параметр		Тип						Описание											Пример
	//inn			String, обязательный	ИНН организации-владельца ККТ						«1234567890»
	//regId			String, обязательный	Регистрационный номер ККТ, выданный ФНС				«123»
	//storageId		String, обязательный	Номер фискального накопителя						«9999999»
	//dateFrom		String, обязательный	Время начала периода запрашиваемых документов		«2016-10-19T12:20:45»
	//
	//dateTo		String, обязательный	Время окончания периода запрашиваемых документов. 
	//										Не больше 7 дней.									«2016-11-19T23:20:45»
	//
	//shiftNumber	Number					Номер смены. Если не указан, берутся все смены		«100»
	//
	//startId		Number					Номер фискального документа, больше которого 
	//										должны быть номера фискальных документов в списке. 
	//										Если не указан, документы выдаются с первого по 
	//										порядку												«100500»
	//
	//limit			Number					Максимальное количество документов, выдаваемых 
	//										в ответ. По умолчанию 100. Больше 1000 документов 
	//										за раз не выдается.									«25»
	
	//https://api.sbis.ru/ofd/v1/orgs/661203552050/kkts/0001484200034143/storages/8710000101931569/docs?dateFrom=2018-11-01T00:00:00&dateTo=2018-11-08T00:00:00
	
	//// ПРОВЕРЯЕМ ПАРАМЕТРЫ ////
	//обязательные параметры
	inn = Параметры.inn;
	regId = Параметры.regId;
	storageId = Параметры.storageId;
	dateFrom = Параметры.dateFrom;
	dateTo = Параметры.dateTo;
	shiftNumber = "";
	startId = "";
	limit = "";
	
	//необязательные параметры	
	Если НЕ Параметры.Свойство("shiftNumber", shiftNumber) Тогда
		shiftNumber = "";	
	КонецЕсли;
	Если НЕ Параметры.Свойство("startId", startId) Тогда
		startId = "";	
	КонецЕсли;
	Если НЕ Параметры.Свойство("limit", limit) Тогда
		limit = "";	
	КонецЕсли;
	
	//// ГОТОВИМ ТЕКСТ ЗАПРОСА ////
	
	АдресРесурса = "/ofd/v1/orgs/" + inn + "/kkts/" + regId + "/storages/" + storageId + 
	"/docs?dateFrom=" + dateFrom + "&dateTo=" + dateTo;
	ПараметрыЗапроса = "";
	Если ЗначениеЗаполнено(shiftNumber) Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&shiftNumber=" + shiftNumber;	
	КонецЕсли;
	Если ЗначениеЗаполнено(startId) Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&startId=" + startId;	
	КонецЕсли;
	Если ЗначениеЗаполнено(limit) Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&limit=" + limit;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		АдресРесурса = АдресРесурса + ПараметрыЗапроса;
	КонецЕсли;
	 
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	//// ДОБАВЛЯЕМ ЗАГОЛОВКИ ////
	HTTPЗапрос.Заголовки.Вставить("Cookie", "sid=" + ИдентификаторСессии);
		
	// GET ЗАПРОС ////
	Сервер = "api.sbis.ru";
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		ТекстОшибки = "Не удалось получить данные. Описание ошибки: " + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//// РАБОТА С ОТВЕТОМ САЙТА ////
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВыходногоФайла, КодировкаТекста.UTF8);          
	ОтветСайта = ЧтениеТекста.Прочитать();
	
	Возврат ОтветСайта;
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(СписокФискальныхДокументовПоФискальномуНакопителю)

Функция СписокККТПоОорганизации(Параметры, ИдентификаторСессии, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	
	//По команде отображается список всех ККТ по организации. Для выполнения запроса используйте ИНН организации (обязательный параметр) 
	//и статус регистрации ККТ в ОФД (необязательный параметр).
	//Метод: GET
	//Адрес для выполнения запроса: https://api.sbis.ru/ofd/v1/orgs/<inn>/kkts?status=<status>
	
	//Параметр	Тип						Описание								Пример
	//inn		String, обязательный	ИНН организации-владельца ККТ			«1234567890»
	//status	Number, необязательный	Статус регистрации ККТ в ОФД:	
	//									0 – не зарегистрирована,
	//									1 – идет регистрация,
	//									2 – активирована,
	//									3 – снята с регистрации,
	//									4 – ожидание активации.
	//									Если статус не указан, выдаются 
	//									ККТ со всеми статусами. 				«2»
	
	//// ГОТОВИМ ТЕКСТ ЗАПРОСА ////	
	inn = Параметры.inn;
	Если Параметры.Свойство("status") Тогда
		status = Параметры.status;
	Иначе
		status = "";	
	КонецЕсли;

	АдресРесурса = "/ofd/v1/orgs/" + inn + "/kkts" + ?(ЗначениеЗаполнено(status), "?status="+status, "");
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	//// ДОБАВЛЯЕМ ЗАГОЛОВКИ ////
	HTTPЗапрос.Заголовки.Вставить("Cookie", "sid=" + ИдентификаторСессии);
		
	// GET ЗАПРОС ////
	Сервер = "api.sbis.ru";
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		ТекстОшибки = "Не удалось получить данные. Описание ошибки: " + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//// РАБОТА С ОТВЕТОМ САЙТА ////
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВыходногоФайла, КодировкаТекста.UTF8);          
	ОтветСайта = ЧтениеТекста.Прочитать();	

	Возврат ОтветСайта;	
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(СписокККТПоОорганизации)

Функция СписокФискальныхНакопителейПоККТ(Параметры, ИдентификаторСессии, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	
	//Команда выполняет запрос статуса фискального накопителя, который установлен в ККТ (статус регистрации ФН в ОФД, время начала работы накопителя).
	
	//Метод: GET
	//Адрес для выполнения запроса: https://api.sbis.ru/ofd/v1/orgs/<inn>/kkts/<regId>/storages?status=<status>
	
	//Параметр	Тип						Описание												Пример
	//inn		String, обязательный	ИНН организации-владельца ККТ							«1234567890»
	//regId		String, обязательный	Регистрационный номер ККТ, выданный ФНС					«123»
	//status	Number, необязательный	Статус регистрации ФН в ОФД:
	//									0 — не зарегистрирована,
	//									1 — идет регистрация,
	//									2 — активирован,
	//									3 — снят с регистрации,
	//									4 — ожидание активации.
	//									Если статус не указан, выдаются ФН со всеми статусами. «2»

	//// ГОТОВИМ ТЕКСТ ЗАПРОСА ////	
	inn = Параметры.inn;
	regId = Параметры.regId;
	Если Параметры.Свойство("status") Тогда
		status = Параметры.status;
	Иначе
		status = "";	
	КонецЕсли;

	АдресРесурса = "/ofd/v1/orgs/" + inn + "/kkts/" + regId +"/storages" + ?(ЗначениеЗаполнено(status), "?status="+status, "");
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	//// ДОБАВЛЯЕМ ЗАГОЛОВКИ ////
	HTTPЗапрос.Заголовки.Вставить("Cookie", "sid=" + ИдентификаторСессии);
		
	// GET ЗАПРОС ////
	Сервер = "api.sbis.ru";
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("json");	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		ТекстОшибки = "Не удалось получить данные. Описание ошибки: " + ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	//// РАБОТА С ОТВЕТОМ САЙТА ////
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВыходногоФайла, КодировкаТекста.UTF8);          
	ОтветСайта = ЧтениеТекста.Прочитать();	

	Возврат ОтветСайта;
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(СписокФискальныхНакопителейПоККТ)

#КонецОбласти


#Область ТорговоеОборудование

Функция ПустаяТаблицаТорговогоОборудования()
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	ТаблицаОборудования = Новый ТаблицаЗначений;
	ТаблицаОборудования.Колонки.Добавить("НачалоПериода");
	ТаблицаОборудования.Колонки.Добавить("КонецПериода");
	ТаблицаОборудования.Колонки.Добавить("ИНН");
	ТаблицаОборудования.Колонки.Добавить("РНККТ");
	ТаблицаОборудования.Колонки.Добавить("ЗНФН");
	
	Возврат ТаблицаОборудования;
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецФункции //(ПустаяТаблицаТорговогоОборудования)

Функция ДанныеТорговогоОборудования(ИНН, ИдентификаторСессии, ТекстОшибки = "") Экспорт
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	ТаблицаОборудования = ПустаяТаблицаТорговогоОборудования();
	
	ТаблицаККТ = ПолучитьСписокКктПоИНН(ИНН, ИдентификаторСессии, ТекстОшибки);
	Для Каждого сТаблицаККТ из ТаблицаККТ Цикл
		
		ТаблицаНакопителей = ПолучитьФискальныеНакопителиПоККТ(ИНН, сТаблицаККТ.regId, ИдентификаторСессии, ТекстОшибки = "");
		Для Каждого сТаблицаНакопителей из ТаблицаНакопителей Цикл
			
			сТаблицаОборудования = ТаблицаОборудования.Добавить();
			сТаблицаОборудования.НачалоПериода = КонвертироватьВДату(сТаблицаНакопителей.effectiveFrom);
			сТаблицаОборудования.КонецПериода = КонвертироватьВДату(сТаблицаНакопителей.effectiveTo);
			Если НЕ ЗначениеЗаполнено(сТаблицаОборудования.КонецПериода) Тогда
				сТаблицаОборудования.КонецПериода = ТекущаяДата();
			КонецЕсли;
			сТаблицаОборудования.ИНН = ИНН;
			сТаблицаОборудования.РНККТ = сТаблицаККТ.regId;
			сТаблицаОборудования.ЗНФН = сТаблицаНакопителей.storageId;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОборудования;
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецФункции //(ДанныеТорговогоОборудования)

Функция ПолучитьСписокКктПоИНН(ИНН, ИдентификаторСессии, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	ТаблицаККТ = Новый ТаблицаЗначений;
	ТаблицаККТ.Колонки.Добавить("address");
	ТаблицаККТ.Колонки.Добавить("factoryId");
	ТаблицаККТ.Колонки.Добавить("firstShiftDate");
	ТаблицаККТ.Колонки.Добавить("fsFinishDate");
	ТаблицаККТ.Колонки.Добавить("kpp");
	ТаблицаККТ.Колонки.Добавить("licenseFinishDate");
	ТаблицаККТ.Колонки.Добавить("licenseStartDate");
	ТаблицаККТ.Колонки.Добавить("model");
	ТаблицаККТ.Колонки.Добавить("organizationName");
	ТаблицаККТ.Колонки.Добавить("regId");
	ТаблицаККТ.Колонки.Добавить("status");
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ТекстОшибки = "Не заполнен ИНН";
		Возврат ТаблицаККТ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ТекстОшибки = "Не заполнен идентификатор сессии";
		Возврат ТаблицаККТ;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("inn", ИНН);
	
	ОтветСайта = СписокККТПоОорганизации(ПараметрыЗапроса, ИдентификаторСессии, ТекстОшибки);
	Если ОтветСайта = Неопределено Тогда
		ТекстОшибки = "Не удалось получить ответ от сайта";
		Возврат ТаблицаККТ;	
	КонецЕсли;
	
	Если ПустаяСтрока(ОтветСайта) Тогда
		ТекстОшибки = "Пустой ответ сайта при получении ккт";
		Возврат ТаблицаККТ;
	КонецЕсли;
	
	УдалосьРазобрать = Истина;
	РезультатРазбора = Служебный.РазобратьJSON(ОтветСайта);
	Если РезультатРазбора = Неопределено Тогда
		ТекстОшибки = "Не удалось разобрать ответ сайта при получении оборудования";
		УдалосьРазобрать = Ложь;
	Иначе
		Если НЕ ТипЗнч(РезультатРазбора) = Тип("Массив") Тогда
			ТекстОшибки = "Не удалось разобрать ответ сайта при получении оборудования";
			УдалосьРазобрать = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если УдалосьРазобрать Тогда
		
		Для Каждого ЭлементРазбора из РезультатРазбора Цикл
			
			сТаблицаККТ = ТаблицаККТ.Добавить();
			ЗаполнитьЗначенияСвойств(сТаблицаККТ, ЭлементРазбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаККТ;
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецФункции //(ПолучитьСписокКктПоИНН)

Функция ПолучитьФискальныеНакопителиПоККТ(ИНН, РегистрационныйНомерККТ, ИдентификаторСессии, ТекстОшибки = "")
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	ТаблицаНакопителей = Новый ТаблицаЗначений;
	ТаблицаНакопителей.Колонки.Добавить("storageId");
	ТаблицаНакопителей.Колонки.Добавить("model");
	ТаблицаНакопителей.Колонки.Добавить("status");
	ТаблицаНакопителей.Колонки.Добавить("effectiveFrom");
	ТаблицаНакопителей.Колонки.Добавить("effectiveTo");
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ТекстОшибки = "Не заполнен ИНН";
		Возврат ТаблицаНакопителей;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегистрационныйНомерККТ) Тогда
		ТекстОшибки = "Не заполнен регистрационный номер ККТ";
		Возврат ТаблицаНакопителей;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ТекстОшибки = "Не заполнен идентификатор сессии";
		Возврат ТаблицаНакопителей;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("inn", ИНН);
	ПараметрыЗапроса.Вставить("regId", РегистрационныйНомерККТ);
	
	ОтветСайта = СписокФискальныхНакопителейПоККТ(ПараметрыЗапроса, ИдентификаторСессии, ТекстОшибки);
	Если ОтветСайта = Неопределено Тогда
		ТекстОшибки = "Не удалось получить ответ от сайта";
		Возврат ТаблицаНакопителей;	
	КонецЕсли;
	
	Если ПустаяСтрока(ОтветСайта) Тогда
		ТекстОшибки = "Пустой ответ сайта при получении фискальных накопителей";
		Возврат ТаблицаНакопителей;
	КонецЕсли;
	
	УдалосьРазобрать = Истина;
	РезультатРазбора = Служебный.РазобратьJSON(ОтветСайта);
	Если РезультатРазбора = Неопределено Тогда
		ТекстОшибки = "Не удалось разобрать ответ сайта при получении фискальных накопителей";
		УдалосьРазобрать = Ложь;
	Иначе
		Если НЕ ТипЗнч(РезультатРазбора) = Тип("Массив") Тогда
			ТекстОшибки = "Не удалось разобрать ответ сайта при получении фискальных накопителей";
			УдалосьРазобрать = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если УдалосьРазобрать Тогда
		
		Для Каждого ЭлементРазбора из РезультатРазбора Цикл
			
			сТаблицаНакопителей = ТаблицаНакопителей.Добавить();
			ЗаполнитьЗначенияСвойств(сТаблицаНакопителей, ЭлементРазбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНакопителей;
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецФункции //(ПолучитьФискальныеНакопителиПоККТ)

#КонецОбласти


#Область Авторизация

Функция ПолучитьИдентификаторСессии(Логин, Пароль, ТекстОшибки = "") Экспорт
	
	//{{{Добавил Поляков А.С. 07.03.2019 №6201
	ИдентификаторСессии = "";
		
	//// ОТПРАВЛЯЕМ ЗАПРОС ////
	ОтветСайта = Аутентификация(Логин, Пароль, ТекстОшибки = "");
	Если ОтветСайта = Неопределено Тогда
		Возврат ИдентификаторСессии;	
	КонецЕсли;
	
	//// ОБРАБАТЫВАЕМ ОТВЕТ ////
	Если НЕ ПустаяСтрока(ОтветСайта) Тогда
		РезультатАвторизации = Служебный.РазобратьJSON(ОтветСайта);
		Если РезультатАвторизации = Неопределено Тогда
			ТекстОшибки = "Не удалось разобрать ответ сайта";
		Иначе
			Если РезультатАвторизации.Свойство("sid") Тогда
				ИдентификаторСессии = РезультатАвторизации.sid;	
			Иначе
				ТекстОшибки = "В ответе не найден идентификатор сессии(sid)";	
			КонецЕсли;
		КонецЕсли;	
	Иначе
		ТекстОшибки = "Пустой ответ авторизации";
	КонецЕсли;
	
	Возврат ИдентификаторСессии;
	//}}}Добавил Поляков А.С. 07.03.2019 №6201
	
КонецФункции //(ПолучитьИдентификаторСессии)

Функция ПолучитьДанныеАвторизации(Организация)
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	ДанныеАвторизации = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвторизацияСБИС.Логин,
	               |	АвторизацияСБИС.Пароль
	               |ИЗ
	               |	Справочник.АвторизацияСБИС КАК АвторизацияСБИС
	               |ГДЕ
	               |	АвторизацияСБИС.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЛогинПароль = Новый Структура;
			ЛогинПароль.Вставить("Логин", Выборка.Логин);
			ЛогинПароль.Вставить("Пароль", Выборка.Пароль);
			ДанныеАвторизации.Добавить(ЛогинПароль);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеАвторизации;
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецФункции //(ПолучитьДанныеАвторизации)

Функция ПолучитьДанныеАвторизацииПоОборудованию(ККТ, ФискальныйНакопитель)
	
	//{{{Добавил Поляков А.С. 12.03.2019 №6201
	ДанныеАвторизации = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвторизацияСБИСТаблицаОборудования.Ссылка.Логин,
	               |	АвторизацияСБИСТаблицаОборудования.Ссылка.Пароль
	               |ИЗ
	               |	Справочник.АвторизацияСБИС.ТаблицаОборудования КАК АвторизацияСБИСТаблицаОборудования
	               |ГДЕ
	               |	АвторизацияСБИСТаблицаОборудования.ККТ = &ККТ
	               |	И АвторизацияСБИСТаблицаОборудования.ФискальныйНакопитель = &ФискальныйНакопитель";
	Запрос.УстановитьПараметр("ККТ", ККТ);
	Запрос.УстановитьПараметр("ФискальныйНакопитель", ФискальныйНакопитель);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЛогинПароль = Новый Структура;
			ЛогинПароль.Вставить("Логин", Выборка.Логин);
			ЛогинПароль.Вставить("Пароль", Выборка.Пароль);
			ДанныеАвторизации.Добавить(ЛогинПароль);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеАвторизации;
	//}}}Добавил Поляков А.С. 12.03.2019 №6201
	
КонецФункции //(ПолучитьДанныеАвторизацииПоОборудованию) 

#КонецОбласти


#Область Чеки

Функция ЧекОтправлен(ЧекККМ, ИдентификаторСессии = "") Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ДанныеЧекаСБИС", Новый Структура);
		
	//// ПРОВЕРКА НЕОБХОДИМЫХ РЕКВИЗИТОВ ////
	Если НЕ ЗначениеЗаполнено(ЧекККМ) Тогда
		ОтветФункции.ОписаниеОшибки = "Значение ЧекККМ пустое";
		Возврат ОтветФункции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	//{{{Изменил МирныхК 07.02.2020
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	КассовыйЧек.Организация.ИНН КАК ИНН,
	//               |	КассовыйЧек.РНККТ_Кирилл,
	//               |	КассовыйЧек.ЗНФН_Кирилл,
	//               |	КассовыйЧек.ФДН_Кирилл,
	//               |	КассовыйЧек.ВремяПробития_Кирилл,
	//               |	КассовыйЧек.Организация
	//               |ИЗ
	//               |	Документ.КассовыйЧек КАК КассовыйЧек
	//               |ГДЕ
	//               |	КассовыйЧек.Ссылка = &Ссылка";
	Запрос.Текст = "ВЫБРАТЬ
	               |	КассовыйЧек.Организация.ИНН КАК ИНН,
	               |	ЕСТЬNULL(ПробитыеЧеки.РНККТ, КассовыйЧек.РНККТ_Кирилл) КАК РНККТ_Кирилл,
	               |	ЕСТЬNULL(ПробитыеЧеки.ЗНФН, КассовыйЧек.ЗНФН_Кирилл) КАК ЗНФН_Кирилл,
	               |	ЕСТЬNULL(ПробитыеЧеки.ФДН, КассовыйЧек.ФДН_Кирилл) КАК ФДН_Кирилл,
	               |	ЕСТЬNULL(ПробитыеЧеки.ВремяПробития, КассовыйЧек.ВремяПробития_Кирилл) КАК ВремяПробития_Кирилл,
	               |	КассовыйЧек.Организация
	               |ИЗ
	               |	Документ.КассовыйЧек КАК КассовыйЧек
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПробитыеЧеки КАК ПробитыеЧеки
	               |		ПО ПробитыеЧеки.ЧекККМ = КассовыйЧек.Ссылка
	               |ГДЕ
	               |	КассовыйЧек.Ссылка = &Ссылка";
	//}}}Изменил МирныхК 07.02.2020
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.ИНН) Тогда
		ОтветФункции.ОписаниеОшибки = "Не заполнен ИНН организации";
		Возврат ОтветФункции;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Выборка.РНККТ_Кирилл) И ЗначениеЗаполнено(Выборка.ВремяПробития_Кирилл) 
		И ЗначениеЗаполнено(Выборка.ЗНФН_Кирилл) И ЗначениеЗаполнено(Выборка.ФДН_Кирилл)) Тогда
		ОтветФункции.ОписаниеОшибки = "Чек не пробит на ККМ"; 
		Возврат ОтветФункции;
	КонецЕсли;
	
	//// АВТОРИЗАЦИЯ ////
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ДанныеАвторизации = ПолучитьДанныеАвторизацииПоОборудованию(Выборка.РНККТ_Кирилл, Выборка.ЗНФН_Кирилл);
		Если ДанныеАвторизации.Количество() = 0 Тогда
			ОтветФункции.ОписаниеОшибки = "Не найдены данные для авторизации";
			Возврат ОтветФункции;
		КонецЕсли;
		
		Логин = ДанныеАвторизации[0].Логин;
		Пароль = ДанныеАвторизации[0].Пароль;
		ТекстОшибки = "";
		ИдентификаторСессии = ПолучитьИдентификаторСессии(Логин, Пароль, ТекстОшибки);
		Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
			ОтветФункции.ОписаниеОшибки = ТекстОшибки;
			Возврат ОтветФункции;
		КонецЕсли;
	КонецЕсли;

	//// ОТПРАВКА ЗАПРОСА ////
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("inn", Выборка.ИНН);
	ПараметрыЗапроса.Вставить("regId", СокрЛП(Выборка.РНККТ_Кирилл));
	ПараметрыЗапроса.Вставить("storageId", СокрЛП(Выборка.ЗНФН_Кирилл));
	ПараметрыЗапроса.Вставить("docNum", СтрЗаменить(Строка(Выборка.ФДН_Кирилл), Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("docDate", Формат(Выборка.ВремяПробития_Кирилл, "ДФ=""гггг-ММ-дд"""));
	ПараметрыЗапроса.Вставить("format", "json"); 
	
	ОтветСайта = ПолучениеФискальногоДокументаПоИдентификатору(ПараметрыЗапроса, ИдентификаторСессии, ТекстОшибки);
	
	//// ОБРАБОТКА ОТВЕТА ////
	Если НЕ ПустаяСтрока(ОтветСайта) Тогда
		РезультатЧек = Служебный.РазобратьJSON(ОтветСайта);
		Если РезультатЧек = Неопределено Тогда
			ОтветФункции.ОписаниеОшибки = "Не удалось разобрать ответ сайта";
		Иначе
			Если РезультатЧек.Свойство("receipt") Тогда
				ОтветФункции.Результат = Истина;
				ОтветФункции.ДанныеЧекаСБИС = РезультатЧек;
			Иначе
				ОтветФункции.ОписаниеОшибки = "Некорретный ответ сайта";	
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		ДатаЧекаСдвиг = НачалоДня(Выборка.ВремяПробития_Кирилл) - 1;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("inn", Выборка.ИНН);
		ПараметрыЗапроса.Вставить("regId", СокрЛП(Выборка.РНККТ_Кирилл));
		ПараметрыЗапроса.Вставить("storageId", СокрЛП(Выборка.ЗНФН_Кирилл));
		ПараметрыЗапроса.Вставить("docNum", СтрЗаменить(Строка(Выборка.ФДН_Кирилл), Символы.НПП, ""));
		ПараметрыЗапроса.Вставить("docDate", Формат(ДатаЧекаСдвиг, "ДФ=""гггг-ММ-дд"""));
		ПараметрыЗапроса.Вставить("format", "json"); 
		
		ОтветСайта = ПолучениеФискальногоДокументаПоИдентификатору(ПараметрыЗапроса, ИдентификаторСессии, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ОтветСайта) Тогда
			РезультатЧек = Служебный.РазобратьJSON(ОтветСайта);
			Если РезультатЧек = Неопределено Тогда
				ОтветФункции.ОписаниеОшибки = "Пустой ответ сайта";
			Иначе
				Если РезультатЧек.Свойство("receipt") Тогда
					ОтветФункции.Результат = Истина;
					ОтветФункции.ДанныеЧекаСБИС = РезультатЧек;	
				Иначе
					ОтветФункции.ОписаниеОшибки = "Пустой ответ сайта";	
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			ОтветФункции.ОписаниеОшибки = "Пустой ответ сайта";
		КонецЕсли;
	КонецЕсли;
		
	Возврат ОтветФункции;
КонецФункции //}}}Добавил Поляков А.С. 07.03.2019 №6201

Функция ПолучитьСсылкуОФД(ЧекККМ, ИдентификаторСессии = "") Экспорт
	
	//{{{Добавил Поляков А.С. 17.03.2021
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("СсылкаОФД", "");
		
	//// ПРОВЕРКА НЕОБХОДИМЫХ РЕКВИЗИТОВ ////
	Если НЕ ЗначениеЗаполнено(ЧекККМ) Тогда
		ОтветФункции.ОписаниеОшибки = "Значение ЧекККМ пустое";
		Возврат ОтветФункции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПробитыеЧеки.РНККТ, КассовыйЧек.РНККТ_Кирилл) КАК РНККТ_Кирилл,
	               |	ЕСТЬNULL(ПробитыеЧеки.ВремяПробития, КассовыйЧек.ВремяПробития_Кирилл) КАК ВремяПробития_Кирилл,
	               |	ЕСТЬNULL(ПробитыеЧеки.ФПД, КассовыйЧек.ФПД_Кирилл) КАК ФПД_Кирилл,
	               |	ЕСТЬNULL(ПробитыеЧеки.ВремяПробитияСБИС, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяПробитияСБИС
	               |ИЗ
	               |	Документ.КассовыйЧек КАК КассовыйЧек
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПробитыеЧеки КАК ПробитыеЧеки
	               |		ПО (ПробитыеЧеки.ЧекККМ = КассовыйЧек.Ссылка)
	               |ГДЕ
	               |	КассовыйЧек.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
		
	Если НЕ (ЗначениеЗаполнено(Выборка.РНККТ_Кирилл) 
		И ЗначениеЗаполнено(Выборка.ВремяПробития_Кирилл) И ЗначениеЗаполнено(Выборка.ФПД_Кирилл)) Тогда
		ОтветФункции.ОписаниеОшибки = "Чек не пробит на ККМ"; 
		Возврат ОтветФункции;
	КонецЕсли;
	
	//// ОТПРАВКА ЗАПРОСА ////
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("kktregid", СокрЛП(Выборка.РНККТ_Кирилл));
	Если ЗначениеЗаполнено(Выборка.ВремяПробитияСБИС) Тогда
		ПараметрыЗапроса.Вставить("date", Формат(Выборка.ВремяПробитияСБИС, "ДФ=""ддММгг"""));	
	Иначе
		ПараметрыЗапроса.Вставить("date", Формат(Выборка.ВремяПробития_Кирилл, "ДФ=""ддММгг"""));
	КонецЕсли;
	ПараметрыЗапроса.Вставить("fiscal_sign", СокрЛП(Выборка.ФПД_Кирилл));
	
	ТекстОшибки = "";
	СсылкаОФД = ПолучениеФискальногоДокументаПоСсылке(ПараметрыЗапроса, ТекстОшибки);
	Если ЗначениеЗаполнено(СсылкаОФД) Тогда
		ОтветФункции.Результат = Истина;
		ОтветФункции.СсылкаОФД = СсылкаОФД;	
	Иначе
		ОтветФункции.ОписаниеОшибки = ТекстОшибки;	
	КонецЕсли;
	
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 17.03.2021
	
КонецФункции //(ПолучитьСсылкуОФД)

#КонецОбласти


#Область Служебные

Функция ПолучитьДатуЧекаПоСмещению(Смещение)
	
	//{{{Добавил Поляков А.С. 17.03.2021
	ДатаНачала = Дата(1970, 01, 01);
	ДатаЧека = ДатаНачала + Смещение;
	
	Возврат ДатаЧека;
	//}}}Добавил Поляков А.С. 17.03.2021
	
КонецФункции //(ПолучитьДатуЧекаПоСмещению)

Функция КонвертироватьВДату(Строка)
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	//«2018-11-23T12:10:04»
	
	Дата = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(Строка) Тогда
		
		ДатаСтрокой = Строка;
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "-", ",");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "T", ",");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", ",");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ",", "");
		
		Попытка
			Дата = Дата(ДатаСтрокой);
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;

	Возврат Дата;
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецФункции //(КонвертироватьВДату)

Процедура ОбновитьСостояниеОбменаЧека(ЧекККМ, ИдентификаторСессии = "", ТекстОшибки = "") Экспорт
	
	//{{{Добавил Поляков А.С. 17.03.2021
	ОтветОтправки = СБИС.ЧекОтправлен(ЧекККМ, ИдентификаторСессии);
	Если ОтветОтправки.Результат Тогда
		ДатаЧекаСБИС = ПолучитьДатуЧекаПоСмещению(ОтветОтправки.ДанныеЧекаСБИС.receipt.dateTime);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ *		            
		               |ИЗ
		               |	РегистрСведений.ПробитыеЧеки.СрезПоследних(, ЧекККМ = &ЧекККМ) КАК ПробитыеЧекиСрезПоследних";
		Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВремяПробитияСБИС) Тогда
			НаборПробитыеЧеки = РегистрыСведений.ПробитыеЧеки.СоздатьНаборЗаписей();
			НаборПробитыеЧеки.Отбор.ЧекККМ.Установить(ЧекККМ);
			НаборПробитыеЧеки.ОбменДанными.Загрузка = Истина;
			
			ЗаписьПробитыеЧеки = НаборПробитыеЧеки.Добавить();
			ЗаписьПробитыеЧеки.ЧекККМ = ЧекККМ;
			ЗаполнитьЗначенияСвойств(ЗаписьПробитыеЧеки, Выборка);
			ЗаписьПробитыеЧеки.ВремяПробитияСБИС = ДатаЧекаСБИС;
			
			НаборПробитыеЧеки.Записать();
		КонецЕсли;
	
		ОтветПолучения = СБИС.ПолучитьСсылкуОФД(ЧекККМ, ИдентификаторСессии);
		Если ОтветПолучения.Результат Тогда
			СсылкаОФД = ОтветПолучения.СсылкаОФД;	
		Иначе
			СсылкаОФД = "Чек в ОФД. Ошибка формирования ссылки";	
		КонецЕсли;
		
		ОтветУстановки = Служебный.УстановитьСвойствоОбъекта(ЧекККМ, ПланыВидовХарактеристик.СвойстваОбъектов.СсылкаОФД, СсылкаОФД);
		Если ОтветУстановки.Результат = Ложь Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОтветУстановки.ОписаниеОшибки;	
		КонецЕсли;	
	Иначе
		ОтветУстановки = Служебный.УстановитьСвойствоОбъекта(ЧекККМ, ПланыВидовХарактеристик.СвойстваОбъектов.СсылкаОФД, "Отсутствует в ОФД");
		Если ОтветУстановки.Результат = Ложь Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОтветУстановки.ОписаниеОшибки;	
		КонецЕсли;	
	КонецЕсли;
	//}}}Добавил Поляков А.С. 17.03.2021
	
КонецПроцедуры //(ОбновитьСостояниеОбменаЧека)

Процедура ОбновитьСостояниеОбменаЧеков_Фоновое(ПроверкаБазы = Истина) Экспорт
	
	//{{{Добавил Поляков А.С. 11.03.2019 №6201
	обЛог = Логирование.НачалоВыполненияФоновогоЗадания("ОбновлениеСостоянияОбменаСоСБИС");
	
	Если ПроверкаБазы И Служебный.ЭтоТестоваяБаза() Тогда
		Логирование.ДобавитьИнформациюФоновогоЗадания(обЛог, "Тестовая база");
		Логирование.ОкончаниеВыполненияФоновогоЗадания(обЛог);
		Возврат;
	КонецЕсли;
	
	ЗапросОборудования = Новый Запрос;
	ЗапросОборудования.Текст = "ВЫБРАТЬ
	                          |	АвторизацияСБИСТаблицаОборудования.Ссылка.Организация,
	                          |	АвторизацияСБИСТаблицаОборудования.Ссылка.Логин,
	                          |	АвторизацияСБИСТаблицаОборудования.Ссылка.Пароль,
	                          |	АвторизацияСБИСТаблицаОборудования.ККТ,
	                          |	АвторизацияСБИСТаблицаОборудования.ФискальныйНакопитель
	                          |ИЗ
	                          |	Справочник.АвторизацияСБИС.ТаблицаОборудования КАК АвторизацияСБИСТаблицаОборудования";
	РезультатЗапросаОборудования = ЗапросОборудования.Выполнить();
	Если РезультатЗапросаОборудования.Пустой() Тогда
		Логирование.ДобавитьОшибкуФоновогоЗадания(обЛог, "Не заданы учётные записи");
		Логирование.ОкончаниеВыполненияФоновогоЗадания(обЛог, ТекущаяДата());
		Возврат;
	КонецЕсли;
	
	ВыборкаОборудования = РезультатЗапросаОборудования.Выбрать();
	Пока ВыборкаОборудования.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПробитыеЧеки.ЧекККМ
		               |ИЗ
		               |	РегистрСведений.ПробитыеЧеки КАК ПробитыеЧеки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |		ПО ПробитыеЧеки.ЧекККМ = ЗначенияСвойствОбъектов.Объект
		               |			И (ЗначенияСвойствОбъектов.Свойство = &Свойство)
		               |ГДЕ
		               |	ПробитыеЧеки.Период > &ДатаОтбора
		               |	И ПробитыеЧеки.РНККТ = &РНККТ_Кирилл
		               |	И ПробитыеЧеки.ЗНФН = &ЗНФН_Кирилл
		               |	И ВЫБОР
		               |			КОГДА ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА (ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК СТРОКА(4))) = ""http""
		               |						ТОГДА ЛОЖЬ
		               |					ИНАЧЕ ИСТИНА
		               |				КОНЕЦ
		               |		КОНЕЦ";
		
		Запрос.УстановитьПараметр("РНККТ_Кирилл", ВыборкаОборудования.ККТ);
		Запрос.УстановитьПараметр("ЗНФН_Кирилл", ВыборкаОборудования.ФискальныйНакопитель);
		Запрос.УстановитьПараметр("ДатаОтбора", Дата(2018, 01, 24));
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.СсылкаОФД);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ДанныеАвторизации = ПолучитьДанныеАвторизацииПоОборудованию(ВыборкаОборудования.ККТ, ВыборкаОборудования.ФискальныйНакопитель);
			Если ДанныеАвторизации.Количество() = 0 Тогда
				ТекстЛога = "Не найдены данные для авторизации. ККТ: " + ВыборкаОборудования.ККТ + ". ФН: " + ВыборкаОборудования.ФискальныйНакопитель;
				Логирование.ДобавитьОшибкуФоновогоЗадания(обЛог, ТекстЛога);
				Продолжить;
			КонецЕсли;
			Логин = ДанныеАвторизации[0].Логин;
			Пароль = ДанныеАвторизации[0].Пароль;
			ТекстОшибки = "";
			ИдентификаторСессии = ПолучитьИдентификаторСессии(Логин, Пароль, ТекстОшибки);
			Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
				ТекстЛога = "Не удалось получить идентификатор сессии. Текст ошибки: " + ТекстОшибки + ". ККТ: " + ВыборкаОборудования.ККТ + ". ФН: " + ВыборкаОборудования.ФискальныйНакопитель;
				Логирование.ДобавитьОшибкуФоновогоЗадания(обЛог, ТекстЛога);
				Продолжить;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Логирование.ДобавитьИнформациюФоновогоЗадания(обЛог, "Начало обработки чека. ККТ: " + ВыборкаОборудования.ККТ + ". ФН: " + ВыборкаОборудования.ФискальныйНакопитель, Выборка.ЧекККМ);
				ТекстЛога = "";
				ОбновитьСостояниеОбменаЧека(Выборка.ЧекККМ, ИдентификаторСессии, ТекстЛога);
				Если ЗначениеЗаполнено(ТекстЛога) Тогда
					Логирование.ДобавитьОшибкуФоновогоЗадания(обЛог, ТекстЛога, Выборка.ЧекККМ);	
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Логирование.ОкончаниеВыполненияФоновогоЗадания(обЛог, ТекущаяДата());
	//}}}Добавил Поляков А.С. 11.03.2019 №6201
	
КонецПроцедуры //(ОбновитьСостояниеОбменаЧеков_Фоновое) 

#КонецОбласти
