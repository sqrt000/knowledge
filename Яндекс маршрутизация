
/////////////////////////////////////
/////////	ПЛАНИРОВАНИЕ	/////////
/////////////////////////////////////

#Область ПодготовкаДанных

////ПРИКЛАДНЫЕ МЕТОДЫ////
Функция ПолучитьДанныеДокументаДляРасчетаМаршрута(Документ, Товары = Неопределено, ДопПараметры = Неопределено) Экспорт
			
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
		
	пТовары = ПолучитьПустуюТаблицу("Товары");
	Если Товары = Неопределено Тогда
		пТовары = МодульЛогистики.ПолучитьТоварыДляРасчетаМаршрута_ПоДокументу(Документ);
	Иначе
		Для Каждого сТовары Из Товары Цикл
			сТоварыДляРасчета = пТовары.Добавить();
			ЗаполнитьЗначенияСвойств(сТоварыДляРасчета, сТовары);
		КонецЦикла;
	КонецЕсли;

	пДопПараметры = Новый Структура;
	Если ДопПараметры = Неопределено Тогда
		пДопПараметры.Вставить("ДанныеДоставкиЗаборСМашины", Неопределено);
		пДопПараметры.Вставить("ВозвратНаСкладНаСледДень", Ложь);
		пДопПараметры.Вставить("СкладПланирования", Неопределено);
		пДопПараметры.Вставить("БезВозвратаНаСклад", Ложь);
		пДопПараметры.Вставить("ДатаНачалаМаршрута", НачалоДня(ТекущаяДата()));
		пДопПараметры.Вставить("ДатаОкончанияМаршрута", КонецДня(ТекущаяДата()));
	Иначе
		Если Служебный.СвойствоСуществует(ДопПараметры, "ДанныеДоставкиЗаборСМашины") Тогда
			пДопПараметры.Вставить("ДанныеДоставкиЗаборСМашины", ДопПараметры.ДанныеДоставкиЗаборСМашины);	
		Иначе
			пДопПараметры.Вставить("ДанныеДоставкиЗаборСМашины", Неопределено);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ВозвратНаСкладНаСледДень") Тогда
			пДопПараметры.Вставить("ВозвратНаСкладНаСледДень", ДопПараметры.ВозвратНаСкладНаСледДень);	
		Иначе
			пДопПараметры.Вставить("ВозвратНаСкладНаСледДень", Ложь);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "СкладПланирования") Тогда
			пДопПараметры.Вставить("СкладПланирования", ДопПараметры.СкладПланирования);	
		Иначе
			пДопПараметры.Вставить("СкладПланирования", Неопределено);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "БезВозвратаНаСклад") Тогда
			пДопПараметры.Вставить("БезВозвратаНаСклад", ДопПараметры.БезВозвратаНаСклад);	
		Иначе
			пДопПараметры.Вставить("БезВозвратаНаСклад", Ложь);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ДатаНачалаМаршрута") Тогда
			пДопПараметры.Вставить("ДатаНачалаМаршрута", ДопПараметры.ДатаНачалаМаршрута);	
		Иначе
			пДопПараметры.Вставить("ДатаНачалаМаршрута", НачалоДня(ТекущаяДата()));	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ДатаОкончанияМаршрута") Тогда
			пДопПараметры.Вставить("ДатаОкончанияМаршрута", ДопПараметры.ДатаОкончанияМаршрута);	
		Иначе
			пДопПараметры.Вставить("ДатаОкончанияМаршрута", КонецДня(ТекущаяДата()));	
		КонецЕсли;
	КонецЕсли;

	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОтветФункции = ПолучитьДанныеТочкиДоставки_ЗаказПокупателя(Документ, пТовары, пДопПараметры);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ОтветФункции = ПолучитьДанныеТочкиДоставки_РеализацияТоваровУслуг(Документ, пТовары, пДопПараметры);	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда	
		ОтветФункции = ПолучитьДанныеТочкиДоставки_ЗаказПоставщику(Документ, пТовары, пДопПараметры);	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ОтветФункции = ПолучитьДанныеТочкиДоставки_ВозвратОтПокупателя(Документ, пТовары, пДопПараметры);	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ОтветФункции = ПолучитьДанныеТочкиДоставки_ВозвратПоставщику(Документ, пТовары, пДопПараметры);	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ОтветФункции = ПолучитьДанныеТочкиДоставки_Перемещение(Документ, пТовары, пДопПараметры);
	Иначе
		ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(пДопПараметры.ДатаНачалаМаршрута, пДопПараметры.ДатаОкончанияМаршрута));
		ОтветФункции.ОписаниеОшибки = "Некорректный тип документа";	
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеДокументаДляРасчетаМаршрута)

Функция ПолучитьДанныеСкладаДляРасчетаМаршрута(Склад, ДопПараметры = Неопределено) Экспорт
	
	пДопПараметры = Новый Структура;
		
	Если ДопПараметры = Неопределено Тогда
		пДопПараметры.Вставить("ВозратНаСкладНаСледДень", Ложь);
		пДопПараметры.Вставить("ПереносНаСледДеньНачала", Ложь);
		пДопПараметры.Вставить("ПереносНаСледДеньКонца", Ложь);
		пДопПараметры.Вставить("ДатаНачалаМаршрута", НачалоДня(ТекущаяДата()));
		пДопПараметры.Вставить("ДатаОкончанияМаршрута", КонецДня(ТекущаяДата()));
	Иначе
		Если Служебный.СвойствоСуществует(ДопПараметры, "ВозратНаСкладНаСледДень") Тогда
			пДопПараметры.Вставить("ВозратНаСкладНаСледДень", ДопПараметры.ВозратНаСкладНаСледДень);	
		Иначе
			пДопПараметры.Вставить("ВозратНаСкладНаСледДень", Ложь);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ПереносНаСледДеньНачала") Тогда
			пДопПараметры.Вставить("ПереносНаСледДеньНачала", ДопПараметры.ПереносНаСледДеньНачала);	
		Иначе
			пДопПараметры.Вставить("ПереносНаСледДеньНачала", Ложь);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ПереносНаСледДеньКонца") Тогда
			пДопПараметры.Вставить("ПереносНаСледДеньКонца", ДопПараметры.ПереносНаСледДеньКонца);	
		Иначе
			пДопПараметры.Вставить("ПереносНаСледДеньКонца", Ложь);	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ДатаНачалаМаршрута") Тогда
			пДопПараметры.Вставить("ДатаНачалаМаршрута", ДопПараметры.ДатаНачалаМаршрута);	
		Иначе
			пДопПараметры.Вставить("ДатаНачалаМаршрута", НачалоДня(ТекущаяДата()));	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(ДопПараметры, "ДатаОкончанияМаршрута") Тогда
			пДопПараметры.Вставить("ДатаОкончанияМаршрута", ДопПараметры.ДатаОкончанияМаршрута);	
		Иначе
			пДопПараметры.Вставить("ДатаОкончанияМаршрута", КонецДня(ТекущаяДата()));	
		КонецЕсли;
	КонецЕсли;

	Возврат ПолучитьДанныеСклада(Склад, пДопПараметры);
	
КонецФункции //(ПолучитьДанныеСкладаДляРасчетаМаршрута)

Функция ПолучитьДанныеТранспортаДляРасчетаМаршрута(Машина, Водитель, ВремяРаботы, ДатаНачалаМаршрута,  ДатаОкончанияМаршрута, ИдТранспорта = Неопределено, Парковка = Неопределено,
	ГруппаБалансировки = Неопределено, БезВозвратаНаСклад = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ИдТранспорта) Тогда
		пИдТранспорта = ИдТранспорта;	
	Иначе
		ДанныеМашины = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Машина, "Наименование, ЯМ_Логин");
		Если ЗначениеЗаполнено(ДанныеМашины.ЯМ_Логин) Тогда
			пИдТранспорта = ДанныеМашины.ЯМ_Логин;	
		Иначе
			пИдТранспорта = ДанныеМашины.Наименование;	
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Парковка) Тогда
		пПарковка = Парковка;
	Иначе
		пПарковка = Новый Структура;
		пПарковка.Вставить("ЗаезжатьНаСкладВНачалеРаботы", Ложь);
		пПарковка.Вставить("СтартСПарковки", Ложь);
		пПарковка.Вставить("ВозвратНаПарковку", Ложь);
		пПарковка.Вставить("АдресПарковки", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаБалансировки) Тогда
		пГруппаБалансировки = ГруппаБалансировки;		
	Иначе
		пГруппаБалансировки = "";
	КонецЕсли;
	
	Возврат ПолучитьДанныеТранспорта(пИдТранспорта, Машина, Водитель, ВремяРаботы, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, пПарковка, пГруппаБалансировки, БезВозвратаНаСклад);
	
КонецФункции //(ПолучитьДанныеТранспортаДляРасчетаМаршрута)

////ДАННЫЕ ТОЧЕК ДОСТАВКИ////

Функция ПолучитьДанныеТочкиДоставки_РеализацияТоваровУслуг(РеализацияТоваровУслуг, Товары, ДопПараметры)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
	
	Если НЕ ЗначениеЗаполнено(РеализацияТоваровУслуг) Тогда
		ОтветФункции.ОписаниеОшибки = "Не заполнен РТИУ";
		Возврат ОтветФункции;
	КонецЕсли;

	ДанныеАдресаЗабораСМашины = ДопПараметры.ДанныеДоставкиЗаборСМашины;
	ВозвратНаСкладНаСледДень = ДопПараметры.ВозвратНаСкладНаСледДень;
	СкладОтправитель = ДопПараметры.ВозвратНаСкладНаСледДень;
	
	//// ПРОВЕРКА РЕКВИЗИТОВ ЗАКАЗА ////
	ДанныеРТИУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеализацияТоваровУслуг, "Ссылка, ПометкаУдаления, Сделка, Контрагент, Номер");
	
	мОшибки = Новый Массив;
	Если ДанныеРТИУ.ПометкаУдаления Тогда
		мОшибки.Добавить("РТИУ помечен на удаление");
	КонецЕсли;
		
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ДанныеДоставки = МодульЛогистики.ПолучитьДанныеДоставкиПоРеализации(ДанныеРТИУ.Ссылка, ДанныеАдресаЗабораСМашины, ВозвратНаСкладНаСледДень, СкладОтправитель);
	
	Если ЗначениеЗаполнено(ДанныеДоставки.ОписаниеОшибкиАдресДоставки) Тогда
		мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиАдресДоставки);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДоставки.ОписаниеОшибкиВременноеОкно) Тогда
		мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиВременноеОкно);	
	КонецЕсли;
	
	//// ОБРАБОТКА ТОВАРОВ ////		
	ОтветГабариты = МодульЛогистики.ПолучитьОбщиеГабаритыТоваров(Товары);
	Если ОтветГабариты.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветГабариты.ОписаниеОшибки);	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		ОтветФункции.ЭтоОшибкаЗаполненияГабаритов = Истина;
		Возврат ОтветФункции;
	КонецЕсли;
	
	КИ_Контрагента = МодульЛогистики.ПолучитьКонтактнуюИнформациюКонтрагента(ДанныеРТИУ.Контрагент);
	НомерЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеРТИУ.Сделка, "Номер");
	
	ОтветФункции.Данные.НомерЗаказа = "ЗК_" + СокрЛП(НомерЗаказа) + "(" + СокрЛП(ДанныеРТИУ.Номер) + ")";
	Если ДанныеДоставки.ЭтоСамовывоз Тогда
		ОтветФункции.Данные.НомерЗаказа = ОтветФункции.Данные.НомерЗаказа + "_САМОВЫВОЗ";	
	КонецЕсли;
	
	ОтветФункции.Данные.АдресПолучателя = ДанныеДоставки.АдресДоставки;
	ОтветФункции.Данные.Широта = ДанныеДоставки.ШиротаАдресДоставки;
	ОтветФункции.Данные.Долгота = ДанныеДоставки.ДолготаАдресДоставки;
	ОтветФункции.Данные.Город = ДанныеДоставки.Город;
	//ОтветФункции.Данные.ВременноеОкно = ДанныеДоставки.ВременноеОкно;
	
	ВременноеОкно = ДанныеДоставки.ВременноеОкно;
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
		ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
	КонецЦикла;
	
	ОтветФункции.Данные.НачалоВременногоОкна = ДанныеДоставки.НачалоВременногоОкна;
	ОтветФункции.Данные.КонецВременногоОкна = ДанныеДоставки.КонецВременногоОкна;
						
	ОтветФункции.Данные.НаименованиеПолучателя = КИ_Контрагента.Наименование;
	ОтветФункции.Данные.ТелефонПолучателя = КИ_Контрагента.Телефон;
	
	ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
	ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = 600;
	ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = 600;
	ОтветФункции.Данные.ТипЗаказа = "delivery";
	ОтветФункции.Данные.МестоНазначения = "";
	
	ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
	ОтветФункции.Данные.Ширина = 1;
	ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
	ОтветФункции.Данные.Высота = 1;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТочкиДоставки_РеализацияТоваровУслуг)

Функция ПолучитьДанныеТочкиДоставки_ЗаказПокупателя(ЗаказПокупателя, Товары, ДопПараметры)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ОтветФункции.ОписаниеОшибки = "Не заполнен заказ покупателя";
		Возврат ОтветФункции;
	КонецЕсли;
	
	ДанныеАдресаЗабораСМашины = ДопПараметры.ДанныеДоставкиЗаборСМашины;
	ВозвратНаСкладНаСледДень = ДопПараметры.ВозвратНаСкладНаСледДень;
	СкладОтправитель = ДопПараметры.ВозвратНаСкладНаСледДень;
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказПокупателя, "ПометкаУдаления, Контрагент, Номер");  
	
	//// ПРОВЕРКА РЕКВИЗИТОВ ЗАКАЗА ////
	мОшибки = Новый Массив;
	Если ДанныеЗаказа.ПометкаУдаления Тогда
		мОшибки.Добавить("Заказ помечен на удаление");
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	//// ДАННЫЕ ДОСТАВКИ ЗАКАЗА ////
	ДанныеДоставки = МодульЛогистики.ПолучитьДанныеДоставкиПоЗаказу(ЗаказПокупателя, ДанныеАдресаЗабораСМашины, ВозвратНаСкладНаСледДень, СкладОтправитель);
	
	Если ЗначениеЗаполнено(ДанныеДоставки.ОписаниеОшибкиАдресДоставки) Тогда
		мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиАдресДоставки);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДоставки.ОписаниеОшибкиВременноеОкно) Тогда
		мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиВременноеОкно);	
	КонецЕсли;	
		
	//// ОБРАБОТКА ТОВАРОВ ////
	ОтветГабариты = МодульЛогистики.ПолучитьОбщиеГабаритыТоваров(Товары);
	Если ОтветГабариты.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветГабариты.ОписаниеОшибки)	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		ОтветФункции.ЭтоОшибкаЗаполненияГабаритов = Истина;
		Возврат ОтветФункции;
	КонецЕсли;
	
	КИ_Контрагента = МодульЛогистики.ПолучитьКонтактнуюИнформациюКонтрагента(ДанныеЗаказа.Контрагент);
	
	ОтветФункции.Данные.НомерЗаказа = "ЗК_" + СокрЛП(ДанныеЗаказа.Номер);
	Если ДанныеДоставки.ЭтоСамовывоз Тогда
		ОтветФункции.Данные.НомерЗаказа = ОтветФункции.Данные.НомерЗаказа + "_САМОВЫВОЗ";	
	КонецЕсли;
	
	ОтветФункции.Данные.АдресПолучателя = ДанныеДоставки.АдресДоставки;
	ОтветФункции.Данные.Широта = ДанныеДоставки.ШиротаАдресДоставки;
	ОтветФункции.Данные.Долгота = ДанныеДоставки.ДолготаАдресДоставки;
	ОтветФункции.Данные.Город = ДанныеДоставки.Город;
	
	ВременноеОкно = ДанныеДоставки.ВременноеОкно; 
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
		ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
	КонецЦикла;
	ОтветФункции.Данные.НачалоВременногоОкна = ДанныеДоставки.НачалоВременногоОкна;
	ОтветФункции.Данные.КонецВременногоОкна = ДанныеДоставки.КонецВременногоОкна;
	
	ОтветФункции.Данные.НаименованиеПолучателя = КИ_Контрагента.Наименование;
	ОтветФункции.Данные.ТелефонПолучателя = КИ_Контрагента.Телефон;
	
	ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
	ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = 600;
	ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = 600;
	ОтветФункции.Данные.ТипЗаказа = "delivery";
	ОтветФункции.Данные.МестоНазначения = "";
	
	ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
	ОтветФункции.Данные.Ширина = 1;
	ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
	ОтветФункции.Данные.Высота = 1;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТочкиДоставки_ЗаказПокупателя)

Функция ПолучитьДанныеТочкиДоставки_ЗаказПоставщику(ЗаказПоставщику, Товары, ДопПараметры)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
		
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ОтветФункции.ОписаниеОшибки = "Не заполнен заказ поставщику";
		Возврат ОтветФункции;
	КонецЕсли;
	
	ВозвратНаСкладНаСледДень = ДопПараметры.ВозвратНаСкладНаСледДень;
	БезВозвратаНаСклад = ДопПараметры.БезВозвратаНаСклад;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка,
	               |	ЗаказПоставщику.ПометкаУдаления,
	               |	ЗаказПоставщику.Проведен,
	               |	ЗаказПоставщику.СпособДоставки,
	               |	ЗаказПоставщику.Контрагент,
	               |	ЗаказПоставщику.Номер,
	               |	ЗаказПоставщику.Склад,
	               |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаДоставки,
	               |	ЗаказПоставщику.Дата КАК ДатаЗаказа
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО ЗаказПоставщику.Ссылка = ЗначенияСвойствОбъектов.Объект
	               |			И (ЗначенияСвойствОбъектов.Свойство = &СвойствоДатаЗабора)
	               |ГДЕ
	               |	ЗаказПоставщику.Ссылка = &ЗаказПоставщику";
	Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
	Запрос.УстановитьПараметр("СвойствоДатаЗабора", ПланыВидовХарактеристик.СвойстваОбъектов.ДатаЗабора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//// ПРОВЕРКА РЕКВИЗИТОВ ЗАКАЗА ////
	ВыборкаЗаказ = РезультатЗапроса.Выбрать();
	ВыборкаЗаказ.Следующий();
	
	мОшибки = Новый Массив;
	Если ВыборкаЗаказ.ПометкаУдаления Тогда
		мОшибки.Добавить("Заказ помечен на удаление");
	КонецЕсли;
		
	Если НЕ ВыборкаЗаказ.СпособДоставки = Перечисления.СпособДоставкиЗаказаПоставщику.СамовывозТовара Тогда
		мОшибки.Добавить("Доставка не нужна");
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаЗаказ.ДатаДоставки) Тогда		
		ДанныеДоставки = МодульЛогистики.ПолучитьДанныеДоставкиПоставщика(ВыборкаЗаказ.Контрагент, ВыборкаЗаказ.Склад, ВыборкаЗаказ.ДатаЗаказа, ВыборкаЗаказ.ДатаДоставки, Ложь);
		Если НЕ ЗначениеЗаполнено(ДанныеДоставки.АдресДоставки) Тогда
			мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиАдресДоставки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеДоставки.ВремяРаботы) Тогда
			мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиВремяРаботы);
		КонецЕсли;
	Иначе
		мОшибки.Добавить("Не заполнена дата забора");	
	КонецЕсли;

	//// ОБРАБОТКА ТОВАРОВ ////
	ОтветГабариты = МодульЛогистики.ПолучитьОбщиеГабаритыТоваров(Товары);
	Если ОтветГабариты.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветГабариты.ОписаниеОшибки);	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		ОтветФункции.ЭтоОшибкаЗаполненияГабаритов = Истина;
		Возврат ОтветФункции;
	КонецЕсли;
	
	МестоНазначения = "";
	
	Если БезВозвратаНаСклад = Ложь Тогда
		ОтветФункции.Вставить("ДанныеДоп", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
		
		ДопПараметрыСклада = Новый Структура;
		ДопПараметрыСклада.Вставить("ВозратНаСкладНаСледДень", ВозвратНаСкладНаСледДень);
		ДопПараметрыСклада.Вставить("ПереносНаСледДеньНачала", Истина);
		ДопПараметрыСклада.Вставить("ПереносНаСледДеньКонца", Истина);
				
		ОтветДанныеСклада = ПолучитьДанныеСкладаДляРасчетаМаршрута(ВыборкаЗаказ.Склад, ДопПараметрыСклада);
		Если ОтветДанныеСклада.Результат = Ложь Тогда
			мОшибки.Добавить(ОтветДанныеСклада.ОписаниеОшибки);			
		КонецЕсли;
		
		Если мОшибки.Количество() > 0 Тогда
			ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
			Возврат ОтветФункции;
		КонецЕсли;
		
		ДанныеСклада = ОтветДанныеСклада.Данные;
		
		ОтветФункции.ДанныеДоп.НомерЗаказа = "ЗП_" + СокрЛП(ВыборкаЗаказ.Номер) + "_Доставка";
		
		ОтветФункции.ДанныеДоп.АдресПолучателя = ДанныеСклада.АдресСклада;
		ОтветФункции.ДанныеДоп.Широта = ДанныеСклада.Широта;
		ОтветФункции.ДанныеДоп.Долгота = ДанныеСклада.Долгота;
		ОтветФункции.ДанныеДоп.НаименованиеПолучателя = ДанныеСклада.НазваниеСклада;
		ОтветФункции.ДанныеДоп.ТелефонПолучателя = "";
		
		ВременноеОкно = ДанныеСклада.ВремяРаботы; 
		ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
		Пока ДлительностьМаршрута >= 0 Цикл
			ОтветФункции.ДанныеДоп["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
			ДлительностьМаршрута = ДлительностьМаршрута - 1;
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
		КонецЦикла;
		ОтветФункции.ДанныеДоп.НачалоВременногоОкна = ДанныеСклада.ВремяРаботыНачало;
		ОтветФункции.ДанныеДоп.КонецВременногоОкна = ДанныеСклада.ВремяРаботыКонец;
			
		ОтветФункции.ДанныеДоп.ЖесткоеВременноеОкно = Истина;
		ОтветФункции.ДанныеДоп.ВремяОбслуживанияНаАдрес = ДанныеСклада.ВремяОбслуживанияНаАдрес;
		ОтветФункции.ДанныеДоп.ВремяОбслуживанияНаЗаказ = ДанныеСклада.ВремяОбслуживанияНаЗаказ;
		ОтветФункции.ДанныеДоп.ТипЗаказа = "delivery";
		ОтветФункции.ДанныеДоп.МестоНазначения = "";
		
		ОтветФункции.ДанныеДоп.Масса = ОтветГабариты.Масса;
		ОтветФункции.ДанныеДоп.Ширина = 1;
		ОтветФункции.ДанныеДоп.Длина = ОтветГабариты.Объем;
		ОтветФункции.ДанныеДоп.Высота = 1;
		
		МестоНазначения = ОтветФункции.ДанныеДоп.НомерЗаказа;
	КонецЕсли;

	КИ_Контрагента = МодульЛогистики.ПолучитьКонтактнуюИнформациюКонтрагента(ВыборкаЗаказ.Контрагент);
	ВремяОбслуживания = МодульЛогистики.ПолучитьВремяОбслуживанияУПоставщика(ВыборкаЗаказ.Контрагент, Товары);
	
	ОтветФункции.Данные.НомерЗаказа = "ЗП_" + СокрЛП(ВыборкаЗаказ.Номер);
	
	ОтветФункции.Данные.АдресПолучателя = ДанныеДоставки.АдресДоставки;
	ОтветФункции.Данные.Широта = ДанныеДоставки.ШиротаАдресДоставки;
	ОтветФункции.Данные.Долгота = ДанныеДоставки.ДолготаАдресДоставки;
	ОтветФункции.Данные.НаименованиеПолучателя = КИ_Контрагента.Наименование;
	ОтветФункции.Данные.ТелефонПолучателя = КИ_Контрагента.Телефон;
	
	ВременноеОкно = ДанныеДоставки.ВремяРаботы; 
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
		ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
	КонецЦикла;
	ОтветФункции.Данные.НачалоВременногоОкна = ДанныеДоставки.ВремяРаботыНачало;
	ОтветФункции.Данные.КонецВременногоОкна = ДанныеДоставки.ВремяРаботыКонец;
	
	ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
	ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = ВремяОбслуживания.ВремяОбслуживанияНаАдрес;
	ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = ВремяОбслуживания.ВремяОбслуживанияНаЗаказ;
	ОтветФункции.Данные.ТипЗаказа = "pickup";
	ОтветФункции.Данные.МестоНазначения = МестоНазначения;
	
	ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
	ОтветФункции.Данные.Ширина = 1;
	ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
	ОтветФункции.Данные.Высота = 1;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТочкиДоставки_ЗаказПоставщику)

Функция ПолучитьДанныеТочкиДоставки_ВозвратОтПокупателя(ВозвратОтПокупателя, Товары, ДопПараметры)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
		
	Если НЕ ЗначениеЗаполнено(ВозвратОтПокупателя) Тогда
		ОтветФункции.ОписаниеОшибки = "Не заполнен возврат от покупателя";
		Возврат ОтветФункции;
	КонецЕсли;
	
	ДанныеАдресаЗабораСМашины = ДопПараметры.ДанныеДоставкиЗаборСМашины;
	ВозвратНаСкладНаСледДень = ДопПараметры.ВозвратНаСкладНаСледДень;
	БезВозвратаНаСклад = ДопПараметры.БезВозвратаНаСклад;
	
	//// ПРОВЕРКА РЕКВИЗИТОВ ЗАКАЗА ////
	РеквизитыВозврата = "ПометкаУдаления, Сделка, СкладОрдер, Контрагент, Номер";
	ДанныеВозврата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВозвратОтПокупателя, РеквизитыВозврата);
	
	мОшибки = Новый Массив;
	Если ДанныеВозврата.ПометкаУдаления Тогда
		мОшибки.Добавить("Возврат помечен на удаление");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеВозврата.Сделка) Тогда
		мОшибки.Добавить("Не заполнена сделка в возврате");
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ДанныеДоставки = МодульЛогистики.ПолучитьДанныеДоставкиПоВозврату(ВозвратОтПокупателя);
	
	Если ЗначениеЗаполнено(ДанныеДоставки.ОписаниеОшибкиАдресДоставки) Тогда
		мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиАдресДоставки);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДоставки.ОписаниеОшибкиВременноеОкно) Тогда
		мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиВременноеОкно);	
	КонецЕсли;
	
	//// ОБРАБОТКА ТОВАРОВ ////
	ОтветГабариты = МодульЛогистики.ПолучитьОбщиеГабаритыТоваров(Товары);
	Если ОтветГабариты.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветГабариты.ОписаниеОшибки);	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		ОтветФункции.ЭтоОшибкаЗаполненияГабаритов = Истина;
		Возврат ОтветФункции;
	КонецЕсли;
	
	МестоНазначения = "";
	Если БезВозвратаНаСклад = Ложь Тогда
		ОтветФункции.Вставить("ДанныеДоп", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
		
		ДопПараметрыСклада = Новый Структура;
		ДопПараметрыСклада.Вставить("ВозратНаСкладНаСледДень", ВозвратНаСкладНаСледДень);
		ДопПараметрыСклада.Вставить("ПереносНаСледДеньНачала", Истина);
		ДопПараметрыСклада.Вставить("ПереносНаСледДеньКонца", Истина);
				
		ОтветДанныеСклада = ПолучитьДанныеСкладаДляРасчетаМаршрута(ДанныеВозврата.СкладОрдер, ДопПараметрыСклада);
		Если ОтветДанныеСклада.Результат = Ложь Тогда
			мОшибки.Добавить(ОтветДанныеСклада.ОписаниеОшибки);			
		КонецЕсли;
		
		Если мОшибки.Количество() > 0 Тогда
			ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
			Возврат ОтветФункции;
		КонецЕсли;
		
		////ДОСТАВКА НА СКЛАД////
		ДанныеСклада = ОтветДанныеСклада.Данные;
		
		ОтветФункции.ДанныеДоп.НомерЗаказа = "ВК_" + СокрЛП(ДанныеВозврата.Номер) + "_Доставка";
		
		ОтветФункции.ДанныеДоп.АдресПолучателя = ДанныеСклада.АдресСклада;
		ОтветФункции.ДанныеДоп.Широта = ДанныеСклада.Широта;
		ОтветФункции.ДанныеДоп.Долгота = ДанныеСклада.долгота;
		ОтветФункции.ДанныеДоп.НаименованиеПолучателя = ДанныеСклада.НазваниеСклада;
		ОтветФункции.ДанныеДоп.ТелефонПолучателя = "";
		
		ВременноеОкно = ДанныеСклада.ВремяРаботы; 
		ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
		Пока ДлительностьМаршрута >= 0 Цикл
			ОтветФункции.ДанныеДоп["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
			ДлительностьМаршрута = ДлительностьМаршрута - 1;
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
		КонецЦикла;
		ОтветФункции.ДанныеДоп.НачалоВременногоОкна = ДанныеСклада.ВремяРаботыНачало;
		ОтветФункции.ДанныеДоп.КонецВременногоОкна = ДанныеСклада.ВремяРаботыКонец;

		ОтветФункции.ДанныеДоп.ЖесткоеВременноеОкно = ДанныеСклада.ЖесткоеВремяРаботы;
		ОтветФункции.ДанныеДоп.ВремяОбслуживанияНаАдрес = ДанныеСклада.ВремяОбслуживанияНаАдрес;
		ОтветФункции.ДанныеДоп.ВремяОбслуживанияНаЗаказ = ДанныеСклада.ВремяОбслуживанияНаЗаказ;
		ОтветФункции.ДанныеДоп.ТипЗаказа = "delivery";
		ОтветФункции.ДанныеДоп.МестоНазначения = "";
		
		ОтветФункции.ДанныеДоп.Масса = ОтветГабариты.Масса;
		ОтветФункции.ДанныеДоп.Ширина = 1;
		ОтветФункции.ДанныеДоп.Длина = ОтветГабариты.Объем;
		ОтветФункции.ДанныеДоп.Высота = 1;
		
		МестоНазначения = ОтветФункции.ДанныеДоп.НомерЗаказа;
	КонецЕсли;

	////ЗАБОР ОТ КЛИЕНТА////
	КИ_Контрагента = МодульЛогистики.ПолучитьКонтактнуюИнформациюКонтрагента(ДанныеВозврата.Контрагент);
	
	ОтветФункции.Данные.НомерЗаказа = "ВК_" + СокрЛП(ДанныеВозврата.Номер);
	
	ОтветФункции.Данные.АдресПолучателя = ДанныеДоставки.АдресДоставки;
	ОтветФункции.Данные.Широта = ДанныеДоставки.ШиротаАдресДоставки;
	ОтветФункции.Данные.Долгота = ДанныеДоставки.ДолготаАдресДоставки;
	ОтветФункции.Данные.НаименованиеПолучателя = КИ_Контрагента.Наименование;
	ОтветФункции.Данные.ТелефонПолучателя = КИ_Контрагента.Телефон;
	
	ВременноеОкно = ДанныеДоставки.ВременноеОкно; 
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
		ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
	КонецЦикла;
	ОтветФункции.Данные.НачалоВременногоОкна = ДанныеДоставки.НачалоВременногоОкна;
	ОтветФункции.Данные.КонецВременногоОкна = ДанныеДоставки.КонецВременногоОкна;
	
	ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
	ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = 600;
	ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = 600;
	ОтветФункции.Данные.ТипЗаказа = "pickup";
	ОтветФункции.Данные.МестоНазначения = МестоНазначения;
	
	ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
	ОтветФункции.Данные.Ширина = 1;
	ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
	ОтветФункции.Данные.Высота = 1;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТочкиДоставки_ВозвратОтПокупателя)

Функция ПолучитьДанныеТочкиДоставки_ВозвратПоставщику(ВозвратПоставщику, Товары, ДопПараметры)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
	
	Если НЕ ЗначениеЗаполнено(ВозвратПоставщику) Тогда
		ОтветФункции.ОписаниеОшибки = "Не заполнен возврат поставщику";
		Возврат ОтветФункции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Ссылка,
	               |	ВозвратТоваровПоставщику.ПометкаУдаления,
	               |	ВозвратТоваровПоставщику.Номер,
	               |	ВозвратТоваровПоставщику.Проведен,
	               |	ВозвратТоваровПоставщику.Склад,
	               |	ВозвратТоваровПоставщику.Контрагент,
	               |	ВозвратТоваровПоставщику.СпособДоставки,
	               |	ВозвратТоваровПоставщику.КрайняяДатаОтправки КАК ДатаДоставки,
	               |	ВозвратТоваровПоставщику.Дата КАК ДатаВозврата
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ВозвратТоваровПоставщику";
	Запрос.УстановитьПараметр("ВозвратТоваровПоставщику", ВозвратПоставщику);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//// ПРОВЕРКА РЕКВИЗИТОВ ЗАКАЗА ////
	ВыборкаЗаказ = РезультатЗапроса.Выбрать();
	ВыборкаЗаказ.Следующий();
	
	мОшибки = Новый Массив;
	Если ВыборкаЗаказ.ПометкаУдаления Тогда
		мОшибки.Добавить("Заказ помечен на удаление");
	КонецЕсли;
	
	Если НЕ ВыборкаЗаказ.СпособДоставки = Перечисления.СпособДоставкиВозвратаПоставщику.ОтгружаетНашТранспорт Тогда
		мОшибки.Добавить("Доставка не нужна");
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаЗаказ.ДатаДоставки) Тогда		
		ДанныеДоставки = МодульЛогистики.ПолучитьДанныеДоставкиПоставщика(ВыборкаЗаказ.Контрагент, ВыборкаЗаказ.Склад, ВыборкаЗаказ.ДатаВозврата, ВыборкаЗаказ.ДатаДоставки, Истина);
		Если НЕ ЗначениеЗаполнено(ДанныеДоставки.АдресДоставки) Тогда
			мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиАдресДоставки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеДоставки.ВремяРаботы) Тогда
			мОшибки.Добавить(ДанныеДоставки.ОписаниеОшибкиВремяРаботы);
		КонецЕсли;

	Иначе
		мОшибки.Добавить("Не заполнена дата забора");	
	КонецЕсли;
	
	//// ОБРАБОТКА ТОВАРОВ ////
	ОтветГабариты = МодульЛогистики.ПолучитьОбщиеГабаритыТоваров(Товары);
	Если ОтветГабариты.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветГабариты.ОписаниеОшибки);	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		ОтветФункции.ЭтоОшибкаЗаполненияГабаритов = Истина;
		Возврат ОтветФункции;
	КонецЕсли;
	
	КИ_Контрагента = МодульЛогистики.ПолучитьКонтактнуюИнформациюКонтрагента(ВыборкаЗаказ.Контрагент);
	ВремяОбслуживания = МодульЛогистики.ПолучитьВремяОбслуживанияУПоставщика(ВыборкаЗаказ.Контрагент, Товары);
	
	ОтветФункции.Данные.НомерЗаказа = "ВП_" + СокрЛП(ВыборкаЗаказ.Номер);
	
	ОтветФункции.Данные.АдресПолучателя = ДанныеДоставки.АдресДоставки;
	ОтветФункции.Данные.Широта = ДанныеДоставки.ШиротаАдресДоставки;
	ОтветФункции.Данные.Долгота = ДанныеДоставки.ДолготаАдресДоставки;
	ОтветФункции.Данные.НаименованиеПолучателя = КИ_Контрагента.Наименование;
	ОтветФункции.Данные.ТелефонПолучателя = КИ_Контрагента.Телефон;
	
	ВременноеОкно = ДанныеДоставки.ВремяРаботы; 
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
		ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
	КонецЦикла;
	ОтветФункции.Данные.НачалоВременногоОкна = ДанныеДоставки.ВремяРаботыНачало;
	ОтветФункции.Данные.КонецВременногоОкна = ДанныеДоставки.ВремяРаботыКонец;
	
	ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
	ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = ВремяОбслуживания.ВремяОбслуживанияНаАдрес;
	ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = ВремяОбслуживания.ВремяОбслуживанияНаЗаказ;
	ОтветФункции.Данные.ТипЗаказа = "delivery";
	ОтветФункции.Данные.МестоНазначения = "";
	
	ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
	ОтветФункции.Данные.Ширина = 1;
	ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
	ОтветФункции.Данные.Высота = 1;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТочкиДоставки_ВозвратПоставщику)

 Функция ПолучитьДанныеТочкиДоставки_Перемещение(Перемещение, Товары, ДопПараметры)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ЭтоОшибкаЗаполненияГабаритов", Ложь);
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
		
	СкладПланирования = ДопПараметры.СкладПланирования;
	ВозвратНаСкладНаСледДень = ДопПараметры.ВозвратНаСкладНаСледДень;
	БезВозвратаНаСклад = ДопПараметры.БезВозвратаНаСклад;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка,
	               |	ПеремещениеТоваров.Номер,
	               |	ПеремещениеТоваров.Проведен,
	               |	ПеремещениеТоваров.ПометкаУдаления,
	               |	ПеремещениеТоваров.СкладОтправитель,
	               |	ПеремещениеТоваров.СкладПолучатель,
	               |	ПеремещениеТоваров.СкладОтправитель.Родитель
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	ПеремещениеТоваров.Ссылка = &Перемещение";
	Запрос.УстановитьПараметр("Перемещение", Перемещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//// ПРОВЕРКА РЕКВИЗИТОВ ЗАКАЗА ////
	ВыборкаЗаказ = РезультатЗапроса.Выбрать();
	ВыборкаЗаказ.Следующий();
	
	мОшибки = Новый Массив;
	Если ВыборкаЗаказ.ПометкаУдаления Тогда
		мОшибки.Добавить("Заказ помечен на удаление");
	КонецЕсли;
	
	//Если НЕ ВыборкаЗаказ.Проведен Тогда
	//	мОшибки.Добавить("Заказ не проведен");
	//КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	//// ОБРАБОТКА ТОВАРОВ ////
	ОтветГабариты = МодульЛогистики.ПолучитьОбщиеГабаритыТоваров(Товары);
	Если ОтветГабариты.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветГабариты.ОписаниеОшибки);	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		ОтветФункции.ЭтоОшибкаЗаполненияГабаритов = Истина;
		Возврат ОтветФункции;
	КонецЕсли;
	
	////ДАННЫЕ ПО СКЛАДУ ОТПРАВИТЕЛЮ////
	ДопПараметрыСкладаОтправитель = Новый Структура;
	ДопПараметрыСкладаОтправитель.Вставить("ВозратНаСкладНаСледДень", Ложь);
	ДопПараметрыСкладаОтправитель.Вставить("ПереносНаСледДеньНачала", Ложь);
	ДопПараметрыСкладаОтправитель.Вставить("ПереносНаСледДеньКонца", Ложь);
			
	ОтветДанныеСкладаОтправитель = ПолучитьДанныеСкладаДляРасчетаМаршрута(ВыборкаЗаказ.СкладОтправитель, ДопПараметрыСкладаОтправитель);
	Если ОтветДанныеСкладаОтправитель.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветДанныеСкладаОтправитель.ОписаниеОшибки);			
	КонецЕсли;
	
	////ДАННЫЕ ПО СКЛАДУ ПОЛУЧАТЕЛЮ////
	ДопПараметрыСкладаПолучатель = Новый Структура;
	Если ВозвратНаСкладНаСледДень И СкладПланирования = ВыборкаЗаказ.СкладПолучатель Тогда
		ДопПараметрыСкладаПолучатель.Вставить("ВозратНаСкладНаСледДень", ВозвратНаСкладНаСледДень);
		ДопПараметрыСкладаПолучатель.Вставить("ПереносНаСледДеньНачала", Истина);
		ДопПараметрыСкладаПолучатель.Вставить("ПереносНаСледДеньКонца", Истина);
	Иначе
		ДопПараметрыСкладаПолучатель.Вставить("ВозратНаСкладНаСледДень", Ложь);
		ДопПараметрыСкладаПолучатель.Вставить("ПереносНаСледДеньНачала", Ложь);
		ДопПараметрыСкладаПолучатель.Вставить("ПереносНаСледДеньКонца", Ложь);
	КонецЕсли;
	ОтветДанныеСкладаПолучатель = ПолучитьДанныеСкладаДляРасчетаМаршрута(ВыборкаЗаказ.СкладПолучатель, ДопПараметрыСкладаПолучатель);
	Если ОтветДанныеСкладаПолучатель.Результат = Ложь Тогда
		мОшибки.Добавить(ОтветДанныеСкладаПолучатель.ОписаниеОшибки);			
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	////ЗАПОЛНЕНЫЕ ДАННЫХ////
	ДанныеСкладаО = ОтветДанныеСкладаОтправитель.Данные;
	ДанныеСкладаП = ОтветДанныеСкладаПолучатель.Данные;
	
	ТолькоДоставка = Ложь;
	Если СкладПланирования = ВыборкаЗаказ.СкладОтправитель Тогда
		ТолькоДоставка = Истина;
	Иначе
		ГруппаСкладМСК = Справочники.Склады.НайтиПоКоду("УТ0000038");
		ГруппаСкладЧЛБ = Справочники.Склады.НайтиПоКоду("УТ0000039");
		
		СкладПланированияРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПланирования, "Родитель");
		Если СкладПланированияРодитель = ГруппаСкладМСК И ВыборкаЗаказ.СкладОтправительРодитель = ГруппаСкладМСК Тогда
			ТолькоДоставка = Истина;	
		КонецЕсли;
		
		Если СкладПланированияРодитель = ГруппаСкладЧЛБ И ВыборкаЗаказ.СкладОтправительРодитель = ГруппаСкладЧЛБ Тогда
			ТолькоДоставка = Истина;	
		КонецЕсли;
	КонецЕсли;

	Если ТолькоДоставка Тогда
		ОтветФункции.Данные.НомерЗаказа = "П_" + СокрЛП(ВыборкаЗаказ.Номер) + "_Доставка";
		
		ОтветФункции.Данные.АдресПолучателя = ДанныеСкладаП.АдресСклада;
		ОтветФункции.Данные.Широта = ДанныеСкладаП.Широта;
		ОтветФункции.Данные.Долгота = ДанныеСкладаП.Долгота;
		ОтветФункции.Данные.НаименованиеПолучателя = ДанныеСкладаП.НазваниеСклада;
		ОтветФункции.Данные.ТелефонПолучателя = "";
		
		ВременноеОкно = ДанныеСкладаП.ВремяРаботы; 
		ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
		Пока ДлительностьМаршрута >= 0 Цикл
			ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
			ДлительностьМаршрута = ДлительностьМаршрута - 1;
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
		КонецЦикла;
		ОтветФункции.Данные.НачалоВременногоОкна = ДанныеСкладаП.ВремяРаботыНачало;
		ОтветФункции.Данные.КонецВременногоОкна = ДанныеСкладаП.ВремяРаботыКонец;
		
		ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
		ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = ДанныеСкладаП.ВремяОбслуживанияНаАдрес;
		ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = ДанныеСкладаП.ВремяОбслуживанияНаЗаказ;
		ОтветФункции.Данные.ТипЗаказа = "delivery";
		ОтветФункции.Данные.МестоНазначения = "";
		
		ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
		ОтветФункции.Данные.Ширина = 1;
		ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
		ОтветФункции.Данные.Высота = 1;	
		
		ОтветФункции.Удалить("ДанныеДоп");
	Иначе
		МестоНазначения = "";
		Если БезВозвратаНаСклад Тогда
			ОтветФункции.Вставить("ДанныеДоп", ПолучитьПустуюСтроку_Маршрут(ДопПараметры.ДатаНачалаМаршрута, ДопПараметры.ДатаОкончанияМаршрута));
			
			ОтветФункции.ДанныеДоп.НомерЗаказа = "П_" + СокрЛП(ВыборкаЗаказ.Номер) + "_Доставка";
			
			ОтветФункции.ДанныеДоп.АдресПолучателя = ДанныеСкладаП.АдресСклада;
			ОтветФункции.ДанныеДоп.Широта = ДанныеСкладаП.Широта;
			ОтветФункции.ДанныеДоп.Долгота = ДанныеСкладаП.Долгота;
			ОтветФункции.ДанныеДоп.НаименованиеПолучателя = ДанныеСкладаП.НазваниеСклада;
			ОтветФункции.ДанныеДоп.ТелефонПолучателя = "";
			
			ВременноеОкно = ДанныеСкладаП.ВремяРаботы; 
			ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
			Пока ДлительностьМаршрута >= 0 Цикл
				ОтветФункции.ДанныеДоп["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
				ДлительностьМаршрута = ДлительностьМаршрута - 1;
				ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
			КонецЦикла;
			ОтветФункции.ДанныеДоп.НачалоВременногоОкна = ДанныеСкладаП.ВремяРаботыНачало;
			ОтветФункции.ДанныеДоп.КонецВременногоОкна = ДанныеСкладаП.ВремяРаботыКонец;
		
			ОтветФункции.ДанныеДоп.ЖесткоеВременноеОкно = Истина;
			ОтветФункции.ДанныеДоп.ВремяОбслуживанияНаАдрес = ДанныеСкладаП.ВремяОбслуживанияНаАдрес;
			ОтветФункции.ДанныеДоп.ВремяОбслуживанияНаЗаказ = ДанныеСкладаП.ВремяОбслуживанияНаЗаказ;
			ОтветФункции.ДанныеДоп.ТипЗаказа = "delivery";
			ОтветФункции.ДанныеДоп.МестоНазначения = "";
			
			ОтветФункции.ДанныеДоп.Масса = ОтветГабариты.Масса;
			ОтветФункции.ДанныеДоп.Ширина = 1;
			ОтветФункции.ДанныеДоп.Длина = ОтветГабариты.Объем;
			ОтветФункции.ДанныеДоп.Высота = 1;
			
			МестоНазначения = ОтветФункции.ДанныеДоп.НомерЗаказа;
		КонецЕсли;
	
		ОтветФункции.Данные.НомерЗаказа = "П_" + СокрЛП(ВыборкаЗаказ.Номер);
		
		ОтветФункции.Данные.АдресПолучателя = ДанныеСкладаО.АдресСклада;
		ОтветФункции.Данные.Широта = ДанныеСкладаО.Широта;
		ОтветФункции.Данные.Долгота = ДанныеСкладаО.Долгота;
		ОтветФункции.Данные.НаименованиеПолучателя = ДанныеСкладаО.НазваниеСклада;
		ОтветФункции.Данные.ТелефонПолучателя = "";
		
		ВременноеОкно = ДанныеСкладаО.ВремяРаботы; 
		ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
		Пока ДлительностьМаршрута >= 0 Цикл
			ОтветФункции.Данные["ВременноеОкно" + ДлительностьМаршрута] = ВременноеОкно;
			ДлительностьМаршрута = ДлительностьМаршрута - 1;
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);
		КонецЦикла;
		ОтветФункции.Данные.НачалоВременногоОкна = ДанныеСкладаО.ВремяРаботыНачало;
		ОтветФункции.Данные.КонецВременногоОкна = ДанныеСкладаО.ВремяРаботыКонец;
			
		ОтветФункции.Данные.ЖесткоеВременноеОкно = Истина;
		ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = ДанныеСкладаО.ВремяОбслуживанияНаАдрес;
		ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = ДанныеСкладаО.ВремяОбслуживанияНаЗаказ;
		ОтветФункции.Данные.ТипЗаказа = "pickup";
		ОтветФункции.Данные.МестоНазначения = МестоНазначения;
		
		ОтветФункции.Данные.Масса = ОтветГабариты.Масса;
		ОтветФункции.Данные.Ширина = 1;
		ОтветФункции.Данные.Длина = ОтветГабариты.Объем;
		ОтветФункции.Данные.Высота = 1;
	КонецЕсли;

	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТочкиДоставки_Перемещение)

////ДАННЫЕ СКЛАДОВ////

Функция ПолучитьДанныеСклада(Склад, ДопПараметры)
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтрокуТаблицу("Склады"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Наименование КАК НазваниеСклада,
	               |	Склады.Код КАК НомерСклада,
	               |	Склады.Широта,
	               |	Склады.Долгота,
	               |	Склады.ВремяРаботы,
	               |	Склады.АдресСклада,
	               |	Склады.ГибкоеВремяСтарта,
	               |	Склады.ЖесткоеВремяРаботы,
	               |	Склады.ВремяОбслуживанияВНачалеМаршрута,
	               |	Склады.ВремяОбслуживанияВКонецМаршрута,
	               |	Склады.ЯМ_ВремяОбслуживанияНаАдрес КАК ВремяОбслуживанияНаАдрес,
	               |	Склады.ЯМ_ВремяОбслуживанияНаЗаказ КАК ВремяОбслуживанияНаЗаказ
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	Склады.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ОтветФункции.Данные, Выборка,, "Широта, Долгота");
	
	мОшибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.НазваниеСклада) Тогда
		мОшибки.Добавить("Не заполнено название склада");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.НомерСклада) Тогда
		мОшибки.Добавить("Не заполнено номер склада");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Широта) Тогда
		ОтветФункции.Данные.Широта = МодульЛогистики.ПолучитьКоординатуЧислом(Выборка.Широта);
	Иначе
		мОшибки.Добавить("Не задана широта склада");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Долгота) Тогда
		ОтветФункции.Данные.Долгота = МодульЛогистики.ПолучитьКоординатуЧислом(Выборка.Долгота);	
	Иначе
		мОшибки.Добавить("Не задана долгота склада");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.ВремяРаботы) Тогда
		ВременноеОкно = МодульЛогистики.ПолучитьВременныеОкнаДоставкиПоУмолчанию();
		ОтветФункции.Данные.ВремяРаботы = МодульЛогистики.ВременноеОкноСтрокой(ВременноеОкно.Начало, ВременноеОкно.Конец);	
	КонецЕсли;
	
	Если ДопПараметры.ВозратНаСкладНаСледДень Тогда
		ОтветФункции.Данные.ВремяРаботы = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ОтветФункции.Данные.ВремяРаботы, ДопПараметры.ПереносНаСледДеньНачала, 
																						   ДопПараметры.ПереносНаСледДеньКонца);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветФункции.Данные.ВремяРаботы) Тогда
		ВременныеОкнаДатой = МодульЛогистики.ПолучитьВременныеОкнаДатой(ОтветФункции.Данные.ВремяРаботы);
		
		ОтветФункции.Данные.ВремяРаботыНачало = ВременныеОкнаДатой.Начало; 
		ОтветФункции.Данные.ВремяРаботыКонец = ВременныеОкнаДатой.Конец;
	КонецЕсли;
	
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута > 0 Цикл
		ОтветФункции.Данные.ВремяРаботы = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ОтветФункции.Данные.ВремяРаботы, Ложь, Истина);
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.ВремяОбслуживанияНаАдрес) Тогда
		ОтветФункции.Данные.ВремяОбслуживанияНаАдрес = 30*60;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ) Тогда
		ОтветФункции.Данные.ВремяОбслуживанияНаЗаказ = 3*60;	
	КонецЕсли;
	
	Если мОшибки.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мОшибки, Символы.ПС);	
	Иначе
		ОтветФункции.Результат = Истина;
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеСклада)

////ДАННЫЕ ТРАНСПОРТА////

Функция ПустаяТаблицаТранспорты() Экспорт
	
	Транспорты = Новый ТаблицаЗначений;
	Транспорты.Колонки.Добавить("Машина");
	Транспорты.Колонки.Добавить("Водитель");
	Транспорты.Колонки.Добавить("ИдТранспорта");
	Транспорты.Колонки.Добавить("СтартСПарковки");
	Транспорты.Колонки.Добавить("ЗаезжатьНаСкладВНачалеРаботы");
	Транспорты.Колонки.Добавить("ВозвратНаПарковку");
	Транспорты.Колонки.Добавить("АдресПарковки");
	Транспорты.Колонки.Добавить("ВремяРаботы");
	Транспорты.Колонки.Добавить("ГруппаБалансировки");
	Транспорты.Колонки.Добавить("БезВозвратаНаСклад");
	
	Возврат Транспорты;
КонецФункции

Функция ПолучитьДанныеТранспорта(ИдТранспорта, Машина, Водитель, ВремяРаботы, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, Парковка, ГруппаБалансировки, БезВозвратаНаСклад)
		
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");  
	ОтветФункции.Вставить("Данные", ПолучитьПустуюСтроку_Машины(ДатаНачалаМаршрута, ДатаОкончанияМаршрута));
	
	ОтветФункции.Данные.ИдТранспорта = Строка(ИдТранспорта);
	
	////ДАННЫЕ МАШИНЫ////
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Автомашины.Наименование КАК НазваниеМашины,
	               |	Автомашины.ОбъемКузова КАК Длина,
	               |	1 КАК Ширина,
	               |	1 КАК Высота,
	               |	Автомашины.Грузоподъемность КАК Грузоподъемность,
	               |	ЛОЖЬ КАК ВозвратНаСклад,
	               |	ВЫБОР
	               |		КОГДА Автомашины.ЯМ_СтоимостьТС_ЗаАдрес = 0
	               |			ТОГДА 999999
	               |		ИНАЧЕ Автомашины.ЯМ_СтоимостьТС_ЗаАдрес
	               |	КОНЕЦ КАК СтоимостьТС_ЗаАдрес,
	               |	ВЫБОР
	               |		КОГДА Автомашины.ЯМ_СтоимостьТС_ЗаКмПути = 0
	               |			ТОГДА 3
	               |		ИНАЧЕ Автомашины.ЯМ_СтоимостьТС_ЗаКмПути
	               |	КОНЕЦ КАК СтоимостьТС_ЗаКмПути,
	               |	ВЫБОР
	               |		КОГДА Автомашины.ЯМ_СтоимостьТС_ЗаРейс = 0
	               |			ТОГДА 999999
	               |		ИНАЧЕ Автомашины.ЯМ_СтоимостьТС_ЗаРейс
	               |	КОНЕЦ КАК СтоимостьТС_ЗаРейс,
	               |	ВЫБОР
	               |		КОГДА Автомашины.ЯМ_СтоимостьТС_ЗаФактИспользования = 0
	               |			ТОГДА 3000
	               |		ИНАЧЕ Автомашины.ЯМ_СтоимостьТС_ЗаФактИспользования
	               |	КОНЕЦ КАК СтоимостьТС_ЗаФактИспользования,
	               |	ВЫБОР
	               |		КОГДА Автомашины.ЯМ_СтоимостьТС_ЗаЧас = 0
	               |			ТОГДА 100
	               |		ИНАЧЕ Автомашины.ЯМ_СтоимостьТС_ЗаЧас
	               |	КОНЕЦ КАК СтоимостьТС_ЗаЧас,
	               |	Автомашины.ЯМ_ШтрафЗаМинутуНарушнияВременногоОкна КАК ШтрафЗаМинутуНарушнияВременногоОкна,
	               |	Автомашины.ЯМ_ШтрафЗаФактНарушенияВременногоОкна КАК ШтрафЗаФактНарушенияВременногоОкна,
	               |	Автомашины.ГрузовойКаркас КАК ГрузовойКаркас,
	               |	Автомашины.ЯМ_ВысотаМашины КАК ОграничениеПоВысоте
	               |ИЗ
	               |	Справочник.Автомашины КАК Автомашины
	               |ГДЕ
	               |	Автомашины.Ссылка = &Машина";
	
	Запрос.УстановитьПараметр("Машина", Машина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ОтветФункции.Данные, Выборка);
	
	Если Выборка.ГрузовойКаркас Тогда
		ОтветФункции.Данные.РежимМаршрутизации = "truck";	
	Иначе
		ОтветФункции.Данные.РежимМаршрутизации = "driving";	
	КонецЕсли;
	
	мОшибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.НазваниеМашины) Тогда
		мОшибки.Добавить("Не заполнено название машины");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.Длина) Тогда
		мОшибки.Добавить("Не заполнен объем машины");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.Данные.Грузоподъемность) Тогда
		мОшибки.Добавить("Не заполнена грузоподъемность машины");	
	КонецЕсли;
	
	ОтветЧтения = Служебный.ПрочитатьСвойствоОбъекта(Водитель, ПланыВидовХарактеристик.СвойстваОбъектов.ЯМ_КоэфСкоростиПередвижения, 1);
	Если ОтветЧтения.Результат Тогда
		ОтветФункции.Данные.КоэфСкоростиПередвижения = ОтветЧтения.ЗначениеСвойства;	
	Иначе
		ОтветФункции.Данные.КоэфСкоростиПередвижения = 1;
	КонецЕсли;
	ОтветФункции.Данные.Ид0 = "day";
	
	////ВРЕМЯ РАБОТЫ//// 
	ОтветФункции.Данные.ВремяРаботы0 = ВремяРаботы;
	//ОтветФункции.Данные.ШтрафЗаСменуПозжеМинуты0 = 1000;
	//ОтветФункции.Данные.ШтрафЗаСменуПозжеФикс0 = 1;
	ОтветФункции.Данные.ПродолжительностьСмены0 = ДатаОкончанияМаршрута - ДатаНачалаМаршрута;
	Если ЗначениеЗаполнено(Выборка.ШтрафЗаМинутуНарушнияВременногоОкна) И ЗначениеЗаполнено(Выборка.ШтрафЗаФактНарушенияВременногоОкна) Тогда
		ОтветФункции.Данные.ШтрафЗаФактНарушенияВременногоОкна0 = Выборка.ШтрафЗаФактНарушенияВременногоОкна;
		ОтветФункции.Данные.ШтрафЗаМинутуНарушнияВременногоОкна0 = Выборка.ШтрафЗаМинутуНарушнияВременногоОкна;
	КонецЕсли;

	ДлительностьМаршрута = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута > 0 Цикл
		ОтветФункции.Данные.ВремяРаботы0 = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ОтветФункции.Данные.ВремяРаботы0, Ложь, Истина);
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
	КонецЦикла;
	
	ДлительностьМаршрута = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
	Если ДлительностьМаршрута > 0 Тогда
		ОсталосьЧасовДоСна = ОКР(((НачалоДня(ДатаНачалаМаршрута) + 60*60*23) - ДатаНачалаМаршрута) / (60*60));  
		ОтветФункции.Данные.РежимРаботы_ДлительностьРаботы0 = "" + (ОсталосьЧасовДоСна - 1) + ":40 - " + ОсталосьЧасовДоСна + ":40";
		ОтветФункции.Данные.РежимРаботы_ДлинаОтдыха0 = 32400;
		
		Пока ДлительностьМаршрута > 1 Цикл
			ОтветФункции.Данные["РежимРаботы_ДлительностьРаботы" + (ДлительностьМаршрута - 1)] = "14:40 - 15:40";
			ОтветФункции.Данные["РежимРаботы_ДлинаОтдыха" + (ДлительностьМаршрута - 1)] = 32400;
			
			ДлительностьМаршрута = ДлительностьМаршрута - 1;
		КонецЦикла;
	КонецЕсли;
	
	ОтветФункции.Данные.ИдГруппыБалансировки0 = ГруппаБалансировки;
	
	////ДАННЫЕ ВОДИТЕЛЯ////
	ИмяВодителя = "";
	
	ПарковкаСтарт = Новый Структура;
	ПарковкаСтарт.Вставить("Адрес", "");
	ПарковкаСтарт.Вставить("Широта", "");
	ПарковкаСтарт.Вставить("Долгота", "");
	
	ПарковкаВозврат = Новый Структура;
	ПарковкаВозврат.Вставить("Адрес", "");
	ПарковкаВозврат.Вставить("Широта", "");
	ПарковкаВозврат.Вставить("Долгота", "");
	
	Если Парковка.СтартСПарковки ИЛИ Парковка.ВозвратНаПарковку Тогда
		Если ЗначениеЗаполнено(Парковка.АдресПарковки) Тогда
			ГеоДанные = МодульГеокодирования.Геокодирование(Парковка.АдресПарковки);
			Если ГеоДанные.ЭтоКорректныйАдрес Тогда
				Если Парковка.СтартСПарковки Тогда
					ПарковкаСтарт.Адрес = ГеоДанные.АдресНормализованный;
					ПарковкаСтарт.Широта = МодульЛогистики.ПолучитьКоординатуЧислом(ГеоДанные.Широта);
					ПарковкаСтарт.Долгота = МодульЛогистики.ПолучитьКоординатуЧислом(ГеоДанные.Долгота);
				КонецЕсли;
				
				Если Парковка.ВозвратНаПарковку Тогда
					ПарковкаВозврат.Адрес = ГеоДанные.АдресНормализованный;
					ПарковкаВозврат.Широта = МодульЛогистики.ПолучитьКоординатуЧислом(ГеоДанные.Широта);
					ПарковкаВозврат.Долгота = МодульЛогистики.ПолучитьКоординатуЧислом(ГеоДанные.Долгота);
				КонецЕсли;
			Иначе
				мОшибки.Добавить("Некорректный адрес парковки");	
			КонецЕсли;	
		Иначе
			ДанныеВодителя = МодульЛогистики.ПолучитьДанныеДоставкиВодителя(Водитель);
			ИмяВодителя = ДанныеВодителя.ИмяВодителя;
			
			Если ЗначениеЗаполнено(ДанныеВодителя.Парковка.ОписаниеОшибки) Тогда
				мОшибки.Добавить(ДанныеВодителя.Парковка.ОписаниеОшибки);	
			Иначе
				Если Парковка.СтартСПарковки Тогда
					ЗаполнитьЗначенияСвойств(ПарковкаСтарт, ДанныеВодителя.Парковка);
				КонецЕсли;
				Если Парковка.ВозвратНаПарковку Тогда
					ЗаполнитьЗначенияСвойств(ПарковкаВозврат, ДанныеВодителя.Парковка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	////ДОБАВЛЕНИЕ ДОП МАРШУРТОВ ДЛЯ ПАРКОВКИ////
	Если ЗначениеЗаполнено(ПарковкаСтарт.Адрес) Тогда
		
		////ПАРКОВКА 1////
		ОтветФункции.Вставить("Парковка1", ПолучитьПустуюСтроку_Маршрут(ДатаНачалаМаршрута, ДатаОкончанияМаршрута));
		ОтветФункции.Парковка1.НомерЗаказа = "Парковка1_" + ИдТранспорта;
		ОтветФункции.Парковка1.Широта = ПарковкаСтарт.Широта;
		ОтветФункции.Парковка1.Долгота = ПарковкаСтарт.Долгота;
		ОтветФункции.Парковка1.НаименованиеПолучателя = ИмяВодителя;
		ОтветФункции.Парковка1.АдресПолучателя = ПарковкаСтарт.Адрес;
		ОтветФункции.Парковка1.ТелефонПолучателя = "";
		ОтветФункции.Парковка1["ВременноеОкно0"] = ОтветФункции.Данные.ВремяРаботы0;
		ОтветФункции.Парковка1.ЖесткоеВременноеОкно = Истина;
		ОтветФункции.Парковка1.ВремяОбслуживанияНаАдрес = 0;
		ОтветФункции.Парковка1.ВремяОбслуживанияНаЗаказ = 0;
		ОтветФункции.Парковка1.Масса = "";
		ОтветФункции.Парковка1.Ширина = "";
		ОтветФункции.Парковка1.Длина = "";
		ОтветФункции.Парковка1.Высота = "";    
		ОтветФункции.Парковка1.ТипЗаказа = "garage";
		ОтветФункции.Парковка1.МестоНазначения = "";
		
		ОтветФункции.Данные.МестоПарковкиНачало = "Парковка1_" + ИдТранспорта;
		ОтветФункции.Данные.ЗаезжатьНаСкладВНачалеРаботы = Парковка.ЗаезжатьНаСкладВНачалеРаботы;
		
	Иначе
		
		ОтветФункции.Данные.МестоПарковкиНачало = "";
		ОтветФункции.Данные.ЗаезжатьНаСкладВНачалеРаботы = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПарковкаВозврат.Адрес) Тогда
		
		////ПАРКОВКА 2////
		ОтветФункции.Вставить("Парковка2", ПолучитьПустуюСтроку_Маршрут(ДатаНачалаМаршрута, ДатаОкончанияМаршрута));
		ОтветФункции.Парковка2.НомерЗаказа = "Парковка2_" + ИдТранспорта;
		ОтветФункции.Парковка2.Широта = ПарковкаВозврат.Широта;
		ОтветФункции.Парковка2.Долгота = ПарковкаВозврат.Долгота;
		ОтветФункции.Парковка2.НаименованиеПолучателя = ИмяВодителя;
		ОтветФункции.Парковка2.АдресПолучателя = ПарковкаВозврат.Адрес;
		ОтветФункции.Парковка2.ТелефонПолучателя = "";
		ОтветФункции.Парковка2["ВременноеОкно0"] = ОтветФункции.Данные.ВремяРаботы0;
		ОтветФункции.Парковка2.ЖесткоеВременноеОкно = Истина;
		ОтветФункции.Парковка2.ВремяОбслуживанияНаАдрес = 0;
		ОтветФункции.Парковка2.ВремяОбслуживанияНаЗаказ = 0;
		ОтветФункции.Парковка2.Масса = "";
		ОтветФункции.Парковка2.Ширина = "";
		ОтветФункции.Парковка2.Длина = "";
		ОтветФункции.Парковка2.Высота = "";    
		ОтветФункции.Парковка2.ТипЗаказа = "garage";
		ОтветФункции.Парковка2.МестоНазначения = "";
		
		ОтветФункции.Данные.МестоПарковкиКонец = "Парковка2_" + ИдТранспорта;
		
	Иначе
		
		ОтветФункции.Данные.МестоПарковкиКонец = "";
		Если БезВозвратаНаСклад = Ложь Тогда
			ОтветФункции.Данные.ВозвратНаСклад = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если мОшибки.Количество() = 0 Тогда
		ОтветФункции.Результат = Истина;		
	Иначе
		ОтветФункции.ОписаниеОшибки = "Водитель: %1, Машина: %2";
		ОтветФункции.ОписаниеОшибки = _СтрШаблон(ОтветФункции.ОписаниеОшибки, Водитель, Машина);
		ОтветФункции.ОписаниеОшибки = ОтветФункции.ОписаниеОшибки + Символы.ПС + _СтрСоединить(мОшибки, Символы.ПС);
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(ПолучитьДанныеТранспорта)

////ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ////

Функция ПолучитьПустуюСтроку_Маршрут(ДатаНачалаМаршрута, ДатаОкончанияМаршрута) Экспорт
	
	ПустаяСтрока = Новый Структура;
	
	Колонки = ПолучитьКолонкиМаршрута(ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	
	Для Каждого Колонка Из Колонки Цикл	
		ПустаяСтрока.Вставить(Колонка.Ключ, "");
	КонецЦикла;
	
	Возврат ПустаяСтрока;
КонецФункции //(ПолучитьПустуюСтроку_Маршрут)

Функция ПолучитьПустуюТаблицу_Маршрут(ДатаНачалаМаршрута, ДатаОкончанияМаршрута) Экспорт
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	
	Колонки = ПолучитьКолонкиМаршрута(ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	
	Для Каждого Колонка Из Колонки Цикл	
		ПустаяТаблица.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Возврат ПустаяТаблица;
КонецФункции //(ПолучитьПустуюТаблицу_Маршрут)

Функция ПолучитьПустуюСтроку_Машины(ДатаНачалаМаршрута, ДатаОкончанияМаршрута) Экспорт
	
	ПустаяСтрока = Новый Структура;
	
	КоличествоСмен = 1;
	КоличествоПерерывов = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
	Колонки = ПолучитьКолонкиМашины(КоличествоСмен, КоличествоПерерывов);
	
	Для Каждого Колонка Из Колонки Цикл	
		ПустаяСтрока.Вставить(Колонка.Ключ, "");
	КонецЦикла;
	
	Возврат ПустаяСтрока;
КонецФункции //(ПолучитьПустуюСтроку_Машины)

Функция ПолучитьПустуюТаблицу_Машины(ДатаНачалаМаршрута, ДатаОкончанияМаршрута) Экспорт
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	
	КоличествоСмен = 1;
	КоличествоПерерывов = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
		
	Колонки = ПолучитьКолонкиМашины(КоличествоСмен, КоличествоПерерывов);
	
	Для Каждого Колонка Из Колонки Цикл	
		ПустаяТаблица.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Возврат ПустаяТаблица;
КонецФункции //(ПолучитьПустуюТаблицу_Машины)

Функция ПолучитьПустуюСтрокуТаблицу(ВидТаблицы) Экспорт
	
	СтрокаТаблицы = Новый Структура;
	
	Если ВидТаблицы = "Машины" Тогда
		Колонки = ПолучитьКолонкиМашины(1, 1);	
	ИначеЕсли ВидТаблицы = "Склады" Тогда
		Колонки = ПолучитьКолонкиСклады();	
	ИначеЕсли ВидТаблицы = "Товары" Тогда
		Колонки = ПолучитьКолонкиТовары();
	ИначеЕсли ВидТаблицы = "ДопОпции" Тогда
		Колонки = ПолучитьКолонкиДопОпции();	
	КонецЕсли;
	
	Для Каждого Колонка Из Колонки Цикл	
		СтрокаТаблицы.Вставить(Колонка.Ключ, "");
	КонецЦикла;
	
	Возврат СтрокаТаблицы;
КонецФункции //(ПолучитьПустуюСтрокуТаблицу)

Функция ПолучитьПустуюТаблицу(ВидТаблицы) Экспорт
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	
	Если ВидТаблицы = "Машины" Тогда
		Колонки = ПолучитьКолонкиМашины(1, 1);	
	ИначеЕсли ВидТаблицы = "Склады" Тогда
		Колонки = ПолучитьКолонкиСклады();	
	ИначеЕсли ВидТаблицы = "Товары" Тогда
		Колонки = ПолучитьКолонкиТовары();
	ИначеЕсли ВидТаблицы = "ДопОпции" Тогда
		Колонки = ПолучитьКолонкиДопОпции();	
	КонецЕсли;
	
	Для Каждого Колонка Из Колонки Цикл	
		ПустаяТаблица.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Возврат ПустаяТаблица;
КонецФункции //(ПолучитьПустуюТаблицу)


Функция ПолучитьКолонкиМаршрута(ДатаНачалаМаршрута, ДатаОкончанияМаршрута)
	
	Колонки = Новый Соответствие;	
	НомерКолонки = 0;
	
	ДобавитьКолонкуВКолонки(Колонки, "Город"				, "Город"				, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "НачалоВременногоОкна"	, "НачалоВременногоОкна", "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "КонецВременногоОкна"	, "КонецВременногоОкна"	, "", НомерКолонки);
	
	ДобавитьКолонкуВКолонки(Колонки, "НомерЗаказа"				, "Номер заказа"			, "id"			, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Широта"					, "Широта"					, "point.lat"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Долгота"					, "Долгота"					, "point.lon"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "НаименованиеПолучателя"	, "Наименование получателя"	, "title"		, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "АдресПолучателя"			, "Адрес получателя"		, "address"		, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ТелефонПолучателя"		, "Телефон получателя"		, "phone"		, НомерКолонки);
		
	ДлительностьМаршрута = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ДобавитьКолонкуВКолонки(Колонки, "ВременноеОкно" + ДлительностьМаршрута, "Временное окно" + ДлительностьМаршрута, "time_windows." + ДлительностьМаршрута + ".time_window", НомерКолонки);
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
	КонецЦикла;
	
	ДобавитьКолонкуВКолонки(Колонки, "ЖесткоеВременноеОкно"		, "Жесткое временное окно, TRUE/FALSE"		, "hard_window"						, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяОбслуживанияНаАдрес"	, "Время обслуживания на адрес"				, "shared_service_duration_s"		, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяОбслуживанияНаЗаказ"	, "Время обслуживания на заказ"				, "service_duration_s"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Масса"					, "Вес"										, "shipment_size.weight_kg"			, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Ширина"					, "Ширина"									, "shipment_size.volume.width_m"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Длина"					, "Глубина"									, "shipment_size.volume.depth_m"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Высота"					, "Высота"									, "shipment_size.volume.height_m"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ТипЗаказа"				, "Тип заказа"								, "type"							, НомерКолонки); //(pickup/delivery)
	ДобавитьКолонкуВКолонки(Колонки, "МестоНазначения"			, "Место назначения"						, "delivery_to"						, НомерКолонки);
	
	Возврат Колонки;
КонецФункции //(ПолучитьКолонкиМаршрута)

Функция ПолучитьКолонкиТовары()
	
	Колонки = Новый Соответствие;
	НомерКолонки = 0;
	
	ДобавитьКолонкуВКолонки(Колонки, "Номенклатура"		, "Номенклатура"	, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Количество"		, "Количество"		, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВариантУпаковки"	, "Вариант упаковки", "", НомерКолонки);
	
	Возврат Колонки;
КонецФункции //(ПолучитьКолонкиТовары)

Функция ПолучитьКолонкиМашины(КоличествоСмен, КоличествоПерерывов)
	
	Колонки = Новый Соответствие;
	НомерКолонки = 0;
	
	ДобавитьКолонкуВКолонки(Колонки, "ИдТранспорта"		, "Идентификатор автомобиля"					, "id"						, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "НазваниеМашины"	, "Название машины"								, "ref"						, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Грузоподъемность"	, "Грузоподъемность"							, "capacity.weight_kg"		, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Ширина"			, "Ширина"										, "capacity.volume.width_m"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Длина"			, "Глубина"										, "capacity.volume.depth_m"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Высота"			, "Высота"										, "capacity.volume.height_m", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВозвратНаСклад"	, "Возврат на склад в конце смены, TRUE/FALSE"	, "return_to_depot"			, НомерКолонки);
	
	ДобавитьКолонкуВКолонки(Колонки, "ОграничениеПоВысоте", "Ограничение по высоте", "specs.height", НомерКолонки);
	
	пКоличествоСмен = КоличествоСмен;
	Пока пКоличествоСмен > 0 Цикл
		Индекс = пКоличествоСмен - 1;
		ДобавитьКолонкуВКолонки(Колонки, "Ид" + Индекс, "Идентификатор смены" + Индекс, "shifts." + Индекс + ".id", НомерКолонки);
		ДобавитьКолонкуВКолонки(Колонки, "ВремяРаботы" + Индекс, "Время начала и конца смены" + Индекс, "shifts." + Индекс + ".time_window", НомерКолонки);
		ДобавитьКолонкуВКолонки(Колонки, "ПродолжительностьСмены" + Индекс, "продолжительность смены в секундах" + Индекс, "shifts." + Индекс + ".max_duration_s", НомерКолонки);
		ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаФактНарушенияВременногоОкна" + Индекс, "Штраф за факт нарушения временного окна" + Индекс, "shifts." + Индекс + ".penalty.out_of_time.fixed" , НомерКолонки);
		ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаМинутуНарушнияВременногоОкна" + Индекс, "Штраф за минуту нарушения временного окна" + Индекс, "shifts." + Индекс + ".penalty.out_of_time.minute", НомерКолонки);
		ДобавитьКолонкуВКолонки(Колонки, "ИдГруппыБалансировки" + Индекс, "Ид группы балансировки" + Индекс, "shifts." + Индекс + ".balanced_group_id", НомерКолонки);
		
		//ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаСменуПозжеФикс"   + Индекс, "Штраф за смены завершенные поздно фикс" 	 + Индекс, "shifts." + Индекс + ".penalty.late.fixed" , НомерКолонки);
		//ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаСменуПозжеМинуты" + Индекс, "Штраф за смены завершенные поздно минуты"  + Индекс, "shifts." + Индекс + ".penalty.late.minute", НомерКолонки);
		пКоличествоСмен = пКоличествоСмен - 1;
	КонецЦикла;
	
	ДобавитьКолонкуВКолонки(Колонки, "СтоимостьТС_ЗаКмПути"				, "Стоимость за км пути"					, "cost.km"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "СтоимостьТС_ЗаЧас"				, "Стоимость за час"						, "cost.hour"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "СтоимостьТС_ЗаФактИспользования"	, "Стоимость за факт использования"			, "cost.fixed"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "МестоПарковкиНачало"				, "Место парковки откуда начинать маршрут"	, "start_at"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ЗаезжатьНаСкладВНачалеРаботы"		, "Заезжать на склад? (TRUE/FALSE)"			, "visit_depot_at_start"	, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "МестоПарковкиКонец"				, "Место парковки после работы"				, "finish_at"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "РежимМаршрутизации"				, "Режим маршрутизации"						, "routing_mode"			, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "КоэфСкоростиПередвижения"			, "Коэф. скорости передвижения"				, "travel_time_multiplier"	, НомерКолонки);	
	
	пКоличествоПерерывов = КоличествоПерерывов;
	Пока пКоличествоПерерывов > 0 Цикл
		Индекс = пКоличествоПерерывов - 1;
		
		ДобавитьКолонкуВКолонки(Колонки, "РежимРаботы_ДлительностьРаботы" + Индекс, "Длительность работы" + Индекс, "rest_schedule.breaks." + Индекс + ".work_time_range_till_rest", НомерКолонки);
		ДобавитьКолонкуВКолонки(Колонки, "РежимРаботы_ДлинаОтдыха" + Индекс, "Длина отдыха" + Индекс, "rest_schedule.breaks." + Индекс + ".rest_duration_s", НомерКолонки);
		
		пКоличествоПерерывов = пКоличествоПерерывов - 1;
	КонецЦикла;

	Возврат Колонки;
КонецФункции //(ПолучитьКолонкиМашины)

Функция ПолучитьКолонкиСклады()
	
	Колонки = Новый Соответствие;
	НомерКолонки = 0;
	
	ДобавитьКолонкуВКолонки(Колонки, "АдресСклада"				, ""					, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяОбслуживанияНаАдрес"	, ""					, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяОбслуживанияНаЗаказ"	, ""					, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяРаботыНачало"		, "ВремяРаботыНачало"	, "", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяРаботыКонец"			, "ВремяРаботыКонец"	, "", НомерКолонки);
	
	ДобавитьКолонкуВКолонки(Колонки, "НомерСклада"						, "Номер склада"							, "id"							, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "НазваниеСклада"					, "Название склада"							, "ref"							, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Широта"							, "Широта"									, "point.lat"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "Долгота"							, "Долгота"									, "point.lon"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяРаботы"						, "Время работы склада"						, "time_window"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ГибкоеВремяСтарта"				, "Гибкое время старта TRUE/FALSE"			, "flexible_start_time"			, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ЖесткоеВремяРаботы"				, "Жесткое время работы склада, TRUE/FALSE"	, "hard_window"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяОбслуживанияВНачалеМаршрута"	, "Время обслуживания в начале маршрута, с"	, "service_duration_s"			, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ВремяОбслуживанияВКонецМаршрута"	, "Время обслуживания в конце маршрута, с"	, "finish_service_duration_s"	, НомерКолонки);
	
	Возврат Колонки;
КонецФункции //(ПолучитьКолонкиСклады)

Функция ПолучитьКолонкиДопОпции()
	
	Колонки = Новый Соответствие;
	НомерКолонки = 0;
	
	ДобавитьКолонкуВКолонки(Колонки, "Мультизаказ"					, "Объединять заказы в мультизаказы?"	, "merge_multiorders"		, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "МестныйЧасовойПояс"			, "Местный часовой пояс"				, "time_zone"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "НачальнаяДата"				, "Начальная дата"						, "date"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "РежимМаршрутизации"			, "Режим маршрутизации"					, "routing_mode"			, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "КачествоОптимизацииМаршрута"	, "Качество оптимизации маршрута"		, "quality"					, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "НеИспользоватьПлатныеДороги"	, "Не использовать платные дороги"		, "avoid_tolls"				, НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "УчетХарактеристикТС"			, "Учет характеристик ТС"				, "enable_vehicle_classes"	, НомерКолонки);
		
	//в доп опциях всегда будут указаны две группы для балансировки(по времени и по остановкам). А выбор из этих групп происходит уже в транспортных средствах.
	Индекс = 0;
	ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаОтклонениеПоВремениБалансировка" + Индекс, "Штраф за отклонение по времени" + Индекс, "balanced_groups." + Индекс + ".penalty.hour", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаОтклонениеПоОстановкамБалансировка" + Индекс, "Штраф за отклонение по остановкам" + Индекс, "balanced_groups." + Индекс + ".penalty.stop", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ИдентификаторГруппыБалансировка" + Индекс, "Идентификатор группы" + Индекс, "balanced_groups." + Индекс + ".id", НомерКолонки);
	
	Индекс = 1;
	ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаОтклонениеПоВремениБалансировка" + Индекс, "Штраф за отклонение по времени" + Индекс, "balanced_groups." + Индекс + ".penalty.hour", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ШтрафЗаОтклонениеПоОстановкамБалансировка" + Индекс, "Штраф за отклонение по остановкам" + Индекс, "balanced_groups." + Индекс + ".penalty.stop", НомерКолонки);
	ДобавитьКолонкуВКолонки(Колонки, "ИдентификаторГруппыБалансировка" + Индекс, "Идентификатор группы" + Индекс, "balanced_groups." + Индекс + ".id", НомерКолонки);
	
	Возврат Колонки;
КонецФункции //(ПолучитьКолонкиДопОпции)

Процедура ДобавитьКолонкуВКолонки(КолонкиДляРасчета, Имя, Заголовок, ИмяЛатиницей, Порядок)
	
	Значение = Новый Структура;
	Значение.Вставить("Заголовок", Заголовок);
	Значение.Вставить("ИмяЛатиницей", ИмяЛатиницей);
	
	Если ЗначениеЗаполнено(ИмяЛатиницей) Тогда
		Порядок = Порядок + 1;
		Значение.Вставить("Порядок", Порядок);
	Иначе
		Значение.Вставить("Порядок", 0);
	КонецЕсли;
	
	КолонкиДляРасчета.Вставить(Имя, Значение);
	
КонецПроцедуры //(ДобавитьКолонкуВКолонки)

#КонецОбласти

#Область ПланированиеПоТаблицамДанных

////ПРИКЛАДНЫЕ МЕТОДЫ////

Функция СоздатьФайлПоТаблицамДанных(ПутьКФайлу, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, СписокДокументов, Транспорты, ДанныеСклада) Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
		
	ОтветПодготовки = ПодготовитьТаблицыДляПланирования(ДатаНачалаМаршрута, ДатаОкончанияМаршрута, СписокДокументов, Транспорты, ДанныеСклада); 
	
	тМаршруты = ОтветПодготовки.тМаршруты;
	тМашины = ОтветПодготовки.тМашины;
	тСклады = ОтветПодготовки.тСклады;
	тДопОпции = ОтветПодготовки.тДопОпции;
	мКритическихОшибок = ОтветПодготовки.мКритическихОшибок;
	мВсехОшибок = ОтветПодготовки.мВсехОшибок;
	
	Если мКритическихОшибок.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мВсехОшибок, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
			
	//// СОЗДАНИЕ ФАЙЛА ////
	ОтветСоздания = СформироватьФайлДляПланирования(ПутьКФайлу, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, тМашины, тСклады, тДопОпции);
	Если ОтветСоздания.Результат Тогда
		ОтветФункции.Результат = Истина;	
	Иначе
		мВсехОшибок.Добавить(ОтветСоздания.ОписаниеОшибки);	
	КонецЕсли;
	
	Если мВсехОшибок.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мВсехОшибок, Символы.ПС);	
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(СоздатьФайлПоТаблицамДанных)

Функция ПоставитьЗадачуВОчередьНаОбработкуПоТаблицамДанных(ИдентификаторРодительскойЗадачи, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, СписокДокументов, Транспорты, ДанныеСклада) Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ИдЗадачи", "");
				
	ОтветПодготовки = ПодготовитьТаблицыДляПланирования(ДатаНачалаМаршрута, ДатаОкончанияМаршрута, СписокДокументов, Транспорты, ДанныеСклада); 
	
	тМаршруты = ОтветПодготовки.тМаршруты;
	тМашины = ОтветПодготовки.тМашины;
	тСклады = ОтветПодготовки.тСклады;
	тДопОпции = ОтветПодготовки.тДопОпции;
	мКритическихОшибок = ОтветПодготовки.мКритическихОшибок;
	мВсехОшибок = ОтветПодготовки.мВсехОшибок;
	
	Если мКритическихОшибок.Количество() > 0 Тогда
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мВсехОшибок, Символы.ПС);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветСоздания = ПоставитьЗадачуВОчередьНаОбработку(ИдентификаторРодительскойЗадачи, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, тМашины, тСклады, тДопОпции);
	Если ЗначениеЗаполнено(ОтветСоздания.ОписаниеОшибки) Тогда
		мВсехОшибок.Добавить(ОтветСоздания.ОписаниеОшибки);
		ОтветФункции.ОписаниеОшибки = _СтрСоединить(мВсехОшибок, Символы.ПС);		
	Иначе
		ОтветФункции.Результат = Истина;
		ОтветФункции.ИдЗадачи = ОтветСоздания.ИдЗадачи;
		
		ЗаписатьПланированиеВИсторию(ОтветФункции.ИдЗадачи, ИдентификаторРодительскойЗадачи, Документы.МаршрутныйЛист.ПустаяСсылка());
		
		Если мВсехОшибок.Количество() > 0 Тогда
			ОтветФункции.ОписаниеОшибки = _СтрСоединить(мВсехОшибок, Символы.ПС);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(ПоставитьЗадачуВОчередьНаОбработкуПоТаблицамДанных)

// Функция - Подготовить таблицы для планирования
//
// Параметры:
//  ДатаДоставки - 				 - 
//  Документы	 - Массив		 - массив ссылок на документы (ЗаказПокупателя, РТИУ, ВозвратОтПокупателя, ЗаказПоставщику, ВозвратПоставщику, Перемещение)
//  Транспорты	 - ТаблицаЗначений	 - Состав таблицы:
//  	1. Машина - СправочникСсылка.Автомашины
//  	2. Водитель - СправочникСсылка.ФизическиеЛица
//  	3. ИдТранспорта - Строка
//  	4. СтартСПарковки - Булево
//  	5. ЗаезжатьНаСкладВНачалеРаботы - Булево
//  	6. ВозвратНаПарковку - Булево
//  	7. АдресПарковки - Строка
//  	8. ВремяРаботы - Строка
//  ДанныеСклада - Структура		 - Состав:
//  		1.ВозвратНаСкладНаСледДень - Булево
//  		2.СкладПланирования - СправочникСсылка.Склады
//  		3.БезВозвратаНаСклад - Булево
// 
// Возвращаемое значение:
//   - 
//
Функция ПодготовитьТаблицыДляПланирования(ДатаНачалаМаршрута, ДатаОкончанияМаршрута, СписокДокументов, Транспорты, ДанныеСклада) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачалаМаршрута", ДатаНачалаМаршрута);
	ДопПараметры.Вставить("ДатаОкончанияМаршрута", ДатаОкончанияМаршрута);
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("мКритическихОшибок"	, Новый Массив);
	ОтветФункции.Вставить("мВсехОшибок"			, Новый Массив);
	ОтветФункции.Вставить("тМаршруты"			, ПолучитьПустуюТаблицу_Маршрут(ДатаНачалаМаршрута, ДатаОкончанияМаршрута));
	ОтветФункции.Вставить("тМашины"				, ПолучитьПустуюТаблицу_Машины(ДатаНачалаМаршрута, ДатаОкончанияМаршрута));
	ОтветФункции.Вставить("тСклады"				, ПолучитьПустуюТаблицу("Склады"));
	ОтветФункции.Вставить("тДопОпции"			, ПолучитьПустуюТаблицу("ДопОпции"));
	
	ЗаполнитьТаблицуДляПланирования_Маршруты(СписокДокументов, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, ОтветФункции.тМаршруты, ДанныеСклада.ВозвратНаСкладНаСледДень, ДанныеСклада.СкладПланирования, 
											 ДанныеСклада.БезВозвратаНаСклад, ОтветФункции.мКритическихОшибок, ОтветФункции.мВсехОшибок);
											 
	ЗаполнитьТаблицуДляПланирования_Машины(Транспорты, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, ОтветФункции.тМашины, ОтветФункции.тМаршруты, 
											ОтветФункции.мКритическихОшибок, ОтветФункции.мВсехОшибок);
	
	ЗаполнитьТаблицуДляПланирования_Склады(ОтветФункции.тСклады, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, ДанныеСклада.ВозвратНаСкладНаСледДень, ДанныеСклада.СкладПланирования, 
											ОтветФункции.мКритическихОшибок, ОтветФункции.мВсехОшибок);
											
	ЗаполнитьТаблицуДляПланирования_ДопОпции(ДатаНачалаМаршрута, ОтветФункции.тДопОпции, ОтветФункции.мКритическихОшибок, ОтветФункции.мВсехОшибок);
	
	ТаблицаВременныхОкон = Новый ТаблицаЗначений;
	ТаблицаВременныхОкон.Колонки.Добавить("Широта");
	ТаблицаВременныхОкон.Колонки.Добавить("Долгота");
	ТаблицаВременныхОкон.Колонки.Добавить("НачалоВременногоОкна");
	ТаблицаВременныхОкон.Колонки.Добавить("КонецВременногоОкна");
	
	ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
	Пока ДлительностьМаршрута >= 0 Цикл
		ТаблицаВременныхОкон.Колонки.Добавить("ВременноеОкно" + ДлительностьМаршрута);
		ДлительностьМаршрута = ДлительностьМаршрута - 1;
	КонецЦикла;
	
	Для Каждого сМаршруты ИЗ ОтветФункции.тМаршруты Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Широта", сМаршруты.Широта);
		Отбор.Вставить("Долгота", сМаршруты.Долгота);
		
		НС = ТаблицаВременныхОкон.НайтиСтроки(Отбор);
		Если НС.Количество() = 0 Тогда
			НоваяСтрокаВременныхОкон = ТаблицаВременныхОкон.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВременныхОкон, сМаршруты);
		Иначе
			ТекущаяСтрока = НС[0];
			Если ТекущаяСтрока.НачалоВременногоОкна < сМаршруты.НачалоВременногоОкна Тогда
				ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
				Пока ДлительностьМаршрута >= 0 Цикл
					ТекущаяСтрока.НачалоВременногоОкна = сМаршруты.НачалоВременногоОкна;
					
					ВременныеОкнаИзМаршрута = МодульЛогистики.ПолучитьВременныеОкнаИзСтроки(сМаршруты["ВременноеОкно" + ДлительностьМаршрута]);
					ВременныеОкнаИзТаблица = МодульЛогистики.ПолучитьВременныеОкнаИзСтроки(ТекущаяСтрока["ВременноеОкно" + ДлительностьМаршрута]);
					
					ТекущаяСтрока["ВременноеОкно" + ДлительностьМаршрута] = МодульЛогистики.ВременноеОкноСтрокой(ВременныеОкнаИзМаршрута.Начало_Время, ВременныеОкнаИзТаблица.Конец_Время, 
																												ВременныеОкнаИзМаршрута.Начало_День, ВременныеОкнаИзТаблица.Конец_День);
					
					ДлительностьМаршрута = ДлительностьМаршрута - 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ТекущаяСтрока.КонецВременногоОкна > сМаршруты.КонецВременногоОкна Тогда
				ТекущаяСтрока.КонецВременногоОкна = сМаршруты.КонецВременногоОкна;
				
				ДлительностьМаршрута = (НачалоДня(ДопПараметры.ДатаОкончанияМаршрута) - НачалоДня(ДопПараметры.ДатаНачалаМаршрута)) / (60*60*24);
				Пока ДлительностьМаршрута >= 0 Цикл
					ВременныеОкнаИзМаршрута = МодульЛогистики.ПолучитьВременныеОкнаИзСтроки(сМаршруты["ВременноеОкно" + ДлительностьМаршрута]);
					ВременныеОкнаИзТаблица = МодульЛогистики.ПолучитьВременныеОкнаИзСтроки(ТекущаяСтрока["ВременноеОкно" + ДлительностьМаршрута]);
					
					ТекущаяСтрока["ВременноеОкно" + ДлительностьМаршрута] = МодульЛогистики.ВременноеОкноСтрокой(ВременныеОкнаИзТаблица.Начало_Время, ВременныеОкнаИзМаршрута.Конец_Время, 
																												ВременныеОкнаИзТаблица.Начало_День, ВременныеОкнаИзМаршрута.Конец_День);
					
					ДлительностьМаршрута = ДлительностьМаршрута - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыВременныхОкон Из ТаблицаВременныхОкон Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Широта", СтрокаТаблицыВременныхОкон.Широта);
		Отбор.Вставить("Долгота", СтрокаТаблицыВременныхОкон.Долгота);
		
		НС = ОтветФункции.тМаршруты.НайтиСтроки(Отбор);
		Для Каждого сНС из НС Цикл
			ЗаполнитьЗначенияСвойств(сНС, СтрокаТаблицыВременныхОкон);	
		КонецЦикла;
	КонецЦикла;
	
	//у яндекса проблема с выгрузкой в мониторинг парковки, поэтому нужно данные по парковке подставить в склад. 
	//Если ОтветФункции.тМашины.Количество() = 1 Тогда
	//	эМашина = ОтветФункции.тМашины[0];
	//	Если ЗначениеЗаполнено(эМашина.МестоПарковкиНачало) Тогда
	//		Отбор = Новый Структура;
	//		Отбор.Вставить("НомерЗаказа", эМашина.МестоПарковкиНачало);
	//		НС = ОтветФункции.тМаршруты.НайтиСтроки(Отбор);
	//		Если НС.Количество() > 0 Тогда
	//			СтрокаПарковки = НС[0];
	//			
	//			СтрокаСклада = ОтветФункции.тСклады[0];
	//			СтрокаСклада.Широта = СтрокаПарковки.Широта;
	//			СтрокаСклада.Долгота = СтрокаПарковки.Долгота;
	//			СтрокаСклада.ВремяРаботы = СтрокаПарковки["ВременноеОкно0"];
	//			
	//			ОтветФункции.тМаршруты.Удалить(СтрокаПарковки);
	//		КонецЕсли;
	//		
	//		эМашина.МестоПарковкиНачало = "";
	//		эМашина.ЗаезжатьНаСкладВНачалеРаботы = "";
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ОтветФункции;	
КонецФункции

//ЗАПОЛНЕНИЕ ТАБЛИЦ////

Процедура ЗаполнитьТаблицуДляПланирования_Маршруты(СписокДокументов, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, ВозвратНаСкладНаСледДень, СкладПланирования, БезВозвратаНаСклад, мКритическихОшибок, мВсехОшибок)
		
	ГородаИАдреса = Новый Соответствие;
	
	ГородаИсключения = Новый Массив;
	ГородаИсключения.Добавить("ОРЦ ""Челси""");
	ГородаИсключения.Добавить("ТК ""Докер""");
	ГородаИсключения.Добавить("ТК ""Орион""");
	ГородаИсключения.Добавить("ТЦ ""Мебельный центр""");
	ГородаИсключения.Добавить("Склад Челябинск");
	ГородаИсключения.Добавить("Склад Москва");
	РеализацииСамовывоз = Новый Соответствие;
	
	АдресаСамовывозовПоУмолчанию = Новый Соответствие;
	ЗапросАдресов = Новый Запрос;
	ЗапросАдресов.Текст = "ВЫБРАТЬ
	                      |	СпособыДоставки.Город,
	                      |	СпособыДоставки.Адрес,
	                      |	СпособыДоставки.Широта,
	                      |	СпособыДоставки.Долгота
	                      |ИЗ
	                      |	Справочник.СпособыДоставки КАК СпособыДоставки
	                      |ГДЕ
	                      |	СпособыДоставки.ПометкаУдаления = ЛОЖЬ
	                      |	И СпособыДоставки.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.ВидыДоставки.Самовывоз)
	                      |	И НЕ (ВЫРАЗИТЬ(СпособыДоставки.Адрес КАК СТРОКА(1))) = """"
	                      |	И НЕ (ВЫРАЗИТЬ(СпособыДоставки.Город КАК СТРОКА(1))) = """"
	                      |	И НЕ (ВЫРАЗИТЬ(СпособыДоставки.Широта КАК СТРОКА(1))) = """"
	                      |	И НЕ (ВЫРАЗИТЬ(СпособыДоставки.Долгота КАК СТРОКА(1))) = """"";
	ВыборкаАдресов = ЗапросАдресов.Выполнить().Выбрать();
	Пока ВыборкаАдресов.Следующий() Цикл
		ДанныеДоставки = Новый Структура;
		ДанныеДоставки.Вставить("АдресДоставки", ВыборкаАдресов.Адрес);
		ДанныеДоставки.Вставить("ШиротаАдресДоставки", Число(ВыборкаАдресов.Широта));
		ДанныеДоставки.Вставить("ДолготаАдресДоставки", Число(ВыборкаАдресов.Долгота));
		
		АдресаСамовывозовПоУмолчанию.Вставить(ВыборкаАдресов.Город, ДанныеДоставки);	
	КонецЦикла;
	
	Для Каждого ТекДокумент Из СписокДокументов Цикл
		
		//костыль для забора груза с машины
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			ДанныеРТИУ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекДокумент, "ДополнениеКАдресуДоставки, СпособДоставки");
			Если ДанныеРТИУ.ДополнениеКАдресуДоставки = "Самовывоз" И ЗначениеЗаполнено(ДанныеРТИУ.СпособДоставки) Тогда
				Если _СтрНачинаетсяС(ДанныеРТИУ.СпособДоставки, "Самовывоз") Тогда
					Город = ДанныеРТИУ.СпособДоставки;
					
					ЛеваяЧасть = "Самовывоз (";
					Город = СтрЗаменить(Город, ЛеваяЧасть, "");
					ПраваяЧасть = Прав(Город, СтрДлина(Город) - _СтрНайти(Город, ")") + 1);
					Город = СтрЗаменить(Город, ПраваяЧасть, "");
					
					Если ГородаИсключения.Найти(Город) = Неопределено Тогда
						РеализацииСамовывоз.Вставить(ТекДокумент, Город);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекДокумент, "ДополнениеКАдресуДоставки, СпособДоставки");
			Если ДанныеЗаказа.ДополнениеКАдресуДоставки = "Самовывоз" И ЗначениеЗаполнено(ДанныеЗаказа.СпособДоставки) Тогда
				Если _СтрНачинаетсяС(ДанныеЗаказа.СпособДоставки, "Самовывоз") Тогда
					Город = ДанныеЗаказа.СпособДоставки;
					
					ЛеваяЧасть = "Самовывоз (";
					Город = СтрЗаменить(Город, ЛеваяЧасть, "");
					ПраваяЧасть = Прав(Город, СтрДлина(Город) - _СтрНайти(Город, ")") + 1);
					Город = СтрЗаменить(Город, ПраваяЧасть, "");
					
					Если ГородаИсключения.Найти(Город) = Неопределено Тогда
						РеализацииСамовывоз.Вставить(ТекДокумент, Город);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВозвратНаСкладНаСледДень", ВозвратНаСкладНаСледДень);
		ДопПараметры.Вставить("СкладПланирования", СкладПланирования);
		ДопПараметры.Вставить("БезВозвратаНаСклад", БезВозвратаНаСклад);
		ДопПараметры.Вставить("ДатаНачалаМаршрута", ДатаНачалаМаршрута);
		ДопПараметры.Вставить("ДатаОкончанияМаршрута", ДатаОкончанияМаршрута);
		ОтветДанныеДокумент = ЯндексМаршрутизация.ПолучитьДанныеДокументаДляРасчетаМаршрута(ТекДокумент, Неопределено, ДопПараметры);
		Если ОтветДанныеДокумент.Результат Тогда
			СтрокаМаршруты = тМаршруты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМаршруты, ОтветДанныеДокумент.Данные);
			
			Если ГородаИАдреса[ОтветДанныеДокумент.Данные.Город] = Неопределено И ЗначениеЗаполнено(ОтветДанныеДокумент.Данные.Город) Тогда
				ДанныеДоставки = Новый Структура;
				ДанныеДоставки.Вставить("АдресДоставки", ОтветДанныеДокумент.Данные.АдресПолучателя);
				ДанныеДоставки.Вставить("ШиротаАдресДоставки", ОтветДанныеДокумент.Данные.Широта);
				ДанныеДоставки.Вставить("ДолготаАдресДоставки", ОтветДанныеДокумент.Данные.Долгота);
				ГородаИАдреса.Вставить(ОтветДанныеДокумент.Данные.Город, ДанныеДоставки);
			КонецЕсли;
			
			Если Служебный.СвойствоСуществует(ОтветДанныеДокумент, "ДанныеДоп") Тогда
				СтрокаМаршруты = тМаршруты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМаршруты, ОтветДанныеДокумент.ДанныеДоп);
				
				Если ГородаИАдреса[ОтветДанныеДокумент.ДанныеДоп.Город] = Неопределено И ЗначениеЗаполнено(ОтветДанныеДокумент.ДанныеДоп.Город) Тогда
					ДанныеДоставки = Новый Структура;
					ДанныеДоставки.Вставить("АдресДоставки", ОтветДанныеДокумент.ДанныеДоп.АдресПолучателя);
					ДанныеДоставки.Вставить("ШиротаАдресДоставки", ОтветДанныеДокумент.ДанныеДоп.Широта);
					ДанныеДоставки.Вставить("ДолготаАдресДоставки", ОтветДанныеДокумент.ДанныеДоп.Долгота);
					ГородаИАдреса.Вставить(ОтветДанныеДокумент.ДанныеДоп.Город, ДанныеДоставки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			мОшибокНеНормал = _СтрРазделить(ОтветДанныеДокумент.ОписаниеОшибки, Символы.ПС);
			мОшибокНормал = Новый Массив;
			Для Каждого эОшибка Из мОшибокНеНормал Цикл
				мОшибокНормал.Добавить("   " + эОшибка);	
			КонецЦикла;
			
			Если ОтветДанныеДокумент.ЭтоОшибкаЗаполненияГабаритов = Ложь Тогда
				мКритическихОшибок.Добавить("" + ТекДокумент + Символы.ПС + _СтрСоединить(мОшибокНормал, Символы.ПС) + Символы.ПС);
			КонецЕсли;
			мВсехОшибок.Добавить("" + ТекДокумент + Символы.ПС + _СтрСоединить(мОшибокНормал, Символы.ПС) + Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого эРеализация Из РеализацииСамовывоз Цикл
		
		ДанныеДоставкиЗаборСМашины = ГородаИАдреса[эРеализация.Значение];
		Если ДанныеДоставкиЗаборСМашины = Неопределено Тогда			
			ДанныеДоставкиЗаборСМашины = АдресаСамовывозовПоУмолчанию[эРеализация.Значение];
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВозвратНаСкладНаСледДень", ВозвратНаСкладНаСледДень);
		ДопПараметры.Вставить("СкладПланирования", СкладПланирования);
		ДопПараметры.Вставить("БезВозвратаНаСклад", БезВозвратаНаСклад);
		ДопПараметры.Вставить("ДанныеДоставкиЗаборСМашины", ДанныеДоставкиЗаборСМашины);
		ДопПараметры.Вставить("ДатаНачалаМаршрута", ДатаНачалаМаршрута);
		ДопПараметры.Вставить("ДатаОкончанияМаршрута", ДатаОкончанияМаршрута);
		ОтветДанныеДокумент = ЯндексМаршрутизация.ПолучитьДанныеДокументаДляРасчетаМаршрута(эРеализация.Ключ, Неопределено, ДопПараметры);
		Если ОтветДанныеДокумент.Результат Тогда
			СтрокаМаршруты = тМаршруты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМаршруты, ОтветДанныеДокумент.Данные);
			
			Если Служебный.СвойствоСуществует(ОтветДанныеДокумент, "ДанныеДоп") Тогда
				СтрокаМаршруты = тМаршруты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМаршруты, ОтветДанныеДокумент.ДанныеДоп);	
			КонецЕсли;
		Иначе
			мОшибокНеНормал = _СтрРазделить(ОтветДанныеДокумент.ОписаниеОшибки, Символы.ПС);
			мОшибокНормал = Новый Массив;
			Для Каждого эОшибка Из мОшибокНеНормал Цикл
				мОшибокНормал.Добавить("   " + эОшибка);	
			КонецЦикла;
			
			Если ОтветДанныеДокумент.ЭтоОшибкаЗаполненияГабаритов = Ложь Тогда
				мКритическихОшибок.Добавить("" + эРеализация.Ключ + Символы.ПС + _СтрСоединить(мОшибокНормал, Символы.ПС) + Символы.ПС);	
			КонецЕсли;
			мВсехОшибок.Добавить("" + эРеализация.Ключ + Символы.ПС + _СтрСоединить(мОшибокНормал, Символы.ПС) + Символы.ПС);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры //(ЗаполнитьТаблицуДляПланирования_Маршруты)

Процедура ЗаполнитьТаблицуДляПланирования_Машины(Транспорты, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМашины, тМаршруты, мКритическихОшибок, мВсехОшибок)
	
	Для Каждого Транспорт Из Транспорты Цикл
		Парковка = Новый Структура;
		Парковка.Вставить("ЗаезжатьНаСкладВНачалеРаботы", Транспорт.ЗаезжатьНаСкладВНачалеРаботы);
		Парковка.Вставить("СтартСПарковки", Транспорт.СтартСПарковки);
		Парковка.Вставить("ВозвратНаПарковку", Транспорт.ВозвратНаПарковку);
		Парковка.Вставить("АдресПарковки", Транспорт.АдресПарковки);
		
		Если ЗначениеЗаполнено(Транспорт.ИдТранспорта) Тогда
			ИдТранспорта = Транспорт.ИдТранспорта;
		Иначе			
			ДанныеМашины = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Транспорт.Машина, "Наименование, ЯМ_Логин");
			Если ЗначениеЗаполнено(ДанныеМашины.ЯМ_Логин) Тогда
				ИдТранспорта = ДанныеМашины.ЯМ_Логин;	
			Иначе
				ИдТранспорта = ДанныеМашины.Наименование;	
			КонецЕсли;
		КонецЕсли;
			
		ОтветДанныеМашины = ЯндексМаршрутизация.ПолучитьДанныеТранспортаДляРасчетаМаршрута(Транспорт.Машина, Транспорт.Водитель, Транспорт.ВремяРаботы, 
		ДатаНачалаМаршрута, ДатаОкончанияМаршрута, ИдТранспорта, Парковка, Транспорт.ГруппаБалансировки, Транспорт.БезВозвратаНаСклад);
		
		Если ОтветДанныеМашины.Результат Тогда
			СтрокаМашины = тМашины.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМашины, ОтветДанныеМашины.Данные);
			
			Если Служебный.СвойствоСуществует(ОтветДанныеМашины, "Парковка1") Тогда
				сМаршруты = тМаршруты.Добавить();
				ЗаполнитьЗначенияСвойств(сМаршруты, ОтветДанныеМашины.Парковка1);	
			КонецЕсли;
			
			Если Служебный.СвойствоСуществует(ОтветДанныеМашины, "Парковка2") Тогда
				сМаршруты = тМаршруты.Добавить();
				ЗаполнитьЗначенияСвойств(сМаршруты, ОтветДанныеМашины.Парковка2);	
			КонецЕсли;
		Иначе
			мКритическихОшибок.Добавить(ОтветДанныеМашины.ОписаниеОшибки);
			мВсехОшибок.Добавить(ОтветДанныеМашины.ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //(ЗаполнитьТаблицуДляПланирования_Машины)

Процедура ЗаполнитьТаблицуДляПланирования_Склады(тСклады, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, ВозвратНаСкладНаСледДень, СкладПланирования, мКритическихОшибок, мВсехОшибок)
	
	ДопПараметрыСклада = Новый Структура;
	ДопПараметрыСклада.Вставить("ВозратНаСкладНаСледДень", ВозвратНаСкладНаСледДень);
	ДопПараметрыСклада.Вставить("ПереносНаСледДеньНачала", Ложь);
	ДопПараметрыСклада.Вставить("ПереносНаСледДеньКонца", Истина);
	ДопПараметрыСклада.Вставить("ДатаНачалаМаршрута", ДатаНачалаМаршрута);
	ДопПараметрыСклада.Вставить("ДатаОкончанияМаршрута", ДатаОкончанияМаршрута);
	
	ОтветДанныеСклад = ЯндексМаршрутизация.ПолучитьДанныеСкладаДляРасчетаМаршрута(СкладПланирования, ДопПараметрыСклада);
	Если ОтветДанныеСклад.Результат Тогда
		СтрокаСклады = тСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСклады, ОтветДанныеСклад.Данные);
	Иначе
		мКритическихОшибок.Добавить(ОтветДанныеСклад.ОписаниеОшибки);
		мВсехОшибок.Добавить(ОтветДанныеСклад.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры //(ЗаполнитьТаблицуДляПланирования_Склады)

Процедура ЗаполнитьТаблицуДляПланирования_ДопОпции(ДатаДоставки, тДопОпции, мКритическихОшибок, мВсехОшибок)
	
	СтрокаДопОпции = тДопОпции.Добавить();
	СтрокаДопОпции.Мультизаказ = Истина;
	СтрокаДопОпции.МестныйЧасовойПояс = ПолучитьЧасовойПоясСеанса();
	СтрокаДопОпции.НачальнаяДата = Формат(ДатаДоставки, "ДФ=yyyy-MM-dd");
	СтрокаДопОпции.РежимМаршрутизации = "driving";
	СтрокаДопОпции.КачествоОптимизацииМаршрута = "normal";
	СтрокаДопОпции.НеИспользоватьПлатныеДороги = Истина;
	СтрокаДопОпции.УчетХарактеристикТС = Истина;
	
	//группа для балансировки по времени
	СтрокаДопОпции.ШтрафЗаОтклонениеПоВремениБалансировка0 = 400;
	СтрокаДопОпции.ШтрафЗаОтклонениеПоОстановкамБалансировка0 = 1;
	СтрокаДопОпции.ИдентификаторГруппыБалансировка0 = "group_time";
	
	//группа для балансировки по остановкам
	СтрокаДопОпции.ШтрафЗаОтклонениеПоВремениБалансировка1 = 1;
	СтрокаДопОпции.ШтрафЗаОтклонениеПоОстановкамБалансировка1 = 400;
	СтрокаДопОпции.ИдентификаторГруппыБалансировка1 = "group_stop";
	
КонецПроцедуры //(ЗаполнитьТаблицуДляПланирования_ДопОпции)

#КонецОбласти

#Область ПланированиеПоМаршрутномуЛисту
	
////ПРИКЛАДНЫЕ МЕТОДЫ////
Функция СоздатьФайлПоМаршрутномуЛисту(МаршрутныйЛист, ПутьКФайлу, МашинаДляПредРасчета = Неопределено, ВодительДляПредРасчета = Неопределено) Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	
	ДанныеПланирования = ПодготовитьДанныеПланированияПоМаршрутномуЛисту(МаршрутныйЛист, МашинаДляПредРасчета, ВодительДляПредРасчета);
	ОтветФункции = СоздатьФайлПоТаблицамДанных(ПутьКФайлу, ДанныеПланирования.ДатаНачалаМаршрута, ДанныеПланирования.ДатаОкончанияМаршрута, ДанныеПланирования.СписокДокументов, 
												ДанныеПланирования.Транспорты, ДанныеПланирования.ДанныеСклада);
	
	Возврат ОтветФункции;
КонецФункции //СоздатьФайлПоМаршрутномуЛисту)

Функция ПоставитьЗадачуВОчередьНаОбработкуПоМаршрутномуЛисту(МаршрутныйЛист, МашинаДляПредРасчета = Неопределено, ВодительДляПредРасчета = Неопределено) Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ИдЗадачи", "");
		
	ПоследнееПланированиеПоМЛ = НайтиПоследнееПланированиеВИстории(МаршрутныйЛист);
	ИдентификаторРодительскойЗадачи = ПоследнееПланированиеПоМЛ.Код;
	
	ДанныеПланирования = ПодготовитьДанныеПланированияПоМаршрутномуЛисту(МаршрутныйЛист, МашинаДляПредРасчета, ВодительДляПредРасчета);
	ОтветФункции = ПоставитьЗадачуВОчередьНаОбработкуПоТаблицамДанных(ИдентификаторРодительскойЗадачи, ДанныеПланирования.ДатаНачалаМаршрута, ДанныеПланирования.ДатаОкончанияМаршрута, 
																		ДанныеПланирования.СписокДокументов, ДанныеПланирования.Транспорты, ДанныеПланирования.ДанныеСклада);
	
	Если ОтветФункции.Результат Тогда
		ЗаписатьПланированиеВИсторию(ОтветФункции.ИдЗадачи, ИдентификаторРодительскойЗадачи, МаршрутныйЛист.Ссылка);
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(ПоставитьЗадачуВОчередьНаОбработкуПоМаршрутномуЛисту)

////ЗАПОЛНЕНИЕ ТАБЛИЦ
Функция ПодготовитьДанныеПланированияПоМаршрутномуЛисту(МаршрутныйЛист, МашинаДляПредРасчета, ВодительДляПредРасчета)
	
	ОтветФункции = Новый Структура;
	
	////ДОКУМЕНТЫ////
	СписокДокументов = Новый Массив;
	Для Каждого сСостав Из МаршрутныйЛист.Состав Цикл
		ТекДокумент = Неопределено;
		Если ЗначениеЗаполнено(сСостав.ЗаказПокупателя) Тогда
			Если ЗначениеЗаполнено(сСостав.РеализацияТоваровУслуг) Тогда 
				ТекДокумент = сСостав.РеализацияТоваровУслуг; //РеализацияТоваровУслуг
			ИначеЕсли ЗначениеЗаполнено(сСостав.ВозвратТоваровОтПокупателя) Тогда 
				ТекДокумент = сСостав.ВозвратТоваровОтПокупателя; //ВозвратТоваровОтПокупателя
			ИначеЕсли ЗначениеЗаполнено(сСостав.Перемещение) Тогда 
				ТекДокумент = сСостав.Перемещение; //Перемещение
			Иначе
				ТекДокумент = сСостав.ЗаказПокупателя;	
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(сСостав.ЗаказПоставщику) Тогда
			ТекДокумент = сСостав.ЗаказПоставщику; //ЗаказПоставщику	
		ИначеЕсли ЗначениеЗаполнено(сСостав.ВозвратТоваровПоставщику) Тогда
			ТекДокумент = сСостав.ВозвратТоваровПоставщику; //ВозвратТоваровПоставщику
		ИначеЕсли ЗначениеЗаполнено(сСостав.Перемещение) Тогда
			ТекДокумент = сСостав.Перемещение; //Перемещение
		КонецЕсли;
		
		Если ТекДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДокументов.Добавить(ТекДокумент);
	КонецЦикла;
	ОтветФункции.Вставить("СписокДокументов", СписокДокументов);
	
	////ТРАНСПОРТЫ////	
	Транспорты = ЯндексМаршрутизация.ПустаяТаблицаТранспорты();
	НовыйТранспорт = Транспорты.Добавить();
	
	Если МашинаДляПредРасчета = Неопределено Тогда
		НовыйТранспорт.Машина = МаршрутныйЛист.Автомашина	
	Иначе
		НовыйТранспорт.Машина = МашинаДляПредРасчета;	
	КонецЕсли;
	
	ДанныеМашины = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыйТранспорт.Машина, "Наименование, ЯМ_Логин");
	Если ЗначениеЗаполнено(ДанныеМашины.ЯМ_Логин) Тогда
		НовыйТранспорт.ИдТранспорта = ДанныеМашины.ЯМ_Логин;	
	Иначе
		НовыйТранспорт.ИдТранспорта = ДанныеМашины.Наименование;	
	КонецЕсли;
		
	Если ВодительДляПредРасчета = Неопределено Тогда
		НовыйТранспорт.Водитель = МаршрутныйЛист.Водитель;	
	Иначе
		НовыйТранспорт.Водитель = ВодительДляПредРасчета;	
	КонецЕсли;
	
	НовыйТранспорт.ЗаезжатьНаСкладВНачалеРаботы = МаршрутныйЛист.ЗаезжатьНаСкладВНачалеРаботы;
	НовыйТранспорт.СтартСПарковки = МаршрутныйЛист.СтартСПарковки;
	НовыйТранспорт.ВозвратНаПарковку = МаршрутныйЛист.ВозвратНаПарковку;
	НовыйТранспорт.АдресПарковки = "";
	
	ДатаДоставки = НачалоДня(ТекущаяДата()); 
	Если МаршрутныйЛист.Состав.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(МаршрутныйЛист.Состав[0].ДатаНовыхДокументов) Тогда
			ДатаДоставки = МаршрутныйЛист.Состав[0].ДатаНовыхДокументов;	
		КонецЕсли;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(МаршрутныйЛист.ЯМ_НачалоСменыВодителя) Тогда
		ЯМ_НачалоСменыВодителя = МаршрутныйЛист.ЯМ_НачалоСменыВодителя;
	Иначе
		ВременныеОкна = МодульЛогистики.ПолучитьВременныеОкнаДоставкиПоУмолчанию();
		ЯМ_НачалоСменыВодителя = Дата(Формат(ДатаДоставки, "ДФ=""ггггММдд""") + Формат(ВременныеОкна.НачалоДатой, "ДФ=""ЧЧммсс"""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаршрутныйЛист.ЯМ_ОкончаниеСменыВодителя) Тогда
		ЯМ_ОкончаниеСменыВодителя = МаршрутныйЛист.ЯМ_ОкончаниеСменыВодителя;
	Иначе
		ВременныеОкна = МодульЛогистики.ПолучитьВременныеОкнаДоставкиПоУмолчанию();
		ЯМ_ОкончаниеСменыВодителя = Дата(Формат(ДатаДоставки, "ДФ=""ггггММдд""") + Формат(ВременныеОкна.КонецДатой, "ДФ=""ЧЧммсс"""));
	КонецЕсли;
			
	ВременныеОкна = МодульЛогистики.ПолучитьВременныеОкнаПоДатам(ЯМ_НачалоСменыВодителя, ЯМ_ОкончаниеСменыВодителя); 
	НовыйТранспорт.ВремяРаботы = МодульЛогистики.ВременноеОкноСтрокой(ВременныеОкна.Начало_Время, ВременныеОкна.Конец_Время);
	
	НовыйТранспорт.БезВозвратаНаСклад = МаршрутныйЛист.ЯМ_БезВозвратаНаСклад;
	
	ОтветФункции.Вставить("Транспорты", Транспорты);
	
	////СКЛАДЫ////
	ДанныеСклада = Новый Структура;
	ДанныеСклада.Вставить("ВозвратНаСкладНаСледДень", МаршрутныйЛист.ЯМ_ВозвратНаСкладНаСледДень);
	ДанныеСклада.Вставить("СкладПланирования", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МаршрутныйЛист.Подразделение, "Склад"));
	ДанныеСклада.Вставить("БезВозвратаНаСклад", МаршрутныйЛист.ЯМ_БезВозвратаНаСклад);
	
	ОтветФункции.Вставить("ДанныеСклада", ДанныеСклада);
	
	////ДАТА ДОСТАВКИ////
	ОтветФункции.Вставить("ДатаДоставки", НачалоДня(ЯМ_НачалоСменыВодителя));
	ОтветФункции.Вставить("ДатаНачалаМаршрута", ЯМ_НачалоСменыВодителя); 
	ОтветФункции.Вставить("ДатаОкончанияМаршрута", ЯМ_ОкончаниеСменыВодителя); 
	
	Возврат ОтветФункции;
КонецФункции //(ПодготовитьДанныеПланированияПоМаршрутномуЛисту)

#КонецОбласти

#Область ИсторияЗапросовПланирования

Функция НайтиПланированиеВИстории(ИдЗадачи) Экспорт
	
	Возврат Справочники.ЯМ_ИсторияЗапросовПланирования.НайтиПоКоду(ИдЗадачи);
	 
КонецФункции //(НайтиПланированиеВИстории)

Процедура ЗаписатьПланированиеВИсторию(ИдЗадачи, ИдентификаторРодительскойЗадачи, МаршрутныйЛист) Экспорт
	
	Если ИдЗадачи = ИдентификаторРодительскойЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Планирование = Справочники.ЯМ_ИсторияЗапросовПланирования.НайтиПоКоду(ИдЗадачи);
	Если ЗначениеЗаполнено(Планирование) Тогда
		НовоеПланирование = Планирование.ПолучитьОбъект();
	Иначе
		НовоеПланирование = Справочники.ЯМ_ИсторияЗапросовПланирования.СоздатьЭлемент();
		НовоеПланирование.ДатаПланирования = ТекущаяДата();
	КонецЕсли;
	НовоеПланирование.Код = ИдЗадачи;
	НовоеПланирование.Родитель = Справочники.ЯМ_ИсторияЗапросовПланирования.НайтиПоКоду(ИдентификаторРодительскойЗадачи);
		
	Если ТипЗнч(МаршрутныйЛист) = Тип("Массив") Тогда
		Для Каждого эМаршрутныйЛист Из МаршрутныйЛист Цикл
			Если ЗначениеЗаполнено(эМаршрутныйЛист) Тогда
				НоваяСтрока = НовоеПланирование.МаршрутныеЛисты.Добавить();
				НоваяСтрока.Документ = эМаршрутныйЛист;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(МаршрутныйЛист) Тогда
			НоваяСтрока = НовоеПланирование.МаршрутныеЛисты.Добавить();
			НоваяСтрока.Документ = МаршрутныйЛист;
		КонецЕсли;
	КонецЕсли;
	
	НовоеПланирование.Записать();
	
КонецПроцедуры //(ЗаписатьПланированиеВИсторию)

Функция НайтиПоследнееПланированиеВИстории(МаршрутныйЛист) Экспорт
	
	Планирование = Справочники.ЯМ_ИсторияЗапросовПланирования.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЯМ_ИсторияЗапросовПланированияМаршрутныеЛисты.Ссылка,
	               |	ЯМ_ИсторияЗапросовПланированияМаршрутныеЛисты.Ссылка.ДатаПланирования КАК ДатаПланирования
	               |ИЗ
	               |	Справочник.ЯМ_ИсторияЗапросовПланирования.МаршрутныеЛисты КАК ЯМ_ИсторияЗапросовПланированияМаршрутныеЛисты
	               |ГДЕ
	               |	ЯМ_ИсторияЗапросовПланированияМаршрутныеЛисты.Документ = &МаршрутныйЛист
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПланирования УБЫВ";
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Планирование = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Планирование;
КонецФункции //(НайтиПоследнееПланированиеВИстории)

#КонецОбласти

#Область ОбменЧерезExcel

////ПРИКЛАДНЫЕ МЕТОДЫ////
Функция СформироватьФайлДляПланирования(ИмяФайла, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, тМашины, тСклады, тДопОпции) Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	
	Отказ = Ложь;
	
	Эксель = РаботаСExcel.ПолучитьExcel(Отказ, ОтветФункции.ОписаниеОшибки);
	Если Отказ Тогда
		Возврат ОтветФункции;
	КонецЕсли;
	
	КнигаЭксель = РаботаСExcel.ДобавитьКнигуExcel(Эксель, Отказ, ОтветФункции.ОписаниеОшибки);
	Если Отказ Тогда
		РаботаСExcel.ЗакрытьExcel(Эксель);
		Возврат ОтветФункции;	
	КонецЕсли;
	
	ЛистДопОпции = КнигаЭксель.Worksheets(1);
	ЛистДопОпции.Name = "Options";
	тДопОпцииНормал = ПодготовитьТаблицуКВыгрузкеВФайл(тДопОпции, "ДопОпции", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	РаботаСExcel.ЗаполнитьЛистExcelИзТаблицыЗначений(ЛистДопОпции, тДопОпцииНормал);
	
	ЛистСклад = РаботаСExcel.ДобавитьЛистExcel(КнигаЭксель, "Depot", Отказ, ОтветФункции.ОписаниеОшибки);
	Если Отказ Тогда
		РаботаСExcel.ЗакрытьКнигуExcel(КнигаЭксель);
		РаботаСExcel.ЗакрытьExcel(Эксель);
		Возврат ОтветФункции;	
	КонецЕсли;
	тСкладыНормал = ПодготовитьТаблицуКВыгрузкеВФайл(тСклады, "Склады", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	РаботаСExcel.ЗаполнитьЛистExcelИзТаблицыЗначений(ЛистСклад, тСкладыНормал);
	
	ЛистВодители = РаботаСExcel.ДобавитьЛистExcel(КнигаЭксель, "Vehicles", Отказ, ОтветФункции.ОписаниеОшибки);
	Если Отказ Тогда
		РаботаСExcel.ЗакрытьКнигуExcel(КнигаЭксель);
		РаботаСExcel.ЗакрытьExcel(Эксель);
		Возврат ОтветФункции;	
	КонецЕсли;
	тМашиныНормал = ПодготовитьТаблицуКВыгрузкеВФайл(тМашины, "Машины", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	РаботаСExcel.ЗаполнитьЛистExcelИзТаблицыЗначений(ЛистВодители, тМашиныНормал);
	
	ЛистЗаказы = РаботаСExcel.ДобавитьЛистExcel(КнигаЭксель, "Orders", Отказ, ОтветФункции.ОписаниеОшибки);
	Если Отказ Тогда
		РаботаСExcel.ЗакрытьКнигуExcel(КнигаЭксель);
		РаботаСExcel.ЗакрытьExcel(Эксель);
		Возврат ОтветФункции;	
	КонецЕсли;
	тМаршрутыНормал = ПодготовитьТаблицуКВыгрузкеВФайл(тМаршруты, "Маршруты", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	
	//пока интерфейс яндекса не поддерживает временные окна в массиве
	ДлительностьМаршрута = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
	Если ДлительностьМаршрута = 0 Тогда
		ИмяСтаройКолонки = "";
		ИмяНовойКолонки = "";
		Для Каждого Колонка Из тМаршрутыНормал.Колонки Цикл
			Если _СтрНайти(Колонка.Имя, "ВременноеОкно0") Тогда
				ИмяСтаройКолонки = Колонка.Имя;
				ИмяНовойКолонки = СтрЗаменить(Колонка.Имя, "ВременноеОкно0", "ВременноеОкно");
				тМаршрутыНормал.Колонки.Добавить(ИмяНовойКолонки);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяСтаройКолонки) И ЗначениеЗаполнено(ИмяНовойКолонки) Тогда
			Для Каждого сМаршрутыНормал Из тМаршрутыНормал Цикл		
				сМаршрутыНормал[ИмяНовойКолонки] = сМаршрутыНормал[ИмяСтаройКолонки];
				
				Если сМаршрутыНормал[ИмяНовойКолонки] = "Временное окно0" Тогда
					сМаршрутыНормал[ИмяНовойКолонки] = "Временное окно";	
				ИначеЕсли сМаршрутыНормал[ИмяНовойКолонки] = "time_windows.0.time_window" Тогда
					сМаршрутыНормал[ИмяНовойКолонки] = "time_window";	
				КонецЕсли;
			КонецЦикла;
			
			тМаршрутыНормал.Колонки.Удалить(ИмяСтаройКолонки);
		КонецЕсли;
	КонецЕсли;
		
	РаботаСExcel.ЗаполнитьЛистExcelИзТаблицыЗначений(ЛистЗаказы, тМаршрутыНормал);
	
	// Сохранение файла
	Попытка
		КнигаЭксель.SaveAs(ИмяФайла);
	Исключение
		ОтветФункции.ОписаниеОшибки = "Не удалось записать файл. Описание ошибки: " + ОписаниеОшибки();	
	КонецПопытки;
	
	РаботаСExcel.ЗакрытьКнигуExcel(КнигаЭксель);
	РаботаСExcel.ЗакрытьExcel(Эксель);
	
	Если НЕ ЗначениеЗаполнено(ОтветФункции.ОписаниеОшибки) Тогда
		ОтветФункции.Результат = Истина;
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(СоздатьФайлДляМаршрутизации)

////СЛУЖЕБНЫЕ////
Функция ПодготовитьТаблицуКВыгрузкеВФайл(Таблица, ВидТаблицы, ДатаНачалаМаршрута, ДатаОкончанияМаршрута)
	
	тПорядокКолонок = Новый ТаблицаЗначений;
	тПорядокКолонок.Колонки.Добавить("Имя");
	тПорядокКолонок.Колонки.Добавить("ИмяНовое");
	тПорядокКолонок.Колонки.Добавить("Заголовок");
	тПорядокКолонок.Колонки.Добавить("ИмяЛатиницей");
	тПорядокКолонок.Колонки.Добавить("Порядок");
	
	Колонки = Новый Соответствие;
	Если ВидТаблицы = "Маршруты" Тогда
		Колонки = ПолучитьКолонкиМаршрута(ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	ИначеЕсли ВидТаблицы = "Машины" Тогда
		КоличествоСмен = 1;
		КоличествоПерерывов = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
				
		Колонки = ПолучитьКолонкиМашины(КоличествоСмен, КоличествоПерерывов);	
	ИначеЕсли ВидТаблицы = "Склады" Тогда
		Колонки = ПолучитьКолонкиСклады();	
	ИначеЕсли ВидТаблицы = "ДопОпции" Тогда
		Колонки = ПолучитьКолонкиДопОпции();
	КонецЕсли;	
	
	Если Колонки.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Колонка Из Колонки Цикл
		
		Если Колонка.Значение.Порядок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		сПорядокКолонок = тПорядокКолонок.Добавить();
		сПорядокКолонок.Имя = Колонка.Ключ;
		Если СтрДлина(Колонка.Значение.Порядок) = 1 Тогда
			ПорядокСтрокой = "0" + Колонка.Значение.Порядок;	
		Иначе
			ПорядокСтрокой = "" + Колонка.Значение.Порядок;	
		КонецЕсли;
		сПорядокКолонок.ИмяНовое = "К" + ПорядокСтрокой + "_" + Колонка.Ключ; 
		сПорядокКолонок.Заголовок = Колонка.Значение.Заголовок;
		сПорядокКолонок.ИмяЛатиницей = Колонка.Значение.ИмяЛатиницей;
		сПорядокКолонок.Порядок = Колонка.Значение.Порядок;
		
	КонецЦикла;
	
	тПорядокКолонок.Сортировать("Порядок Возр");
	
	ТаблицаНормал = Новый ТаблицаЗначений;
	Для Каждого сПорядокКолонок Из тПорядокКолонок Цикл
		ТаблицаНормал.Колонки.Добавить(сПорядокКолонок.ИмяНовое);
	КонецЦикла;
	
	ПерваяСтрока = ТаблицаНормал.Добавить();
	ВтораяСтрока = ТаблицаНормал.Добавить();
	Для Каждого сПорядокКолонок Из тПорядокКолонок Цикл
		ПерваяСтрока[сПорядокКолонок.ИмяНовое] = сПорядокКолонок.Заголовок;
		ВтораяСтрока[сПорядокКолонок.ИмяНовое] = сПорядокКолонок.ИмяЛатиницей;	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из Таблица Цикл
		
		СтрокаТаблицыНормал = ТаблицаНормал.Добавить();
		
		Для Каждого сПорядокКолонок Из тПорядокКолонок Цикл
			СтрокаТаблицыНормал[сПорядокКолонок.ИмяНовое] = СтрокаТаблицы[сПорядокКолонок.Имя];	
		КонецЦикла;
		
	КонецЦикла;

	Возврат ТаблицаНормал;
КонецФункции //(ПодготовитьТаблицуКВыгрузкеВФайл)

#КонецОбласти

#Область ОбменЧерезAPI

////МЕТОДЫ API////
Функция АПИ_ПоставитьЗадачуВОчередьНаОбработку(АпиКлюч, ИдентификаторРодительскойЗадачи, ТекстТелаЗапроса)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса = ПолучитьАдресОтправкиЗапроса() + АпиКлюч;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	// POST ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;	
	Если КодСостояния >= 500 Тогда 
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";
	Иначе
		Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();	
	КонецЕсли;
				
	Возврат Результат;
КонецФункции //(АПИ_ПоставитьЗадачуВОчередьНаОбработку)

Функция АПИ_ПолучитьРезультатВыполненияЗадачи(ИдЗадачи)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса =  ПолучитьАдресЗапросаРезультата() + ИдЗадачи;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	
	// GET ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;	
	Если КодСостояния >= 500 Тогда 
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса.";
		ОтветСайтаСтрокой = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ОтветСайтаСтрокой) Тогда
			Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + " Ответ сайта: " + ОтветСайтаСтрокой;	
		КонецЕсли;
	Иначе
		Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();	
	КонецЕсли;
				
	Возврат Результат;
КонецФункции //(АПИ_ПолучитьРезультатВыполненияЗадачи)

Функция АПИ_ПолучитьДочерниеЗадачи(АпиКлюч, ИдентификаторРодительскойЗадачи)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса =  ПолучитьАдресЗапросаДочернихЗадач() + "?apikey=" + АпиКлюч + "&parent_task_id=" + ИдентификаторРодительскойЗадачи;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	
	// GET ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();	
				
	Возврат Результат;
КонецФункции //(АПИ_ПолучитьДочерниеЗадачи)

////ПРИКЛАДНЫЕ МЕТОДЫ////
Функция ПоставитьЗадачуВОчередьНаОбработку(ИдентификаторРодительскойЗадачи, ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, тМашины, тСклады, тДопОпции) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ИдЗадачи", "");
	
	ТелоЗапроса = СоздатьТелоЗапросаДляАпи(ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, тМашины, тСклады, тДопОпции);
	ТекстТелаЗапроса = Служебный.ЗаписатьJSONПереопределямый(ТелоЗапроса);
	
	АпиКлюч = ПолучитьКлючАпи();
	ОтветЗапроса = АПИ_ПоставитьЗадачуВОчередьНаОбработку(АпиКлюч, ИдентификаторРодительскойЗадачи, ТекстТелаЗапроса);
	
	Если ЗначениеЗаполнено(ОтветЗапроса.ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОтветЗапроса.ОписаниеОшибки;	
	Иначе
		ОтветСайта = Служебный.РазобратьJSON(ОтветЗапроса.ОтветСайта);
		
		Если ОтветСайта.Свойство("error") Тогда
			Результат.ОписаниеОшибки = "Ошибка при отправке запроса! Сообщение сервиса: " + ОтветСайта.error.message;
		ИначеЕсли ОтветСайта.Свойство("id") Тогда
			Результат.ИдЗадачи = ОтветСайта.id;
		КонецЕсли;	
	КонецЕсли;
		
	Возврат Результат;
КонецФункции //(ПоставитьЗадачуВОчередьНаОбработку)

Функция ПолучитьСтатусВыполненияЗадачи(ИдЗадачи) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Статус", "");
	Результат.Вставить("НуженОбработчикОжидания", Ложь);
	
	ОтветЗапроса = АПИ_ПолучитьРезультатВыполненияЗадачи(ИдЗадачи);
	Если ЗначениеЗаполнено(ОтветЗапроса.ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОтветЗапроса.ОписаниеОшибки;	
	Иначе
		ОтветСайта = Служебный.РазобратьJSON(ОтветЗапроса.ОтветСайта);
		
		Если ОтветСайта.Свойство("error") Тогда
			Результат.ОписаниеОшибки = ОтветСайта.error.message;
			Результат.Статус = "Error";
		ИначеЕсли ОтветСайта.Свойство("id") Тогда
			Статус = "Задача поставлена в очередь на выполнение";
			Если Служебный.СвойствоСуществует(ОтветСайта.status, "started") Тогда
				Статус = "Началось выполнение задачи";
				
				Если Служебный.СвойствоСуществует(ОтветСайта.status, "completed") Тогда
					Статус = "Выполнение задачи закончено успешно или с ошибкой";	
				ИначеЕсли Служебный.СвойствоСуществует(ОтветСайта.status, "cancelled") Тогда
					Статус = "Выполнение задачи отменено пользователем или системой в связи с ошибкой или истечением времени ожидания";	
				КонецЕсли;
			КонецЕсли;
			
			Результат.ОписаниеОшибки = ОтветСайта.Message;
			Результат.Статус = Статус;
		КонецЕсли;	
	КонецЕсли;
	
	Если Результат.Статус = "Задача поставлена в очередь на выполнение" ИЛИ Результат.Статус = "Началось выполнение задачи" Тогда
		Результат.НуженОбработчикОжидания = Истина;	
	КонецЕсли;
		
	Возврат Результат;
КонецФункции //(ПолучитьСтатусВыполненияЗадачи)

Функция ПолучитьРезультатВыполненияЗадачи(ИдЗадачи) Экспорт
	
	РезультатПланирования = Новый Структура;
	РезультатПланирования.Вставить("Маршруты", Новый Массив);
	РезультатПланирования.Вставить("НераспределенныеУзлыМаршрута", Новый Массив);
	РезультатПланирования.Вставить("Машины", Новый Массив);
	РезультатПланирования.Вставить("Опции", Новый Структура);
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("Статус", "");
	ОтветФункции.Вставить("НуженОбработчикОжидания", Ложь);
	ОтветФункции.Вставить("РезультатПланирования", РезультатПланирования);
	
	ОтветЗапроса = АПИ_ПолучитьРезультатВыполненияЗадачи(ИдЗадачи);
	Если ЗначениеЗаполнено(ОтветЗапроса.ОписаниеОшибки) Тогда
		ОтветФункции.ОписаниеОшибки = ОтветЗапроса.ОписаниеОшибки;	
	Иначе
		ОтветСайта = Служебный.РазобратьJSON(ОтветЗапроса.ОтветСайта);
		
		Если ОтветСайта.Свойство("error") Тогда
			ОтветФункции.ОписаниеОшибки = ОтветСайта.error.message;
			ОтветФункции.Статус = "Error";
		ИначеЕсли ОтветСайта.Свойство("id") Тогда
			Статус = "Задача поставлена в очередь на выполнение";
			Если Служебный.СвойствоСуществует(ОтветСайта.status, "started") Тогда
				Статус = "Началось выполнение задачи";
				
				Если Служебный.СвойствоСуществует(ОтветСайта.status, "completed") Тогда
					Статус = "Выполнение задачи закончено успешно или с ошибкой";
					РазобратьРезультатПланирования(РезультатПланирования, ОтветСайта);
				ИначеЕсли Служебный.СвойствоСуществует(ОтветСайта.status, "cancelled") Тогда
					Статус = "Выполнение задачи отменено пользователем или системой в связи с ошибкой или истечением времени ожидания";	
				КонецЕсли;
			КонецЕсли;
			
			ОтветФункции.Результат = Истина;
			ОтветФункции.ОписаниеОшибки = ОтветСайта.Message;
			ОтветФункции.Статус = Статус;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветФункции.Статус = "Задача поставлена в очередь на выполнение" ИЛИ ОтветФункции.Статус = "Началось выполнение задачи" Тогда
		ОтветФункции.НуженОбработчикОжидания = Истина;	
	КонецЕсли;
	
	Возврат ОтветФункции;
КонецФункции //(ПолучитьРезультатВыполненияЗадачи)

Функция ПолучитьРезультатВыполненияЗадачиПоМаршрутномуЛисту(МаршрутныйЛист, Планирование = Неопределено) Экспорт
	
	//{{{Добавил Поляков А.С. 17.02.2021
	МаршрутыМЛ = Новый Массив;
	НераспределенныеУзлыМаршрутаМЛ = Новый Массив;
	МашиныМЛ = Новый Массив;
	
	РезультатПланирования = Новый Структура;
	РезультатПланирования.Вставить("Маршруты", МаршрутыМЛ);
	РезультатПланирования.Вставить("НераспределенныеУзлыМаршрута", НераспределенныеУзлыМаршрутаМЛ);
	РезультатПланирования.Вставить("Машины", МашиныМЛ);
	РезультатПланирования.Вставить("Опции", Новый Структура);
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("РезультатПланирования", РезультатПланирования);
	ОтветФункции.Вставить("РезультатВыполненияЗадачи", Новый Структура);
	ОтветФункции.РезультатВыполненияЗадачи.Вставить("ОписаниеОшибки", "");	
	ОтветФункции.РезультатВыполненияЗадачи.Вставить("Статус", "");
	ОтветФункции.РезультатВыполненияЗадачи.Вставить("НуженОбработчикОжидания", Ложь);
	
	//ДАННЫЕ МЛ
	ДанныеМЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаршрутныйЛист, "Автомашина, ЯМ_Планирование");
	СоставМаршрутогоЛиста = ПолучитьСоставМаршрутогоЛиста(МаршрутныйЛист);
	
	Если НЕ ЗначениеЗаполнено(ДанныеМЛ.Автомашина) Тогда
		ОтветФункции.ОписаниеОшибки = "Не указана машина в МЛ";
		Возврат ОтветФункции;	
	КонецЕсли;
	
	ДанныеАвтомашины = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеМЛ.Автомашина, "Наименование, ЯМ_Логин");
	Если ЗначениеЗаполнено(ДанныеАвтомашины.ЯМ_Логин) Тогда
		ИдТранспорта = ДанныеАвтомашины.ЯМ_Логин;	
	Иначе
		ИдТранспорта = ДанныеАвтомашины.Наименование;	
	КонецЕсли;
	
	Если Планирование = Неопределено Тогда
		рПланирование = ДанныеМЛ.ЯМ_Планирование;
	Иначе
		рПланирование = Планирование;	
	КонецЕсли;
	ИдЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(рПланирование, "Код");;
	
	//РЕЗУЛЬТАТ
	ОтветВыполненияЗадачи = ЯндексМаршрутизация.ПолучитьРезультатВыполненияЗадачи(ИдЗадачи);
	ЗаполнитьЗначенияСвойств(ОтветФункции.РезультатВыполненияЗадачи, ОтветВыполненияЗадачи);
	Если ОтветВыполненияЗадачи.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ОтветВыполненияЗадачи.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
	
	//маршруты
	МаршрутыПоЗадаче = ОтветВыполненияЗадачи.РезультатПланирования.Маршруты;
	Для Каждого МаршрутПоЗадаче Из МаршрутыПоЗадаче Цикл
		Если НЕ МаршрутПоЗадаче.КодМашины = ИдТранспорта Тогда
			Продолжить;
		КонецЕсли;
		
		МаршрутыМЛ.Добавить(МаршрутПоЗадаче);
	КонецЦикла;
	
	Для Каждого МаршрутМЛ Из МаршрутыМЛ Цикл
		ЗаполнитьДокументыВМаршрутахAPIПоМаршрутномуЛисту(МаршрутМЛ.УзлыМаршрута, СоставМаршрутогоЛиста);
	КонецЦикла;

	//НераспределенныеУзлыМаршрута
	НераспределенныеУзлыМаршрутаПоЗадаче = ОтветВыполненияЗадачи.РезультатПланирования.НераспределенныеУзлыМаршрута;
	Для Каждого НераспределенныйУзелПоЗадаче Из НераспределенныеУзлыМаршрутаПоЗадаче Цикл
		НераспределенныеУзлыМаршрутаМЛ.Добавить(НераспределенныйУзелПоЗадаче);	
	КонецЦикла;
	ЗаполнитьДокументыВМаршрутахAPIПоМаршрутномуЛисту(НераспределенныеУзлыМаршрутаМЛ, СоставМаршрутогоЛиста);
	
	//Машины
	МашиныПоЗадаче = ОтветВыполненияЗадачи.РезультатПланирования.Машины;
	Для Каждого МашинаПоЗадаче Из МашиныПоЗадаче Цикл
		Если НЕ МашинаПоЗадаче.Код = ИдТранспорта Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПланирования.Машины.Добавить(МашинаПоЗадаче);	
	КонецЦикла;
	
	//опции
	РезультатПланирования.Опции = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтветВыполненияЗадачи.РезультатПланирования.Опции);
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 17.02.2021
	
КонецФункции //(ПолучитьРезультатВыполненияЗадачиПоМаршрутномуЛисту)
	
Функция СформироватьСсылкуНаПросмотрРезультата(ИдЗадачи, ЭтоАРМ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдЗадачи) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЭтоАРМ Тогда
		АдресПросмотраРезультатов = ПолучитьАдресПросмотраРезультатовАРМ();
	Иначе
		АдресПросмотраРезультатов = ПолучитьАдресПросмотраРезультатов();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АдресПросмотраРезультатов) Тогда
		Возврат "";
	КонецЕсли;
	
	СсылкаНаПросмотр = АдресПросмотраРезультатов + ИдЗадачи;
	
	Возврат СсылкаНаПросмотр;
КонецФункции //(СформироватьСсылкуНаПросмотрРезультата)

Функция ПолучитьСписокДочернихЗадач(ИдентификаторРодительскойЗадачи) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("мИдЗадач", Новый Массив);
	
	АпиКлюч = ПолучитьКлючАпи();
	ОтветЗапроса = АПИ_ПолучитьДочерниеЗадачи(АпиКлюч, ИдентификаторРодительскойЗадачи);
	
	Если ЗначениеЗаполнено(ОтветЗапроса.ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОтветЗапроса.ОписаниеОшибки;	
	Иначе
		ОтветСайта = Служебный.РазобратьJSON(ОтветЗапроса.ОтветСайта);
		
		Если ТипЗнч(ОтветСайта) = Тип("Массив") Тогда
			Для Каждого ДочерняяЗадача Из ОтветСайта Цикл
				СтруктураЗадачи = Новый Структура;
				СтруктураЗадачи.Вставить("ИдЗадачи", ДочерняяЗадача.task_id);
				СтруктураЗадачи.Вставить("ВремяЗадачи", ДочерняяЗадача.added_at);
				
				Результат.мИдЗадач.Добавить(СтруктураЗадачи);
			КонецЦикла;
		Иначе
			Результат.ОписаниеОшибки = "Ошибка при отправке запроса! Сообщение сервиса: " + ОтветСайта.error.message;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
	
////РАЗБОР РЕЗУЛЬТАТА ПЛАНИРОВАНИЯ////
Процедура РазобратьРезультатПланирования_Машины(РезультатПланирования, ОтветСайта)
	
	Для Каждого vehicle Из ОтветСайта.result.vehicles Цикл
		Машина = Новый Структура;
		
		Машина.Вставить("Код", vehicle.id);
		Машина.Вставить("Имя", vehicle.ref);
		Машина.Вставить("ИдСклада", vehicle.depot_id);
		Машина.Вставить("РежимМаршрутизации", vehicle.routing_mode);
		Машина.Вставить("СтартСПарковки", Ложь);
		Машина.Вставить("ЗаезжатьНаСкладВНачалеРаботы", Ложь);
		Машина.Вставить("ВозвратНаПарковку", Ложь);
		
		Смены = Новый Массив;
		Для Каждого shift Из vehicle.shifts Цикл
			Смена = Новый Структура;
			Смена.Вставить("Ид", shift.id);
			Смена.Вставить("ВременноеОкно", shift.time_window);
			
			Смены.Добавить(Смена);
		КонецЦикла;
		Машина.Вставить("Смены", Смены);
		
		Если Служебный.СвойствоСуществует(vehicle, "start_at") Тогда
			Машина.СтартСПарковки = Истина; 	
		КонецЕсли;
		
		Если Служебный.СвойствоСуществует(vehicle, "visit_depot_at_start") Тогда
			Машина.ЗаезжатьНаСкладВНачалеРаботы = vehicle.visit_depot_at_start; 	
		КонецЕсли;
				
		Если Служебный.СвойствоСуществует(vehicle, "finish_at") Тогда
			Машина.ВозвратНаПарковку = Истина; 	
		КонецЕсли;
		
		РезультатПланирования.Машины.Добавить(Машина);
	КонецЦикла;
	
КонецПроцедуры //(РазобратьРезультатПланирования_Машины)

Функция РазобратьРезультатПланирования_Маршруты_Парковка(УзелИзФайла, РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 02.04.2021
	УзелМаршрута = Новый Структура;
	УзелМаршрута.Вставить("Документ", Неопределено);
	УзелМаршрута.Вставить("Тип", "парковка");
	УзелМаршрута.Вставить("ЭтоОбъединенныйЗаказ", Ложь);
	
	УзелМаршрута.Вставить("КодУзла", УзелИзФайла.node.value.id);
	УзелМаршрута.Вставить("КодУзлаЗабора", "");	
	
	УзелМаршрута.Вставить("НомерДокумента1С", "");
	УзелМаршрута.Вставить("ТипДокумента1С", "");
	
	УзелМаршрута.Вставить("ПробегВМетрах", УзелИзФайла.transit_distance_m);
	УзелМаршрута.Вставить("ДлительностьВСекундах", УзелИзФайла.transit_duration_s);	
	УзелМаршрута.Вставить("ОжиданиеВСекундах", УзелИзФайла.waiting_duration_s);
		
	УзелМаршрута.Вставить("ВремяПрибытияВСекундах", УзелИзФайла.arrival_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяПрибытияВСекундах);
	КолВоДнейОтНачалаМаршрута = СоставВремени.Дни - 1;
	УзелМаршрута.Вставить("ВремяПрибытия", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяПрибытияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени)); 
	
	УзелМаршрута.Вставить("ВремяОтправленияВСекундах", УзелИзФайла.departure_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяОтправленияВСекундах);
	УзелМаршрута.Вставить("ВремяОтправления", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяОтправленияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени));
	
	//ВремяНаЗаказПлан
	Если ЗначениеЗаполнено(УзелМаршрута.ВремяПрибытия) И ЗначениеЗаполнено(УзелМаршрута.ВремяОтправления) Тогда
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", ОКР(((УзелМаршрута.ВремяОтправления - УзелМаршрута.ВремяПрибытия) / 60) + 0.5, 0, РежимОкругления.Окр15как10));
	Иначе
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", 0);	
	КонецЕсли;
	
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "time_window") Тогда
		ВременноеОкно = УзелИзФайла.node.value.time_window;
		Для Сч = 1 По КолВоДнейОтНачалаМаршрута Цикл
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);	
		КонецЦикла;
		УзелМаршрута.Вставить("ВременноеОкно", ВременноеОкно);
	ИначеЕсли Служебный.СвойствоСуществует(УзелИзФайла.node.value, "time_windows") Тогда 					
		ВременноеОкно = УзелИзФайла.node.value.time_windows[0].time_window;
		Для Сч = 1 По КолВоДнейОтНачалаМаршрута Цикл
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);	
		КонецЦикла;
		УзелМаршрута.Вставить("ВременноеОкно", ВременноеОкно);	
	КонецЕсли;
	УзелМаршрута.Вставить("Широта", УзелИзФайла.node.value.point.lat);
	УзелМаршрута.Вставить("Долгота", УзелИзФайла.node.value.point.lon);
	
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "title") Тогда
		УзелМаршрута.Вставить("НазваниеМеста", УзелИзФайла.node.value.title);
		УзелМаршрута.Вставить("ИмяКлиента", УзелИзФайла.node.value.title);
	Иначе
		УзелМаршрута.Вставить("НазваниеМеста", "");
		УзелМаршрута.Вставить("ИмяКлиента", "");
	КонецЕсли;
	УзелМаршрута.Вставить("НомерКлиента", "");	
		
	УзелМаршрута.Вставить("ОбъемЗаказа", 0);
	УзелМаршрута.Вставить("ВесЗаказа", 0);
	
	УзелМаршрута.Вставить("ВремяОбслуживанияНаАдрес", УзелИзФайла.node.value.shared_service_duration_s);
	УзелМаршрута.Вставить("ВремяОбслуживанияНаЗаказ", УзелИзФайла.node.value.service_duration_s);
	
	Возврат УзелМаршрута;
	//}}}Добавил Поляков А.С. 02.04.2021
	
КонецФункции //(РазобратьРезультатПланирования_Маршруты_Парковка)

Функция РазобратьРезультатПланирования_Маршруты_ДоставкаЗабор(УзелИзФайла, РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 01.04.2021
	УзелМаршрута = Новый Структура;
	УзелМаршрута.Вставить("Документ", Неопределено);
	Если УзелИзФайла.node.value.type = "delivery" Тогда
		УзелМаршрута.Вставить("Тип", "доставка");
	ИначеЕсли УзелИзФайла.node.value.type = "pickup" Тогда
		УзелМаршрута.Вставить("Тип", "забор");
	КонецЕсли;	
	УзелМаршрута.Вставить("КодУзла", УзелИзФайла.node.value.id);
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "pickup_id") Тогда
		УзелМаршрута.Вставить("КодУзлаЗабора", УзелИзФайла.node.value.pickup_id);
	Иначе
		УзелМаршрута.Вставить("КодУзлаЗабора", "");	
	КонецЕсли;
			
	НомерДокумента1С = "";
	ТипДокумента1С = "";
	
	КодУзла = УзелМаршрута.КодУзла;
	КодУзла = СтрЗаменить(КодУзла, "_САМОВЫВОЗ", "");
	КодУзла = СтрЗаменить(КодУзла, "_Доставка", "");
	
	Если _СтрНачинаетсяС(КодУзла, "ЗК_") Тогда
		ПозицияСкобки1 = _СтрНайти(КодУзла, "(");
		ПозицияСкобки2 = _СтрНайти(КодУзла, ")");
		
		Если ПозицияСкобки1 <> 0 И ПозицияСкобки2 <> 0 Тогда
			ТипДокумента1С = "реализация";
			НомерДокумента1С = Сред(КодУзла, ПозицияСкобки1 + 1, ПозицияСкобки2 - ПозицияСкобки1 - 1);
		Иначе
			ТипДокумента1С = "заказ покупателя";
			НомерДокумента1С = КодУзла;
			НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ЗК_", "");
		КонецЕсли;
	ИначеЕсли _СтрНачинаетсяС(КодУзла, "ВК_") Тогда
		ТипДокумента1С = "возврат от покупателя";
		НомерДокумента1С = КодУзла;
		НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ВК_", "");	
	ИначеЕсли _СтрНачинаетсяС(КодУзла, "ЗП_") Тогда
		ТипДокумента1С = "заказ поставщику";
		НомерДокумента1С = КодУзла;
		НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ЗП_", "");
	ИначеЕсли _СтрНачинаетсяС(КодУзла, "ВП_") Тогда
		ТипДокумента1С = "возврат поставщику";
		НомерДокумента1С = КодУзла;
		НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ВП_", "");
	ИначеЕсли _СтрНачинаетсяС(КодУзла, "П_") Тогда
		ТипДокумента1С = "перемещение";
		НомерДокумента1С = КодУзла;
		НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "П_", "");	
	КонецЕсли;
		
	УзелМаршрута.Вставить("НомерДокумента1С", НомерДокумента1С);
	УзелМаршрута.Вставить("ТипДокумента1С", ТипДокумента1С);
	
	УзелМаршрута.Вставить("ПробегВМетрах", УзелИзФайла.transit_distance_m);
	УзелМаршрута.Вставить("ДлительностьВСекундах", УзелИзФайла.transit_duration_s);
	УзелМаршрута.Вставить("ЭтоОбъединенныйЗаказ", УзелИзФайла.multi_order);
	УзелМаршрута.Вставить("ОжиданиеВСекундах", УзелИзФайла.waiting_duration_s);
	УзелМаршрута.Вставить("НазваниеМеста", УзелИзФайла.node.value.title);	
	
	УзелМаршрута.Вставить("ВремяПрибытияВСекундах", УзелИзФайла.arrival_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяПрибытияВСекундах);
	КолВоДнейОтНачалаМаршрута = СоставВремени.Дни - 1;
	УзелМаршрута.Вставить("ВремяПрибытия", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяПрибытияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени)); 
	
	УзелМаршрута.Вставить("ВремяОтправленияВСекундах", УзелИзФайла.departure_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяОтправленияВСекундах);
	УзелМаршрута.Вставить("ВремяОтправления", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяОтправленияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени));
	
	//ВремяНаЗаказПлан
	Если ЗначениеЗаполнено(УзелМаршрута.ВремяПрибытия) И ЗначениеЗаполнено(УзелМаршрута.ВремяОтправления) Тогда
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", ОКР(((УзелМаршрута.ВремяОтправления - УзелМаршрута.ВремяПрибытия) / 60) + 0.5, 0, РежимОкругления.Окр15как10));
	Иначе
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", 0);	
	КонецЕсли;
		
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "time_window") Тогда
		ВременноеОкно = УзелИзФайла.node.value.time_window;
		Для Сч = 1 По КолВоДнейОтНачалаМаршрута Цикл
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);	
		КонецЦикла;
		УзелМаршрута.Вставить("ВременноеОкно", ВременноеОкно);
	ИначеЕсли Служебный.СвойствоСуществует(УзелИзФайла.node.value, "time_windows") Тогда 					
		ВременноеОкно = УзелИзФайла.node.value.time_windows[0].time_window;
		Для Сч = 1 По КолВоДнейОтНачалаМаршрута Цикл
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);	
		КонецЦикла;
		УзелМаршрута.Вставить("ВременноеОкно", ВременноеОкно);	
	КонецЕсли;
	
	УзелМаршрута.Вставить("Широта", УзелИзФайла.node.value.point.lat);
	УзелМаршрута.Вставить("Долгота", УзелИзФайла.node.value.point.lon);
	УзелМаршрута.Вставить("ИмяКлиента", УзелИзФайла.node.value.title);
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "phone") Тогда
		УзелМаршрута.Вставить("НомерКлиента", УзелИзФайла.node.value.phone);
	Иначе
		УзелМаршрута.Вставить("НомерКлиента", "");	
	КонецЕсли;
	УзелМаршрута.Вставить("ВремяОбслуживанияНаАдрес", УзелИзФайла.node.value.shared_service_duration_s);
	УзелМаршрута.Вставить("ОбъемЗаказа", УзелИзФайла.node.value.shipment_size.volume.depth_m);
	УзелМаршрута.Вставить("ВесЗаказа", УзелИзФайла.node.value.shipment_size.weight_kg);
	УзелМаршрута.Вставить("ВремяОбслуживанияНаЗаказ", УзелИзФайла.node.value.service_duration_s);
	
	Возврат УзелМаршрута;
	//}}}Добавил Поляков А.С. 01.04.2021
	
КонецФункции //(РазобратьРезультатПланирования_Маршруты_Доставка)

Функция РазобратьРезультатПланирования_Маршруты_Перерыв(УзелИзФайла, РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 02.04.2021
	УзелМаршрута = Новый Структура;
	УзелМаршрута.Вставить("Документ", Неопределено);
	УзелМаршрута.Вставить("Тип", "перерыв");
	УзелМаршрута.Вставить("ЭтоОбъединенныйЗаказ", Ложь);
	
	УзелМаршрута.Вставить("КодУзла", "");	
	УзелМаршрута.Вставить("КодУзлаЗабора", "");	
		
	УзелМаршрута.Вставить("НомерДокумента1С", "");
	УзелМаршрута.Вставить("ТипДокумента1С", "");
	
	УзелМаршрута.Вставить("ПробегВМетрах", УзелИзФайла.transit_distance_m);
	УзелМаршрута.Вставить("ДлительностьВСекундах", УзелИзФайла.transit_duration_s);	
	УзелМаршрута.Вставить("ОжиданиеВСекундах", УзелИзФайла.waiting_duration_s);
	
	УзелМаршрута.Вставить("ВремяПрибытияВСекундах", УзелИзФайла.arrival_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяПрибытияВСекундах);
	КолВоДнейОтНачалаМаршрута = СоставВремени.Дни - 1;
	УзелМаршрута.Вставить("ВремяПрибытия", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяПрибытияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени)); 
	
	УзелМаршрута.Вставить("ВремяОтправленияВСекундах", УзелИзФайла.departure_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяОтправленияВСекундах);
	УзелМаршрута.Вставить("ВремяОтправления", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяОтправленияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени));
	
	//ВремяНаЗаказПлан
	Если ЗначениеЗаполнено(УзелМаршрута.ВремяПрибытия) И ЗначениеЗаполнено(УзелМаршрута.ВремяОтправления) Тогда
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", ОКР(((УзелМаршрута.ВремяОтправления - УзелМаршрута.ВремяПрибытия) / 60) + 0.5, 0, РежимОкругления.Окр15как10));
	Иначе
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", 0);	
	КонецЕсли;
	
	УзелМаршрута.Вставить("ВременноеОкно", "");
	УзелМаршрута.Вставить("Широта", "");
	УзелМаршрута.Вставить("Долгота", "");
	
	УзелМаршрута.Вставить("НазваниеМеста", "");
	УзелМаршрута.Вставить("ИмяКлиента", "");
	УзелМаршрута.Вставить("НомерКлиента", "");
	
	УзелМаршрута.Вставить("ОбъемЗаказа", 0);
	УзелМаршрута.Вставить("ВесЗаказа", 0);
	
	УзелМаршрута.Вставить("ВремяОбслуживанияНаАдрес", 0);
	УзелМаршрута.Вставить("ВремяОбслуживанияНаЗаказ", 0);
	
	Возврат УзелМаршрута;
	//}}}Добавил Поляков А.С. 02.04.2021
	
КонецФункции //(РазобратьРезультатПланирования_Маршруты_Перерыв)

Функция РазобратьРезультатПланирования_Маршруты_Склад(УзелИзФайла, РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 02.04.2021
	УзелМаршрута = Новый Структура;
	УзелМаршрута.Вставить("Документ", Неопределено);
	УзелМаршрута.Вставить("Тип", "склад");
	УзелМаршрута.Вставить("ЭтоОбъединенныйЗаказ", Ложь);
	
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "id") Тогда
		УзелМаршрута.Вставить("КодУзла", УзелИзФайла.node.value.id);
	КонецЕсли;
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "pickup_id") Тогда
		УзелМаршрута.Вставить("КодУзлаЗабора", УзелИзФайла.node.value.pickup_id);
	Иначе
		УзелМаршрута.Вставить("КодУзлаЗабора", "");	
	КонецЕсли;
	
	УзелМаршрута.Вставить("НомерДокумента1С", "");
	УзелМаршрута.Вставить("ТипДокумента1С", "");
	
	УзелМаршрута.Вставить("ПробегВМетрах", УзелИзФайла.transit_distance_m);
	УзелМаршрута.Вставить("ДлительностьВСекундах", УзелИзФайла.transit_duration_s);
	УзелМаршрута.Вставить("ОжиданиеВСекундах", УзелИзФайла.waiting_duration_s);
		
	УзелМаршрута.Вставить("ВремяПрибытияВСекундах", УзелИзФайла.arrival_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяПрибытияВСекундах);
	КолВоДнейОтНачалаМаршрута = СоставВремени.Дни - 1;
	УзелМаршрута.Вставить("ВремяПрибытия", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяПрибытияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени)); 
	
	УзелМаршрута.Вставить("ВремяОтправленияВСекундах", УзелИзФайла.departure_time_s);
	СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(УзелМаршрута.ВремяОтправленияВСекундах);
	УзелМаршрута.Вставить("ВремяОтправления", Служебный.ПустаяДата() + (РезультатПланирования.Опции.ДатаМаршрута - Служебный.ПустаяДата()) + (СоставВремени.Время - Служебный.ПустаяДата()));
	УзелМаршрута.Вставить("ВремяОтправленияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени));
	
	//ВремяНаЗаказПлан
	Если ЗначениеЗаполнено(УзелМаршрута.ВремяПрибытия) И ЗначениеЗаполнено(УзелМаршрута.ВремяОтправления) Тогда
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", ОКР(((УзелМаршрута.ВремяОтправления - УзелМаршрута.ВремяПрибытия) / 60) + 0.5, 0, РежимОкругления.Окр15как10));
	Иначе
		УзелМаршрута.Вставить("ВремяНаЗаказПлан", 0);	
	КонецЕсли;
	
	Если Служебный.СвойствоСуществует(УзелИзФайла.node.value, "time_window") Тогда
		ВременноеОкно = УзелИзФайла.node.value.time_window;
		Для Сч = 1 По КолВоДнейОтНачалаМаршрута Цикл
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);	
		КонецЦикла;
		УзелМаршрута.Вставить("ВременноеОкно", ВременноеОкно);
	ИначеЕсли Служебный.СвойствоСуществует(УзелИзФайла.node.value, "time_windows") Тогда 					
		ВременноеОкно = УзелИзФайла.node.value.time_windows[0].time_window;
		Для Сч = 1 По КолВоДнейОтНачалаМаршрута Цикл
			ВременноеОкно = МодульЛогистики.ПеренестиВременноеОкноНаСледДень(ВременноеОкно);	
		КонецЦикла;
		УзелМаршрута.Вставить("ВременноеОкно", ВременноеОкно);
	Иначе
		УзелМаршрута.Вставить("ВременноеОкно", "");	
	КонецЕсли;
	
	УзелМаршрута.Вставить("Широта", УзелИзФайла.node.value.point.lat);
	УзелМаршрута.Вставить("Долгота", УзелИзФайла.node.value.point.lon);
	
	УзелМаршрута.Вставить("НазваниеМеста", УзелИзФайла.node.value.ref);
	УзелМаршрута.Вставить("ИмяКлиента", УзелИзФайла.node.value.ref);
	УзелМаршрута.Вставить("НомерКлиента", "");
	
	УзелМаршрута.Вставить("ОбъемЗаказа", 0);
	УзелМаршрута.Вставить("ВесЗаказа", 0);
	
	УзелМаршрута.Вставить("ВремяОбслуживанияНаАдрес", 0);
	УзелМаршрута.Вставить("ВремяОбслуживанияНаЗаказ", УзелИзФайла.node.value.service_duration_s);
	
	Возврат УзелМаршрута;
	//}}}Добавил Поляков А.С. 02.04.2021
	
КонецФункции //(РазобратьРезультатПланирования_Маршруты_Склад)

Процедура РазобратьРезультатПланирования_Маршруты(РезультатПланирования, ОтветСайта)
		
	Для Каждого route Из ОтветСайта.result.routes Цикл
		Маршрут = Новый Структура;
				
		Маршрут.Вставить("КодМашины", route.vehicle_id);
		Маршрут.Вставить("ПробегВМетрах", route.metrics.total_transit_distance_m);
		Маршрут.Вставить("ДлительностьВСекундах", route.metrics.total_global_proximity_duration_s);
		
		УзлыМаршрута = Новый Массив;
		Для Каждого УзелИзФайла Из route.route Цикл
			Если УзелИзФайла.node.type = "depot" Тогда
				УзелМаршрута = РазобратьРезультатПланирования_Маршруты_Склад(УзелИзФайла, РезультатПланирования);
			ИначеЕсли УзелИзФайла.node.type = "location" Тогда 
				Если УзелИзФайла.node.value.type = "delivery" Тогда
					УзелМаршрута = РазобратьРезультатПланирования_Маршруты_ДоставкаЗабор(УзелИзФайла, РезультатПланирования);
				ИначеЕсли УзелИзФайла.node.value.type = "garage" Тогда
					УзелМаршрута = РазобратьРезультатПланирования_Маршруты_Парковка(УзелИзФайла, РезультатПланирования);
				ИначеЕсли УзелИзФайла.node.value.type = "pickup" Тогда
					УзелМаршрута = РазобратьРезультатПланирования_Маршруты_ДоставкаЗабор(УзелИзФайла, РезультатПланирования);
				КонецЕсли;
			ИначеЕсли УзелИзФайла.node.type = "break" Тогда
				УзелМаршрута = РазобратьРезультатПланирования_Маршруты_Перерыв(УзелИзФайла, РезультатПланирования);	
			КонецЕсли;
					
			УзлыМаршрута.Добавить(УзелМаршрута);
		КонецЦикла;
		
		Маршрут.Вставить("УзлыМаршрута", УзлыМаршрута);
		РезультатПланирования.Маршруты.Добавить(Маршрут);
	КонецЦикла;
	
КонецПроцедуры //(РазобратьРезультатПланирования_Маршруты)

Процедура РазобратьРезультатПланирования_НераспределенныеУзлыМаршрута(РезультатПланирования, ОтветСайта)
	
	Для Каждого dropped_locations Из ОтветСайта.result.dropped_locations Цикл
		НераспределенныйУзел = Новый Структура;
		НераспределенныйУзел.Вставить("Документ", Неопределено);
		
		Если dropped_locations.type = "delivery" Тогда
			НераспределенныйУзел.Вставить("Тип", "доставка");	
		ИначеЕсли dropped_locations.type = "garage" Тогда
			НераспределенныйУзел.Вставить("Тип", "парковка");
		ИначеЕсли dropped_locations.type = "pickup" Тогда
			НераспределенныйУзел.Вставить("Тип", "забор");	
		КонецЕсли;
			
		НераспределенныйУзел.Вставить("КодУзла", dropped_locations.id);
		Если Служебный.СвойствоСуществует(dropped_locations, "pickup_id") Тогда
			НераспределенныйУзел.Вставить("КодУзлаЗабора", dropped_locations.pickup_id);
		Иначе
			НераспределенныйУзел.Вставить("КодУзлаЗабора", "");	
		КонецЕсли;
		
		НомерДокумента1С = "";
		ТипДокумента1С = "";
		
		Если НераспределенныйУзел.Тип = "доставка" ИЛИ НераспределенныйУзел.Тип = "забор" Тогда
			КодУзла = НераспределенныйУзел.КодУзла;
			КодУзла = СтрЗаменить(КодУзла, "_САМОВЫВОЗ", "");
			КодУзла = СтрЗаменить(КодУзла, "_Доставка", "");
			
			Если _СтрНачинаетсяС(КодУзла, "ЗК_") Тогда
				ПозицияСкобки1 = _СтрНайти(КодУзла, "(");
				ПозицияСкобки2 = _СтрНайти(КодУзла, ")");
				
				Если ПозицияСкобки1 <> 0 И ПозицияСкобки2 <> 0 Тогда
					ТипДокумента1С = "реализация";
					НомерДокумента1С = Сред(КодУзла, ПозицияСкобки1 + 1, ПозицияСкобки2 - ПозицияСкобки1 - 1);
				Иначе
					ТипДокумента1С = "заказ покупателя";
					НомерДокумента1С = КодУзла;
					НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ЗК_", "");
				КонецЕсли;
			ИначеЕсли _СтрНачинаетсяС(КодУзла, "ВК_") Тогда
				ТипДокумента1С = "возврат от покупателя";
				НомерДокумента1С = КодУзла;
				НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ВК_", "");	
			ИначеЕсли _СтрНачинаетсяС(КодУзла, "ЗП_") Тогда
				ТипДокумента1С = "заказ поставщику";
				НомерДокумента1С = КодУзла;
				НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ЗП_", "");
			ИначеЕсли _СтрНачинаетсяС(КодУзла, "ВП_") Тогда
				ТипДокумента1С = "возврат поставщику";
				НомерДокумента1С = КодУзла;
				НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ВП_", "");
			ИначеЕсли _СтрНачинаетсяС(КодУзла, "П_") Тогда
				ТипДокумента1С = "перемещение";
				НомерДокумента1С = КодУзла;
				НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "П_", "");	
			КонецЕсли;
			
		КонецЕсли;
		НераспределенныйУзел.Вставить("НомерДокумента1С", НомерДокумента1С);
		НераспределенныйУзел.Вставить("ТипДокумента1С", ТипДокумента1С);
		
		НераспределенныйУзел.Вставить("НазваниеМеста", dropped_locations.title);	
		НераспределенныйУзел.Вставить("ОписаниеОшибки", dropped_locations.drop_reason);
		
		РезультатПланирования.НераспределенныеУзлыМаршрута.Добавить(НераспределенныйУзел);
	КонецЦикла;
	
КонецПроцедуры //(РазобратьРезультатПланирования_НераспределенныеУзлыМаршрута)

Процедура РазобратьРезультатПланирования_Опции(РезультатПланирования, ОтветСайта)
	
	РезультатПланирования.Опции.Вставить("ДатаМаршрутаСтрокой", ОтветСайта.result.options.date);
	
	ДатаМаршрутаСтрокойНорм = СтрЗаменить(РезультатПланирования.Опции.ДатаМаршрутаСтрокой, "-", "");
	РезультатПланирования.Опции.Вставить("ДатаМаршрута", Дата(ДатаМаршрутаСтрокойНорм));
	
	РезультатПланирования.Опции.Вставить("РежимМаршрутизации", ОтветСайта.result.options.routing_mode);
		
КонецПроцедуры //(РазобратьРезультатПланирования_Машины)

Процедура РазобратьРезультатПланирования(РезультатПланирования, ОтветСайта)
	
	РазобратьРезультатПланирования_Опции(РезультатПланирования, ОтветСайта);
	РазобратьРезультатПланирования_Машины(РезультатПланирования, ОтветСайта);	
	РазобратьРезультатПланирования_Маршруты(РезультатПланирования, ОтветСайта);
	РазобратьРезультатПланирования_НераспределенныеУзлыМаршрута(РезультатПланирования, ОтветСайта);
	 	
КонецПроцедуры //(РазобратьРезультатПланирования)

////СЛУЖЕБНЫЕ////
Функция ПолучитьАдресЗапросаДочернихЗадач()
	
	Возврат "/vrs/api/v1/children";
	
КонецФункции

Функция ПолучитьАдресЗапросаРезультата()
	
	АдресЗапросаРезультата = Справочники.Константы.ЯМ_АдресЗапросаРезультата.Значение;
	Если НЕ ТипЗнч(АдресЗапросаРезультата) = Тип("Строка") Тогда
		АдресЗапросаРезультата = "";	
	КонецЕсли;
	
	Возврат АдресЗапросаРезультата;
КонецФункции //(ПолучитьАдресЗапросаРезультата)

Функция ПолучитьАдресОтправкиЗапроса()
	
	АдресОтправкиЗапроса = Справочники.Константы.ЯМ_АдресОтправкиЗапроса.Значение;
	Если НЕ ТипЗнч(АдресОтправкиЗапроса) = Тип("Строка") Тогда
		АдресОтправкиЗапроса = "";	
	КонецЕсли;
	
	Возврат АдресОтправкиЗапроса;
КонецФункции //(ПолучитьАдресОтправкиЗапроса)

Функция ПолучитьАдресПросмотраРезультатов()
	
	АдресПросмотраРезультатов = Справочники.Константы.ЯМ_АдресПросмотраРезультатов.Значение;
	Если НЕ ТипЗнч(АдресПросмотраРезультатов) = Тип("Строка") Тогда
		АдресПросмотраРезультатов = "";	
	КонецЕсли;
	
	Возврат АдресПросмотраРезультатов;
КонецФункции //(ПолучитьАдресПросмотраРезультатов)

Функция ПолучитьАдресПросмотраРезультатовАРМ()
	
	АдресПросмотраРезультатов = Справочники.Константы.ЯМ_АдресПросмотраРезультатовАРМ.Значение;
	Если НЕ ТипЗнч(АдресПросмотраРезультатов) = Тип("Строка") Тогда
		АдресПросмотраРезультатов = "";	
	КонецЕсли;
	
	Возврат АдресПросмотраРезультатов;
КонецФункции //(ПолучитьАдресПросмотраРезультатовАРМ)

Функция ПолучитьЧасовойПоясСеанса()
	
	Возврат СмещениеСтандартногоВремени()/3600;
	
КонецФункции //(ПолучитьЧасовойПоясСеанса)

Функция СоздатьТелоЗапросаДляАпи(ДатаНачалаМаршрута, ДатаОкончанияМаршрута, тМаршруты, тМашины, тСклады, тДопОпции)
	
	ТелоЗапроса = Новый Структура;
	
	тДопОпцииНормал = ПодготовитьТаблицуКВыгрузкеВАпи(тДопОпции, "ДопОпции", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	ТелоЗапроса.Вставить("options", тДопОпцииНормал[0]);
	
	тСкладыНормал = ПодготовитьТаблицуКВыгрузкеВАпи(тСклады, "Склады", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	ТелоЗапроса.Вставить("depot", тСкладыНормал[0]);
	
	тМашиныНормал = ПодготовитьТаблицуКВыгрузкеВАпи(тМашины, "Машины", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);	
	ТелоЗапроса.Вставить("vehicles", тМашиныНормал);
	
	//пока интерфейс яндекса не поддерживает временные окна в массиве
	ДлительностьМаршрута = (НачалоДня(ДатаНачалаМаршрута) - НачалоДня(ДатаОкончанияМаршрута)) / (60*60*24);
	
	тМаршрутыНормал = ПодготовитьТаблицуКВыгрузкеВАпи(тМаршруты, "Маршруты", ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	Для Каждого сМаршрутыНормал Из тМаршрутыНормал Цикл		
		Если НЕ Служебный.СвойствоСуществует(сМаршрутыНормал, "delivery_to") Тогда
			Если _СтрНачинаетсяС(сМаршрутыНормал.id, "Парковка") Тогда
				сМаршрутыНормал.Удалить("shipment_size");
			КонецЕсли;
		КонецЕсли;
		
		Если ДлительностьМаршрута = 0 Тогда
			сМаршрутыНормал.Вставить("time_window", сМаршрутыНормал.time_windows[0].time_window);
			сМаршрутыНормал.Удалить("time_windows");
		КонецЕсли;
	КонецЦикла;
	ТелоЗапроса.Вставить("locations", тМаршрутыНормал);
	
	Возврат ТелоЗапроса;
КонецФункции //(СоздатьТелоЗапросаДляАпи)

Функция ПодготовитьТаблицуКВыгрузкеВАпи(Таблица, ВидТаблицы, ДатаНачалаМаршрута, ДатаОкончанияМаршрута)
	
	мДанныхКВыгрузке = Новый Массив;
	
	Если ВидТаблицы = "Маршруты" Тогда
		Колонки = ПолучитьКолонкиМаршрута(ДатаНачалаМаршрута, ДатаОкончанияМаршрута);
	ИначеЕсли ВидТаблицы = "Машины" Тогда
		КоличествоСмен = 1;
		КоличествоПерерывов = (НачалоДня(ДатаОкончанияМаршрута) - НачалоДня(ДатаНачалаМаршрута)) / (60*60*24);
				
		Колонки = ПолучитьКолонкиМашины(КоличествоСмен, КоличествоПерерывов);	
	ИначеЕсли ВидТаблицы = "Склады" Тогда
		Колонки = ПолучитьКолонкиСклады();	
	ИначеЕсли ВидТаблицы = "ДопОпции" Тогда
		Колонки = ПолучитьКолонкиДопОпции();
	КонецЕсли;	
	
	тКолонки = Новый ТаблицаЗначений;
	тКолонки.Колонки.Добавить("Заголовок");
	тКолонки.Колонки.Добавить("ИмяЛатиницей");
	тКолонки.Колонки.Добавить("Порядок");
	тКолонки.Колонки.Добавить("Ключ");
	
	Для Каждого эКолонка Из Колонки Цикл
		сКолонки = тКолонки.Добавить();
		сКолонки.Заголовок = эКолонка.Значение.Заголовок;
		сКолонки.ИмяЛатиницей = эКолонка.Значение.ИмяЛатиницей;
		сКолонки.Порядок = эКолонка.Значение.Порядок;
		сКолонки.Ключ = эКолонка.Ключ;
	КонецЦикла;
	
	тКолонки.Сортировать("Ключ Возр");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтруктураЭлементаТаблицы = Новый Структура;
		
		Для Каждого сКолонки Из тКолонки Цикл
			
			Если сКолонки.Порядок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если сКолонки.ИмяЛатиницей = "address" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеКолонки = СтрокаТаблицы[сКолонки.Ключ];
			Если НЕ ЗначениеЗаполнено(ЗначениеКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяЛатиницей = сКолонки.ИмяЛатиницей;
			мКолонок = _СтрРазделить(ИмяЛатиницей, ".");
			//максимум может быть пять вложений
			
			КолВоКолонок = мКолонок.Количество();
			Если КолВоКолонок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//вложение 1
			ИмяКолонкиУровень1 = мКолонок[0];
			Если НЕ Служебный.СвойствоСуществует(СтруктураЭлементаТаблицы, ИмяКолонкиУровень1) Тогда 
				Если КолВоКолонок = 1 Тогда
					СтруктураЭлементаТаблицы.Вставить(ИмяКолонкиУровень1, ЗначениеКолонки);
					Продолжить;
				Иначе
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[1]) Тогда
						СтруктураЭлементаТаблицы.Вставить(ИмяКолонкиУровень1, Новый Массив);	
					Иначе	
						СтруктураЭлементаТаблицы.Вставить(ИмяКолонкиУровень1, Новый Структура);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			//вложение 2
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[1]) Тогда 
				ИмяКолонкиУровень2 = Число(мКолонок[1]);
				КолВоМассив = СтруктураЭлементаТаблицы[ИмяКолонкиУровень1].Количество() - 1;
				Если ИмяКолонкиУровень2 > КолВоМассив Тогда
					СтруктураЭлементаТаблицы[ИмяКолонкиУровень1].Добавить(Новый Структура);	
				КонецЕсли;
			Иначе
				ИмяКолонкиУровень2 = мКолонок[1];
				Если НЕ Служебный.СвойствоСуществует(СтруктураЭлементаТаблицы[ИмяКолонкиУровень1], ИмяКолонкиУровень2) Тогда
					Если КолВоКолонок = 2 Тогда
						СтруктураЭлементаТаблицы[ИмяКолонкиУровень1].Вставить(ИмяКолонкиУровень2, ЗначениеКолонки);
						Продолжить;
					Иначе						
						Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[2]) Тогда
							СтруктураЭлементаТаблицы[ИмяКолонкиУровень1].Вставить(ИмяКолонкиУровень2, Новый Массив);	
						Иначе	
							СтруктураЭлементаТаблицы[ИмяКолонкиУровень1].Вставить(ИмяКолонкиУровень2, Новый Структура);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			//вложение 3
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[2]) Тогда 
				ИмяКолонкиУровень3 = Число(мКолонок[2]);
				КолВоМассив = СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2].Количество() - 1;
				Если ИмяКолонкиУровень3 > КолВоМассив Тогда
					СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2].Добавить(Новый Структура);	
				КонецЕсли;
			Иначе
				ИмяКолонкиУровень3 = мКолонок[2];
				Если НЕ Служебный.СвойствоСуществует(СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2], ИмяКолонкиУровень3) Тогда
					Если КолВоКолонок = 3 Тогда
						СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2].Вставить(ИмяКолонкиУровень3, ЗначениеКолонки);
						Продолжить;
					Иначе						
						Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[3]) Тогда
							СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2].Вставить(ИмяКолонкиУровень3, Новый Массив);	
						Иначе	
							СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2].Вставить(ИмяКолонкиУровень3, Новый Структура);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			//вложение 4
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[3]) Тогда 
				ИмяКолонкиУровень4 = Число(мКолонок[3]);
				КолВоМассив = СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3].Количество() - 1;
				Если ИмяКолонкиУровень4 > КолВоМассив Тогда
					СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3].Добавить(Новый Структура);	
				КонецЕсли;
			Иначе
				ИмяКолонкиУровень4 = мКолонок[3];
				Если НЕ Служебный.СвойствоСуществует(СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3], ИмяКолонкиУровень4) Тогда
					Если КолВоКолонок = 4 Тогда
						СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3].Вставить(ИмяКолонкиУровень4, ЗначениеКолонки);
						Продолжить;
					Иначе						
						Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(мКолонок[4]) Тогда
							СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3].Вставить(ИмяКолонкиУровень4, Новый Массив);	
						Иначе	
							СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3].Вставить(ИмяКолонкиУровень4, Новый Структура);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			//вложение 5
			ИмяКолонкиУровень5 = мКолонок[4];
			Если НЕ Служебный.СвойствоСуществует(СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3][ИмяКолонкиУровень4], ИмяКолонкиУровень5) Тогда
				СтруктураЭлементаТаблицы[ИмяКолонкиУровень1][ИмяКолонкиУровень2][ИмяКолонкиУровень3][ИмяКолонкиУровень4].Вставить(ИмяКолонкиУровень5, ЗначениеКолонки);
			КонецЕсли;
				
		КонецЦикла;
		
		мДанныхКВыгрузке.Добавить(СтруктураЭлементаТаблицы);
	КонецЦикла;

	Возврат мДанныхКВыгрузке;	
КонецФункции //(ПодготовитьТаблицуКВыгрузкеВАпи)

#КонецОбласти

/////////////////////////////////////
/////////	  МОНИТОРИНГ	/////////
/////////////////////////////////////

#Область МетодыAPI

//////////////////////////////////
//// РАБОТА С УЗЛАМИ МАРШРУТА ////
//////////////////////////////////

// Функция - получиет информацию о качестве доставки
//
// Параметры:
//  ДатаВыполненияЗаказаСтрокой - Строка	- Дата выполнения заказа, в формате YYYY-MM-DD.
//  ИдСклада			 		- Число		- ID склада, с которого будет начинаться маршрут. Минимальное значение: 1
//  СписокТиповТочек	 		- Строка	- Список типов точек через запятую, которые будут участвовать в отчёте. Доступные типы - "order", "depot", "garage". По умолчанию "order".
// 
// Возвращаемое значение:
//  авыа - 1234
// Ссылка на документацию:
// https://yandex.ru/routing/doc/delivery/ref/courier_report/getsDeliveryQualityInformation.html
//
Функция АПИ_ПолучаетИнформациюОКачествеДоставки_Мониторинг(ДатаВыполненияЗаказаСтрокой, ИдСклада, СписокТиповТочек)
	
	//{{{Добавил Поляков А.С. 26.01.2021
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса =  "/api/v1/companies/{company_id}/courier-quality";
	АдресРесурса = СтрЗаменить(АдресРесурса, "{company_id}", ПолучитьИдКомпанииВМониторинге());
	
	АдресРесурса = АдресРесурса + "?date=" + ДатаВыполненияЗаказаСтрокой;
	АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(ИдСклада), "&depot_id=" + ИдСклада, "");  
	АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(СписокТиповТочек), "&types=" + СписокТиповТочек, "");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization",	ПолучитьТокенДляМониторинга());
		
	// GET ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 401 Тогда
		Результат.ОписаниеОшибки = "Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.";	
	ИначеЕсли КодСостояния = 422 Тогда
		Результат.ОписаниеОшибки = "Неверный ввод. Операция не может быть выполнена.";
	ИначеЕсли КодСостояния = 200 Тогда
		//всё норм.	
	Иначе
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";	
	КонецЕсли;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();			
	Возврат Результат;
	//}}}Добавил Поляков А.С. 26.01.2021
	
КонецФункции //(АПИ_ПолучаетИнформациюОКачествеДоставки_Мониторинг)

// Функция - получает несколько заказов
//
// Параметры:
//  ИдентификаторМаршрута	 - Строка - ID маршрута, используемый в запросах к API Курьерского решения. Минимальное значение: 1
//  НомерЗаказа				 - Строка - Уникальный номер заказа, совпадающий с номером в базе данных компании, выполняющей доставку.
//  СписокТиповТочек		 - Строка - Список типов точек через запятую. Доступные типы - "order", "depot", "garage". По умолчанию "order".
// 
// Возвращаемое значение:
//   - 
// Ссылка на документацию:
// https://yandex.ru/routing/doc/delivery/ref/orders/getsMultipleOrders.html
//
Функция АПИ_ПолучаетНесколькоЗаказов_Мониторинг(ИдентификаторМаршрута, НомерЗаказа, СписокТиповТочек)
	
	//{{{Добавил Поляков А.С. 15.02.2021
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса =  "/api/v1/companies/{company_id}/orders";
	АдресРесурса = СтрЗаменить(АдресРесурса, "{company_id}", ПолучитьИдКомпанииВМониторинге());
	
	АдресРесурса = АдресРесурса + "?route_id=" + СтрЗаменить(ИдентификаторМаршрута, Символы.НПП, "");
	АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(НомерЗаказа), "&number=" + НомерЗаказа, "");
	АдресРесурса = АдресРесурса + ?(ЗначениеЗаполнено(СписокТиповТочек), "&types=" + СписокТиповТочек, "");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization",	ПолучитьТокенДляМониторинга());

	// GET ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 401 Тогда
		Результат.ОписаниеОшибки = "Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.";	
	ИначеЕсли КодСостояния = 403 Тогда
		Результат.ОписаниеОшибки = "У вас нет доступа к этому объекту.";
	ИначеЕсли КодСостояния = 404 Тогда
		Результат.ОписаниеОшибки = "Указанного route_id не существует.";	
	ИначеЕсли КодСостояния = 422 Тогда
		Результат.ОписаниеОшибки = "Неверный ввод. Операция не может быть выполнена.";
	ИначеЕсли КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = "Ошибка при работе с API. Повторите запрос.";
	ИначеЕсли КодСостояния = 200 Тогда
		//всё норм.	
	Иначе
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";	
	КонецЕсли;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();				
	Возврат Результат;
	//}}}Добавил Поляков А.С. 15.02.2021
	
КонецФункции //(АПИ_ПолучаетНесколькоЗаказов_Мониторинг)

////////////////////////////
//// РАБОТА С МАРШРУТОМ ////
////////////////////////////

// Функция - получает несколько маршрутов
//
// Параметры:
//  НомерМаршрутаВМониторинге	 - Строка	 - Уникальный номер маршрута, совпадающий с номером в базе данных компании, выполняющей доставку.
//  ДатаСтрокой					 - Строка	 - Дата доставки заказа в формате YYYY-MM-DD.
//  ИдСклада					 - Число	 - ID склада, используемый в запросах к API Курьерского решения. Минимальное значение: 1
// 
// Возвращаемое значение:
//   - 
// Ссылка на документацию:
// https://yandex.ru/routing/doc/delivery/ref/routes/getsMultipleRoutes.html
//
Функция АПИ_ПолучаетНесколькоМаршрутов_Мониторинг(НомерМаршрутаВМониторинге, ДатаСтрокой, ИдСклада)
	
	//{{{Добавил Поляков А.С. 31.03.2021
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса = "api/v1/companies/{company_id}/routes";
	АдресРесурса = СтрЗаменить(АдресРесурса, "{company_id}", ПолучитьИдКомпанииВМониторинге());
	
	мПараметровЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(НомерМаршрутаВМониторинге) Тогда
		мПараметровЗапроса.Добавить("number=" + НомерМаршрутаВМониторинге);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаСтрокой) Тогда
		мПараметровЗапроса.Добавить("date=" + ДатаСтрокой);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдСклада) Тогда
		мПараметровЗапроса.Добавить("depot_id=" + СтрЗаменить(ИдСклада, Символы.НПП, ""));
	КонецЕсли;
	
	Если мПараметровЗапроса.Количество() > 0 Тогда
		АдресРесурса = АдресРесурса + "?" + _СтрСоединить(мПараметровЗапроса, "&");	
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization",	ПолучитьТокенДляМониторинга());
	
	// GET ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 401 Тогда
		Результат.ОписаниеОшибки = "Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.";	
	ИначеЕсли КодСостояния = 422 Тогда
		Результат.ОписаниеОшибки = "Неверный ввод. Операция не может быть выполнена.";
	ИначеЕсли КодСостояния = 403 Тогда
		Результат.ОписаниеОшибки = "У вас нет доступа к этому объекту.";	
	ИначеЕсли КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = "Ошибка при работе с API. Повторите запрос.";
	ИначеЕсли КодСостояния = 200 Тогда
		//всё норм.	
	Иначе
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";	
	КонецЕсли;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();
	Возврат Результат;
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(АПИ_ПолучаетНесколькоМаршрутов_Мониторинг)

// Функция - редактирует несколько маршрутов
//
// Параметры:
//  ТекстТелаЗапроса - Строка - Тело POST запроса.
// 
// Возвращаемое значение:
//   - 
// Ссылка на документацию:
// https://yandex.ru/routing/doc/delivery/ref/routes/editsRoute.html
//
Функция АПИ_РедактируетНесколькоМаршрутов_Мониторинг(ТекстТелаЗапроса)
	
	//{{{Добавил Поляков А.С. 29.03.2021
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса = "api/v1/companies/{company_id}/routes-batch";
	АдресРесурса = СтрЗаменить(АдресРесурса, "{company_id}", ПолучитьИдКомпанииВМониторинге());
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization",	ПолучитьТокенДляМониторинга());
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	// POST ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 401 Тогда
		Результат.ОписаниеОшибки = "Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.";	
	ИначеЕсли КодСостояния = 403 Тогда
		Результат.ОписаниеОшибки = "Ошибка доступа к объекту. У пользователя недостаточно прав для доступа к объекту.";
	ИначеЕсли КодСостояния = 404 Тогда
		Результат.ОписаниеОшибки = "Ошибка поиска объекта. Объект не найден.";	
	ИначеЕсли КодСостояния = 422 Тогда
		Результат.ОписаниеОшибки = "Неверный ввод. Операция не может быть выполнена.";
	ИначеЕсли КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = "Ошибка при работе с API. Повторите запрос.";
	ИначеЕсли КодСостояния = 200 Тогда
		//всё норм.	
	Иначе
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";	
	КонецЕсли;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();
	Возврат Результат;
	//}}}Добавил Поляков А.С. 29.03.2021
	
КонецФункции //(АПИ_РедактируетНесколькоМаршрутов_Мониторинг)

// Функция - задает узлы маршрута и их последовательность
//
// Параметры:
//  ИдМаршрутаВМониторинге	 - Число	- ID маршрута, используемый в запросах к API Курьерского решения.
//  ТекстТелаЗапроса		 - Строка 	- Тело POST запроса. 
// 
// Возвращаемое значение:
//   - 
// Ссылка на документацию:
// https://yandex.ru/routing/doc/delivery/ref/routes/setsRouteNodesAndTheirSequenceInTheRoute.html
//
Функция АПИ_ЗадаетУзлыМаршрутаИИхПоследовательность_Мониторинг(ИдМаршрутаВМониторинге, ТекстТелаЗапроса)
	
	//{{{Добавил Поляков А.С. 30.03.2021
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса = "/api/v1/companies/{company_id}/routes/{route_id}/nodes";
	АдресРесурса = СтрЗаменить(АдресРесурса, "{company_id}", ПолучитьИдКомпанииВМониторинге());
	АдресРесурса = СтрЗаменить(АдресРесурса, "{route_id}", СтрЗаменить(ИдМаршрутаВМониторинге, Символы.НПП, ""));
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization",	ПолучитьТокенДляМониторинга());
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	// POST ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 401 Тогда
		Результат.ОписаниеОшибки = "Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.";	
	ИначеЕсли КодСостояния = 422 Тогда
		Результат.ОписаниеОшибки = "Неверный ввод. Операция не может быть выполнена.";
	ИначеЕсли КодСостояния = 404 Тогда
		Результат.ОписаниеОшибки = "Маршрут не найден.";	
	ИначеЕсли КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = "Ошибка при работе с API. Повторите запрос.";
	ИначеЕсли КодСостояния = 200 Тогда
		//всё норм.	
	Иначе
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";	
	КонецЕсли;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат Результат;
	//}}}Добавил Поляков А.С. 30.03.2021
	
КонецФункции //(АПИ_ЗадаетУзлыМаршрутаИИхПоследовательность_Мониторинг)

////////////////////////////
//// РАБОТА С КУРЬЕРАМИ ////
////////////////////////////

// Функция - АПИ редактирует нескольких курьеров мониторинг
//
// Параметры:
//  ТекстТелаЗапроса - Строка - Тело POST запроса.
// 
// Возвращаемое значение:
//   - 
// Ссылка на документацию:
// https://yandex.ru/routing/doc/delivery/ref/couriers/editsMultipleMobileEmployees.html
//
Функция АПИ_РедактируетНесколькихКурьеров_Мониторинг(ТекстТелаЗапроса)
	
	//{{{Добавил Поляков А.С. 31.03.2021
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	АдресРесурса = "api/v1/companies/{company_id}/couriers-batch";
	АдресРесурса = СтрЗаменить(АдресРесурса, "{company_id}", ПолучитьИдКомпанииВМониторинге());
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Accept",			"application/json");
	HTTPЗапрос.Заголовки.Вставить("Authorization",	ПолучитьТокенДляМониторинга());
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	// POST ЗАПРОС ////
	Сервер = ПолучитьАдресСервиса();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.ОписаниеОшибки = "Ошибка при отправке запроса!. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 401 Тогда
		Результат.ОписаниеОшибки = "Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.";	
	ИначеЕсли КодСостояния = 403 Тогда
		Результат.ОписаниеОшибки = "Ошибка доступа к объекту. У пользователя недостаточно прав для доступа к объекту.";
	ИначеЕсли КодСостояния = 404 Тогда
		Результат.ОписаниеОшибки = "Ошибка поиска объекта. Объект не найден.";	
	ИначеЕсли КодСостояния = 422 Тогда
		Результат.ОписаниеОшибки = "Неверный ввод. Операция не может быть выполнена.";
	ИначеЕсли КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = "Ошибка при работе с API. Повторите запрос.";
	ИначеЕсли КодСостояния = 200 Тогда
		//всё норм.	
	Иначе
		Результат.ОписаниеОшибки = "Ошибка сервера при обработке запроса";	
	КонецЕсли;
	
	Результат.ОтветСайта = HTTPОтвет.ПолучитьТелоКакСтроку();
	Возврат Результат;
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(АПИ_РедактируетНесколькихКурьеров_Мониторинг)

#КонецОбласти

#Область ПрикладныеМетоды

////////////////////////////////////////
//// ИНФОРМАЦИЯ О КАЧЕСТВЕ ДОСТАВКИ ////
////////////////////////////////////////

Функция ПолучитьИнформациюОКачествеДоставки(ДатаВыполненияЗаказа, Склад = Неопределено, СписокТиповТочек = "order") Экспорт
	
	//{{{Добавил Поляков А.С. 15.02.2021
	ИнформацияОКачествеДоставки = Новый Массив;
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ИнформацияОКачествеДоставки", ИнформацияОКачествеДоставки);
	
	ДатаВыполненияЗаказаСтрокой = Формат(ДатаВыполненияЗаказа, "ДФ='гггг-ММ-дд'");
	Если ЗначениеЗаполнено(Склад) Тогда
		ИдСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Код");
	Иначе
		ИдСклада = "";	
	КонецЕсли;
	
	ОтветЗапроса = АПИ_ПолучаетИнформациюОКачествеДоставки_Мониторинг(ДатаВыполненияЗаказаСтрокой, ИдСклада, СписокТиповТочек);
	Если ЗначениеЗаполнено(ОтветЗапроса.ОписаниеОшибки) Тогда
		ОтветФункции.ОписаниеОшибки = ОтветЗапроса.ОписаниеОшибки;	
	Иначе
		ОтветСайта = Служебный.РазобратьJSON(ОтветЗапроса.ОтветСайта);
		
		Если ТипЗнч(ОтветСайта) = Тип("Структура") Тогда
			ОтветФункции.ОписаниеОшибки = ОтветСайта.message;
		ИначеЕсли ТипЗнч(ОтветСайта) = Тип("Массив") Тогда
			РазобратьРезультатОКачествеДоставки(ИнформацияОКачествеДоставки, ОтветСайта);		
		Иначе
			ОтветФункции.ОписаниеОшибки = "некорректный ответ";	
		КонецЕсли;	
	КонецЕсли;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;	
	//}}}Добавил Поляков А.С. 15.02.2021
	
КонецФункции //(ПолучитьИнформациюОКачествеДоставки)

Функция ПолучитьИнформациюОКачествеДоставкиПоМаршрутномуЛисту(МаршрутныйЛист) Экспорт
	
	//{{{Добавил Поляков А.С. 16.02.2021
	ИнформацияОКачествеДоставкиМЛ = Новый Массив;
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ИнформацияОКачествеДоставки", ИнформацияОКачествеДоставкиМЛ);	
	
	//данные МЛ
	ДанныеМЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаршрутныйЛист, "ЯМ_Планирование, Автомашина");
	ДанныеАвтомашины = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеМЛ.Автомашина, "Наименование, ЯМ_Логин");
	Если ЗначениеЗаполнено(ДанныеАвтомашины.ЯМ_Логин) Тогда
		ИдТранспорта = ДанныеАвтомашины.ЯМ_Логин;	
	Иначе
		ИдТранспорта = ДанныеАвтомашины.Наименование;	
	КонецЕсли;
	
	ДанныеДоставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеМЛ.ЯМ_Планирование, "ДатаНачалаМаршрута, ДатаОкончанияМаршрута");
	ДатаДоставки = НачалоДня(ДанныеДоставки.ДатаНачалаМаршрута);
	НачалоПериода = ДанныеДоставки.ДатаНачалаМаршрута;
	ОкончаниеПериода = ДанныеДоставки.ДатаОкончанияМаршрута;
	
	//РЕЗУЛЬТАТ
	Пока НачалоПериода < ОкончаниеПериода Цикл
		ОтветМониторинга = ПолучитьИнформациюОКачествеДоставки(НачалоПериода);
		Если ОтветМониторинга.Результат Тогда
			Для Каждого СтрокаДоставки Из ОтветМониторинга.ИнформацияОКачествеДоставки Цикл
				Если СтрокаДоставки.КодКурьера = ИдТранспорта Тогда										
					ИнформацияОКачествеДоставкиМЛ.Добавить(СтрокаДоставки);	
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОтветФункции.ОписаниеОшибки = ОтветМониторинга.ОписаниеОшибки;
			Прервать;
		КонецЕсли;
		
		НачалоПериода = НачалоПериода + Служебный.ДниВСекундах();
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтветФункции.ОписаниеОшибки) Тогда
		ИнформацияОКачествеДоставкиМЛ.Очистить();
		Возврат ОтветФункции;
	КонецЕсли;
	
	СоставМаршрутогоЛиста = ПолучитьСоставМаршрутогоЛиста(МаршрутныйЛист);
	ЗаполнитьДокументыВМаршрутахAPIПоМаршрутномуЛисту(ИнформацияОКачествеДоставкиМЛ, СоставМаршрутогоЛиста);
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 16.02.2021
	
КонецФункции //(ПолучитьИнформациюОКачествеДоставкиПоМаршрутномуЛисту)

Функция РазобратьРезультатОКачествеДоставки(ИнформацияОКачествеДоставки, ОтветСайта)
	
	//{{{Добавил Поляков А.С. 16.02.2021
	Для Каждого СтрокаОтветСайт Из ОтветСайта Цикл
		СтрокаЗаказБаза = Новый Структура;
		СтрокаЗаказБаза.Вставить("Документ", Неопределено);
		
		КодУзла = СтрокаОтветСайт.order_number;
		КодУзла = СтрЗаменить(КодУзла, "_САМОВЫВОЗ", "");
		КодУзла = СтрЗаменить(КодУзла, "_Доставка", "");
		
		НомерМаршрутаВМониторинге = СтрокаОтветСайт.route_number;
		ПозицияРазделителя =  _СтрНайти(НомерМаршрутаВМониторинге, "_");
		Если ПозицияРазделителя > 0 Тогда
			НомерМаршрута = Лев(НомерМаршрутаВМониторинге, ПозицияРазделителя - 1);
			КодУзла = СтрЗаменить(КодУзла, "_" + НомерМаршрута, "");
		КонецЕсли;
		
		Если _СтрНачинаетсяС(КодУзла, "ЗК_") Тогда
			ПозицияСкобки1 = _СтрНайти(КодУзла, "(");
			ПозицияСкобки2 = _СтрНайти(КодУзла, ")");
			
			Если ПозицияСкобки1 <> 0 И ПозицияСкобки2 <> 0 Тогда
				ТипДокумента1С = "реализация";
				НомерДокумента1С = Сред(КодУзла, ПозицияСкобки1 + 1, ПозицияСкобки2 - ПозицияСкобки1 - 1);
			Иначе
				ТипДокумента1С = "заказ покупателя";
				НомерДокумента1С = КодУзла;
				НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ЗК_", "");
			КонецЕсли;
		ИначеЕсли _СтрНачинаетсяС(КодУзла, "ВК_") Тогда
			ТипДокумента1С = "возврат от покупателя";
			НомерДокумента1С = КодУзла;
			НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ВК_", "");	
		ИначеЕсли _СтрНачинаетсяС(КодУзла, "ЗП_") Тогда
			ТипДокумента1С = "заказ поставщику";
			НомерДокумента1С = КодУзла;
			НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ЗП_", "");
		ИначеЕсли _СтрНачинаетсяС(КодУзла, "ВП_") Тогда
			ТипДокумента1С = "возврат поставщику";
			НомерДокумента1С = КодУзла;
			НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "ВП_", "");
		ИначеЕсли _СтрНачинаетсяС(КодУзла, "П_") Тогда
			ТипДокумента1С = "перемещение";
			НомерДокумента1С = КодУзла;
			НомерДокумента1С = СтрЗаменить(НомерДокумента1С, "П_", "");	
		КонецЕсли;
		
		СтрокаЗаказБаза.Вставить("НомерДокумента1С", НомерДокумента1С);
		СтрокаЗаказБаза.Вставить("ТипДокумента1С", ТипДокумента1С);
		
		СтрокаЗаказБаза.Вставить("ТекущийСтатусЗаказа", СтрокаОтветСайт.order_status);
		СтрокаЗаказБаза.Вставить("НомерМаршрута", СтрокаОтветСайт.route_number);   
		СтрокаЗаказБаза.Вставить("Тип", СтрокаОтветСайт.type);
		СтрокаЗаказБаза.Вставить("ИмяЗаказчика", СтрокаОтветСайт.customer_name);
		СтрокаЗаказБаза.Вставить("ИмяКурьера", СтрокаОтветСайт.courier_name);
		СтрокаЗаказБаза.Вставить("КодКурьера", СтрокаОтветСайт.courier_number);
		СтрокаЗаказБаза.Вставить("КодСклада", СтрокаОтветСайт.depot_number);
		СтрокаЗаказБаза.Вставить("ВыполненаВНезапланированномПорядке", СтрокаОтветСайт.not_in_order);
		
		//Указано в формате ISO 8601
		Если ЗначениеЗаполнено(СтрокаОтветСайт.order_visited_at) Тогда
			ВремяВизитаСтрокой = Сред(СтрокаОтветСайт.order_visited_at, 1, СтрДлина(СтрокаОтветСайт.order_visited_at) - 6);
			СтрокаЗаказБаза.Вставить("ВремяВизита", XMLЗначение(Тип("Дата"), ВремяВизитаСтрокой));
			СтрокаЗаказБаза.Вставить("ЧасовойПояс", Прав(СтрокаОтветСайт.order_visited_at, 6));
		Иначе
			СтрокаЗаказБаза.Вставить("ВремяВизита", Служебный.ПустаяДата());
			СтрокаЗаказБаза.Вставить("ЧасовойПояс", "");
		КонецЕсли;
		
		//Указано в формате ISO 8601
		Если ЗначениеЗаполнено(СтрокаОтветСайт.left_at) Тогда
			ВремяУбытияСтрокой = Сред(СтрокаОтветСайт.left_at, 1, СтрДлина(СтрокаОтветСайт.left_at) - 6);
			СтрокаЗаказБаза.Вставить("ВремяУбытия", XMLЗначение(Тип("Дата"), ВремяУбытияСтрокой));
			СтрокаЗаказБаза.Вставить("ЧасовойПоясУбытия", Прав(СтрокаОтветСайт.left_at, 6));	
		Иначе
			СтрокаЗаказБаза.Вставить("ВремяУбытия", Служебный.ПустаяДата());
			СтрокаЗаказБаза.Вставить("ЧасовойПоясУбытия", "");	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗаказБаза.ВремяВизита) ИЛИ НЕ ЗначениеЗаполнено(СтрокаЗаказБаза.ВремяУбытия) Тогда
			Если ЗначениеЗаполнено(СтрокаОтветСайт.order_completed_at) Тогда
				ВремяЗавершенияСтрокой = Сред(СтрокаОтветСайт.order_completed_at, 1, СтрДлина(СтрокаОтветСайт.order_completed_at) - 6);
				СтрокаЗаказБаза.Вставить("ВремяВизита", XMLЗначение(Тип("Дата"), ВремяЗавершенияСтрокой));
				СтрокаЗаказБаза.Вставить("ВремяУбытия", XMLЗначение(Тип("Дата"), ВремяЗавершенияСтрокой));
			КонецЕсли;
		КонецЕсли;
		
		//Дата маршрута, в формате YYYY-MM-DD.
		ДатаМаршрутаСтрокой = СтрЗаменить(СтрокаОтветСайт.route_date, "-", "");
		СтрокаЗаказБаза.Вставить("ДатаМаршрута", Дата(ДатаМаршрутаСтрокой));
				
		//ВремяПрибытия
		Если ЗначениеЗаполнено(СтрокаЗаказБаза.ВремяВизита) Тогда
			СтрокаЗаказБаза.Вставить("ВремяВизитаВСекундах", СтрокаЗаказБаза.ВремяВизита - СтрокаЗаказБаза.ДатаМаршрута);
			
			СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(СтрокаЗаказБаза.ВремяВизитаВСекундах);
			СтрокаЗаказБаза.Вставить("ВремяВизитаСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени));
		Иначе
			СтрокаЗаказБаза.Вставить("ВремяВизитаВСекундах", 0);
			СтрокаЗаказБаза.Вставить("ВремяВизитаСтрокой", "");
		КонецЕсли;
		
		//ВремяУбытия
		Если ЗначениеЗаполнено(СтрокаЗаказБаза.ВремяУбытия) Тогда
			СтрокаЗаказБаза.Вставить("ВремяУбытияВСекундах", СтрокаЗаказБаза.ВремяУбытия - СтрокаЗаказБаза.ДатаМаршрута);
			
			СоставВремени = Служебный.ПолучитьСоставВремениИзДатыСекунд(СтрокаЗаказБаза.ВремяУбытияВСекундах);
			СтрокаЗаказБаза.Вставить("ВремяУбытияСтрокой", СформироватьВремяПрибытияИзСоставаВремени(СоставВремени));
		Иначе
			СтрокаЗаказБаза.Вставить("ВремяУбытияВСекундах", 0);
			СтрокаЗаказБаза.Вставить("ВремяУбытияСтрокой", "");
		КонецЕсли;
		
		//ВремяНаЗаказФакт
		Если ЗначениеЗаполнено(СтрокаЗаказБаза.ВремяВизита) И ЗначениеЗаполнено(СтрокаЗаказБаза.ВремяУбытия) Тогда
			СтрокаЗаказБаза.Вставить("ВремяНаЗаказФакт", ОКР(((СтрокаЗаказБаза.ВремяУбытия - СтрокаЗаказБаза.ВремяВизита) / 60) + 0.5, 0, РежимОкругления.Окр15как10));
		Иначе
			СтрокаЗаказБаза.Вставить("ВремяНаЗаказФакт", 0);
		КонецЕсли;
										
		ИнформацияОКачествеДоставки.Добавить(СтрокаЗаказБаза);
	КонецЦикла;
	//}}}Добавил Поляков А.С. 16.02.2021
	
КонецФункции //(РазобратьРезультатОКачествеДоставки)

////////////////////////////////////////////
//// ВЫГРУЗКА ПЛАНИРОВАНИЯ В МОНИТОРИНГ ////
////////////////////////////////////////////

Функция ВыгрузитьПланированиеВМониторинг(МаршрутныйЛист, Планирование = Неопределено) Экспорт
	
	//{{{Добавил Поляков А.С. 29.03.2021
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
			
	ОтветПланирования = ПолучитьРезультатВыполненияЗадачиПоМаршрутномуЛисту(МаршрутныйЛист, Планирование);
	Если ОтветПланирования.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ОтветПланирования.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
	
	Если ОтветПланирования.РезультатПланирования.Маршруты.Количество() = 0 ИЛИ ОтветПланирования.РезультатПланирования.Машины.Количество() = 0 Тогда
		Возврат ОтветФункции;	
	КонецЕсли;
	
	ДанныеВодителя = ДобавитьОбновитьВодителяПоПланированию(ОтветПланирования.РезультатПланирования);
	Если ДанныеВодителя.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ДанныеВодителя.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
	
	ДанныеМаршрута = ДобавитьОбновитьМаршрутПоПланированию(МаршрутныйЛист, ОтветПланирования.РезультатПланирования);
	Если ДанныеМаршрута.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ДанныеМаршрута.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
	
	ДанныеУзлов = ДобавитьОбновитьУзлыМаршрутаПоПланированию(ДанныеМаршрута, ОтветПланирования.РезультатПланирования);
	Если ДанныеУзлов.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ДанныеУзлов.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 29.03.2021
	
КонецФункции //(ВыгрузитьПланированиеВМониторинг)


Функция ДобавитьОбновитьВодителяПоПланированию(РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 31.03.2021
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Автомашины.Ссылка
	               |ИЗ
	               |	Справочник.Автомашины КАК Автомашины
	               |ГДЕ
	               |	Автомашины.ЯМ_Логин = &ЯМ_Логин
	               |	И Автомашины.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ЯМ_Логин", РезультатПланирования.Машины[0].Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	мКурьеры = Новый Массив;
	мКурьеры.Добавить(Выборка.Ссылка);
	
	ОтветВыгрузки = ВыгрузитьКурьеровВМониторинг(мКурьеры);
	Если ОтветВыгрузки.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = "Не удалось выгрузить водителей. Описание ошибки: " + ОтветВыгрузки.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
		
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(ДобавитьОбновитьВодителяПоПланированию)

Функция ДобавитьОбновитьМаршрутПоПланированию(МаршрутныйЛист, РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 30.03.2021	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("МаршрутныйЛист", МаршрутныйЛист);
	ОтветФункции.Вставить("НомерМаршрутаВМониторинге", "");
	ОтветФункции.Вставить("ИдМаршрутаВМониторинге", 0);
	ОтветФункции.Вставить("НомерМЛ_Сокр", "");
		
	ОтветФункции.НомерМЛ_Сокр = ОбщегоНазначения.ПолучитьНомерНаПечать(МаршрутныйЛист);
	ОтветФункции.НомерМаршрутаВМониторинге = ОтветФункции.НомерМЛ_Сокр + "_" + Лев(РезультатПланирования.Опции.ДатаМаршрутаСтрокой, 4);
	
	мМаршрутов = Новый Массив;
	ДанныеМаршрута = Новый Структура;
	ДанныеМаршрута.Вставить("date", РезультатПланирования.Опции.ДатаМаршрутаСтрокой);
	ДанныеМаршрута.Вставить("number", ОтветФункции.НомерМаршрутаВМониторинге);
	ДанныеМаршрута.Вставить("depot_number", РезультатПланирования.Машины[0].ИдСклада);                                  
	ДанныеМаршрута.Вставить("courier_number", РезультатПланирования.Машины[0].Код);
	ДанныеМаршрута.Вставить("routing_mode", РезультатПланирования.Опции.РежимМаршрутизации);
	мМаршрутов.Добавить(ДанныеМаршрута);
	
	ТекстТелаЗапроса = Служебный.ЗаписатьJSONПереопределямый(мМаршрутов);
	ОтветАПИ = АПИ_РедактируетНесколькоМаршрутов_Мониторинг(ТекстТелаЗапроса);
	Если ЗначениеЗаполнено(ОтветАПИ.ОписаниеОшибки) Тогда		
		ОтветФункции.ОписаниеОшибки = "Не удалось выгрузить маршрут. " + ОбработатьОшибкуВОтветеАпиМониторинга(ОтветАПИ);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветАПИ = АПИ_ПолучаетНесколькоМаршрутов_Мониторинг(ОтветФункции.НомерМаршрутаВМониторинге, "", 0);
	Если ЗначениеЗаполнено(ОтветАПИ.ОписаниеОшибки) Тогда		
		ОтветФункции.ОписаниеОшибки = "Не удалось выгрузить маршрут. " + ОбработатьОшибкуВОтветеАпиМониторинга(ОтветАПИ);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветСайта = Служебный.РазобратьJSON(ОтветАПИ.ОтветСайта);
	ОтветФункции.ИдМаршрутаВМониторинге = ОтветСайта[0].id;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 30.03.2021
	
КонецФункции //(ДобавитьОбновитьМаршрутПоПланированию)

Функция ДобавитьОбновитьУзлыМаршрутаПоПланированию(ДанныеМаршрута, РезультатПланирования)
	
	//{{{Добавил Поляков А.С. 30.03.2021
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	
	Если РезультатПланирования.Маршруты.Количество() = 0 Тогда
		ОтветФункции.ОписаниеОшибки = "Не найден маршрут в планировании";
		Возврат ОтветФункции;
	КонецЕсли;
	Маршрут_Планирование = РезультатПланирования.Маршруты[0];
	
	АдресаУзлов = ПолучитьАдресаУзловПоПланированию(ДанныеМаршрута.МаршрутныйЛист);
	
	СтатусыВыгруженныхУзлов = Новый Соответствие;
	ОтветАПИ = АПИ_ПолучаетНесколькоЗаказов_Мониторинг(ДанныеМаршрута.ИдМаршрутаВМониторинге, "", "order");
	Если НЕ ЗначениеЗаполнено(ОтветАПИ.ОписаниеОшибки) Тогда
		ОтветСайта = Служебный.РазобратьJSON(ОтветАПИ.ОтветСайта);
		
		Если ТипЗнч(ОтветСайта) = Тип("Массив") Тогда
			Для Каждого эОтветСайта Из ОтветСайта Цикл
				СтатусыВыгруженныхУзлов.Вставить(эОтветСайта.number, эОтветСайта.status);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	мУзлы_Мониторинг = Новый Массив;
	Для Каждого Узел_Планирование Из Маршрут_Планирование.УзлыМаршрута Цикл			
		Если Узел_Планирование.Тип = "доставка" ИЛИ Узел_Планирование.Тип = "забор" Тогда
			НовыйУзел_Мониторинг = Новый Структура;
			НовыйУзел_Мониторинг.Вставить("type", "order");
			
			ДанныеУзла_Мониторинг = Новый Структура;
			ДанныеУзла_Мониторинг.Вставить("number", Узел_Планирование.КодУзла + "_" + ДанныеМаршрута.НомерМЛ_Сокр);
			
			СтарыйСтатусУзла = СтатусыВыгруженныхУзлов[ДанныеУзла_Мониторинг.number];
			Если СтарыйСтатусУзла = Неопределено ИЛИ СтарыйСтатусУзла = "new" ИЛИ СтарыйСтатусУзла = "confirmed" Тогда
				ДанныеУзла_Мониторинг.Вставить("address", ?(АдресаУзлов[Узел_Планирование.КодУзла] = Неопределено, "", АдресаУзлов[Узел_Планирование.КодУзла]));
				ДанныеУзла_Мониторинг.Вставить("lat", Узел_Планирование.Широта);
				ДанныеУзла_Мониторинг.Вставить("lon", Узел_Планирование.Долгота);
				ДанныеУзла_Мониторинг.Вставить("route_number", ДанныеМаршрута.НомерМаршрутаВМониторинге);
				ДанныеУзла_Мониторинг.Вставить("time_interval", Узел_Планирование.ВременноеОкно);
				ДанныеУзла_Мониторинг.Вставить("status", ?(СтарыйСтатусУзла = Неопределено, "confirmed", СтарыйСтатусУзла));
				ДанныеУзла_Мониторинг.Вставить("type", ?(Узел_Планирование.Тип = "доставка", "delivery", "pickup"));
				
				ДанныеУзла_Мониторинг.Вставить("customer_name", Узел_Планирование.ИмяКлиента);
				ДанныеУзла_Мониторинг.Вставить("customer_number", Узел_Планирование.НомерКлиента);
				ДанныеУзла_Мониторинг.Вставить("phone", Узел_Планирование.НомерКлиента);
				ДанныеУзла_Мониторинг.Вставить("service_duration_s", Узел_Планирование.ВремяОбслуживанияНаЗаказ);
				ДанныеУзла_Мониторинг.Вставить("shared_service_duration_s", Узел_Планирование.ВремяОбслуживанияНаАдрес);
				ДанныеУзла_Мониторинг.Вставить("volume", Узел_Планирование.ОбъемЗаказа);
				ДанныеУзла_Мониторинг.Вставить("weight", Узел_Планирование.ВесЗаказа);		
			КонецЕсли;
			
			НовыйУзел_Мониторинг.Вставить("value", ДанныеУзла_Мониторинг);
			мУзлы_Мониторинг.Добавить(НовыйУзел_Мониторинг);
		ИначеЕсли Узел_Планирование.Тип = "склад" Тогда
			НовыйУзел_Мониторинг = Новый Структура;
			НовыйУзел_Мониторинг.Вставить("type", "depot");
			
			ДанныеУзла_Мониторинг = Новый Структура;
			ДанныеУзла_Мониторинг.Вставить("number", Узел_Планирование.КодУзла);
			ДанныеУзла_Мониторинг.Вставить("address", ?(АдресаУзлов[Узел_Планирование.КодУзла] = Неопределено, "", АдресаУзлов[Узел_Планирование.КодУзла]));
			ДанныеУзла_Мониторинг.Вставить("lat", Узел_Планирование.Широта);
			ДанныеУзла_Мониторинг.Вставить("lon", Узел_Планирование.Долгота);
			
			НовыйУзел_Мониторинг.Вставить("value", ДанныеУзла_Мониторинг);
			мУзлы_Мониторинг.Добавить(НовыйУзел_Мониторинг);
		ИначеЕсли Узел_Планирование.Тип = "парковка" Тогда
			НовыйУзел_Мониторинг = Новый Структура;
			НовыйУзел_Мониторинг.Вставить("type", "garage");
			
			ДанныеУзла_Мониторинг = Новый Структура;
			ДанныеУзла_Мониторинг.Вставить("number", Узел_Планирование.КодУзла);
			ДанныеУзла_Мониторинг.Вставить("address", ?(АдресаУзлов[Узел_Планирование.КодУзла] = Неопределено, "", АдресаУзлов[Узел_Планирование.КодУзла]));
			ДанныеУзла_Мониторинг.Вставить("lat", Узел_Планирование.Широта);
			ДанныеУзла_Мониторинг.Вставить("lon", Узел_Планирование.Долгота);
			
			НовыйУзел_Мониторинг.Вставить("value", ДанныеУзла_Мониторинг);
			мУзлы_Мониторинг.Добавить(НовыйУзел_Мониторинг);	
		КонецЕсли;
	КонецЦикла;
		
	ТекстТелаЗапроса = Служебный.ЗаписатьJSONПереопределямый(мУзлы_Мониторинг);
	ОтветАПИ = АПИ_ЗадаетУзлыМаршрутаИИхПоследовательность_Мониторинг(ДанныеМаршрута.ИдМаршрутаВМониторинге, ТекстТелаЗапроса);
	Если ЗначениеЗаполнено(ОтветАПИ.ОписаниеОшибки) Тогда
		ОтветФункции.ОписаниеОшибки = "Не удалось выгрузить узлы маршрута. " + ОбработатьОшибкуВОтветеАпиМониторинга(ОтветАПИ);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 30.03.2021
	
КонецФункции //(ДобавитьОбновитьУзлыМаршрутаПоПланированию)


Функция ПолучитьАдресаУзловПоПланированию(МаршрутныйЛист)
	
	//{{{Добавил Поляков А.С. 30.03.2021
	АдресаУзлов = Новый Соответствие;
	
	ДанныеПланирования = ПодготовитьДанныеПланированияПоМаршрутномуЛисту(МаршрутныйЛист, Неопределено, Неопределено);
	ОтветПодготовки = ПодготовитьТаблицыДляПланирования(ДанныеПланирования.ДатаНачалаМаршрута, ДанныеПланирования.ДатаОкончанияМаршрута, ДанныеПланирования.СписокДокументов, 
	ДанныеПланирования.Транспорты, ДанныеПланирования.ДанныеСклада); 
	
	тМаршруты = ОтветПодготовки.тМаршруты;
	Для Каждого сМаршрут Из тМаршруты Цикл
		АдресаУзлов.Вставить(сМаршрут.НомерЗаказа, сМаршрут.АдресПолучателя); 	
	КонецЦикла;
	
	Возврат АдресаУзлов;
	//}}}Добавил Поляков А.С. 30.03.2021
	
КонецФункции //(ПолучитьАдресаУзловПоПланированию)

////////////////////////////
//// РАБОТА С КУРЬЕРАМИ ////
////////////////////////////

Функция ВыгрузитьКурьеровВМониторинг(Курьеры) Экспорт
	
	//{{{Добавил Поляков А.С. 31.03.2021
	ИнформацияОКурьерах = Новый Массив;
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Автомашины.Ссылка КАК Ссылка,
	               |	Автомашины.Наименование КАК Наименование,
	               |	Автомашины.НомерТелефона КАК НомерТелефона,
	               |	Автомашины.ЯМ_Логин КАК ЯМ_Логин,
	               |	Автомашины.ЯМ_ОтправлятьСМС КАК ЯМ_ОтправлятьСМС
	               |ИЗ
	               |	Справочник.Автомашины КАК Автомашины
	               |ГДЕ
	               |	Автомашины.Ссылка В(&Курьеры)";
	Запрос.УстановитьПараметр("Курьеры", Курьеры);
	
	мКурьеры_Запрос = Новый Массив;	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Курьер_Запрос = Новый Структура;
		
		Курьер_Запрос.Вставить("name", Выборка.Наименование);
		Курьер_Запрос.Вставить("number", Выборка.ЯМ_Логин);
		Курьер_Запрос.Вставить("phone", Выборка.НомерТелефона);
		Курьер_Запрос.Вставить("sms_enabled", Выборка.ЯМ_ОтправлятьСМС);
		
		мКурьеры_Запрос.Добавить(Курьер_Запрос);
	КонецЦикла;
	
	ТекстТелаЗапроса = Служебный.ЗаписатьJSONПереопределямый(мКурьеры_Запрос);
	ОтветАПИ = АПИ_РедактируетНесколькихКурьеров_Мониторинг(ТекстТелаЗапроса);
	Если ЗначениеЗаполнено(ОтветФункции.ОписаниеОшибки) Тогда
		ОтветФункции.ОписаниеОшибки = ОбработатьОшибкуВОтветеАпиМониторинга(ОтветАПИ);
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(ВыгрузитьКурьеровВМониторинг)

/////////////////////////////
//// РАБОТА С МАРШРУТАМИ ////
/////////////////////////////

Функция ЕстьМаршрутныйЛистВМониторинге(МаршрутныйЛист) Экспорт
	
	//{{{Добавил Поляков А.С. 02.04.2021
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("НомерМаршрутаВМониторинге", "");
	ОтветФункции.Вставить("ИдМаршрутаВМониторинге", "");
	ОтветФункции.Вставить("ИдКурьераВМониторинге", "");
	
	ДанныеМЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаршрутныйЛист, "Номер, Организация, ЯМ_НачалоСменыВодителя");
	
	НомерМЛ_Сокр = ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеМЛ);
	НомерМаршрутаВМониторинге = НомерМЛ_Сокр + "_" + Формат(ДанныеМЛ.ЯМ_НачалоСменыВодителя, "ДФ = 'гггг'");	
	
	ОтветАПИ = АПИ_ПолучаетНесколькоМаршрутов_Мониторинг(НомерМаршрутаВМониторинге, "", 0);
	Если ЗначениеЗаполнено(ОтветАПИ.ОписаниеОшибки) Тогда
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветСайта = Служебный.РазобратьJSON(ОтветАПИ.ОтветСайта);
	Если ОтветСайта.Количество() = 0 Тогда
		Возврат ОтветФункции;
	КонецЕсли;
	
	ОтветФункции.ИдМаршрутаВМониторинге = СтрЗаменить(ОтветСайта[0].id, Символы.НПП, "");
	ОтветФункции.НомерМаршрутаВМониторинге = НомерМаршрутаВМониторинге;
	ОтветФункции.ИдКурьераВМониторинге = СтрЗаменить(ОтветСайта[0].courier_id, Символы.НПП, "");
	
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 02.04.2021
	
КонецФункции //(ЕстьМаршрутныйЛистВМониторинге)

#КонецОбласти

#Область Служебные

Функция ОбработатьОшибкуВОтветеАпиМониторинга(ОтветАПИ)
	
	//{{{Добавил Поляков А.С. 31.03.2021
	мТекстыОшибок = Новый Массив;
	мТекстыОшибок.Добавить(ОтветАПИ.ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОтветАПИ.ОтветСайта) Тогда
		ОтветСайта = Служебный.РазобратьJSON(ОтветАПИ.ОтветСайта);
		
		мТекстыОшибок.Добавить("Описание ошибки:");
		ТипСообщения = ТипЗнч(ОтветСайта.message);
		Если ТипСообщения = Тип("Строка") Тогда
			мТекстыОшибок.Добавить(ОтветСайта.message);	
		ИначеЕсли ТипСообщения = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мТекстыОшибок, ОтветСайта.message); 	
		КонецЕсли;
	КонецЕсли;
	
	Возврат _СтрСоединить(мТекстыОшибок, Символы.ПС);
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(ОбработатьОшибкуВОтветеМониторинга)

Функция ПолучитьТокенДляМониторинга()
	
	//{{{Добавил Поляков А.С. 31.03.2021
	Возврат "Auth AgAAAAAJjR8IAAbWw_afpgs6tEOSqZU1RGADcfk";
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(ПолучитьТокенДляМониторинга)

Функция ПолучитьИдКомпанииВМониторинге()
	
	//{{{Добавил Поляков А.С. 31.03.2021
	Возврат "4381";
	//}}}Добавил Поляков А.С. 31.03.2021
	
КонецФункции //(ПолучитьИдКомпанииВМониторинге)
	
#КонецОбласти


/////////////////////////////////////
/////////	  ПЛАН ФАКТ		/////////
/////////////////////////////////////


////ПРИКЛАДНЫЕ МЕТОДЫ////

Функция ПолучитьПланФактПоМаршрутномуЛисту(МаршрутныйЛист, Планирование = Неопределено) Экспорт
	
	//{{{Добавил Поляков А.С. 18.02.2021
	ПланФакт = ПолучитьПустуюТаблицуПланФакт();
	НераспределенныеУзлыМаршрута = ПолучитьПустуюТаблицуНераспределенныеУзлыМаршрута();
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат", Ложь);
	ОтветФункции.Вставить("ОписаниеОшибки", "");
	ОтветФункции.Вставить("ПланФакт", ПланФакт);
	ОтветФункции.Вставить("НераспределенныеУзлыМаршрута", НераспределенныеУзлыМаршрута);
	ОтветФункции.Вставить("РезультатВыполненияЗадачи", Новый Структура);
	ОтветФункции.РезультатВыполненияЗадачи.Вставить("ОписаниеОшибки", "");	
	ОтветФункции.РезультатВыполненияЗадачи.Вставить("Статус", "");
	ОтветФункции.РезультатВыполненияЗадачи.Вставить("НуженОбработчикОжидания", Ложь);
	
	//ПЛАН	
	ОтветПланирования = ПолучитьРезультатВыполненияЗадачиПоМаршрутномуЛисту(МаршрутныйЛист, Планирование);
	ЗаполнитьЗначенияСвойств(ОтветФункции.РезультатВыполненияЗадачи, ОтветПланирования.РезультатВыполненияЗадачи);
	Если ОтветПланирования.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ОтветПланирования.ОписаниеОшибки;
		Возврат ОтветФункции;
	КонецЕсли;
	
	КолонкиПлан = ПолучитьКолонкиПланДляТаблицыПланФакт();
	мКолонокПлан = Новый Массив;
	Для Каждого КолонкаПлан Из КолонкиПлан Цикл
		мКолонокПлан.Добавить(КолонкаПлан.Ключ);	
	КонецЦикла;
	КолонкиПланСтрокой = _СтрСоединить(мКолонокПлан, ",");
	Для Каждого Маршрут Из ОтветПланирования.РезультатПланирования.Маршруты Цикл
		Для Каждого УзелМаршрута Из Маршрут.УзлыМаршрута Цикл			
			НоваяСтрокаПланФакт = ПланФакт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланФакт, УзелМаршрута, КолонкиПланСтрокой);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого НераспределенныйУзел Из ОтветПланирования.РезультатПланирования.НераспределенныеУзлыМаршрута Цикл		
		сНераспределенныеМаршруты = НераспределенныеУзлыМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(сНераспределенныеМаршруты, НераспределенныйУзел);
	КонецЦикла;
	
	//ФАКТ
	ОтветМониторинга = ПолучитьИнформациюОКачествеДоставкиПоМаршрутномуЛисту(МаршрутныйЛист);
	Если ОтветМониторинга.Результат = Ложь Тогда
		ОтветФункции.ОписаниеОшибки = ОтветМониторинга.ОписаниеОшибки;
		Возврат ОтветФункции;	
	КонецЕсли;
	
	КолонкиФакт = ПолучитьКолонкиФактДляТаблицыПланФакт();
	мКолонокФакт = Новый Массив;
	Для Каждого КолонкаФакт Из КолонкиФакт Цикл
		мКолонокФакт.Добавить(КолонкаФакт.Ключ);	
	КонецЦикла;
	КолонкиФактСтрокой = _СтрСоединить(мКолонокФакт, ",");
	Для Каждого СтрокаФакт Из ОтветМониторинга.ИнформацияОКачествеДоставки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("НазваниеМеста", СтрокаФакт.ИмяЗаказчика);
		Отбор.Вставить("ТипДокумента1С", СтрокаФакт.ТипДокумента1С);
		Отбор.Вставить("НомерДокумента1С", СтрокаФакт.НомерДокумента1С);
		
		НС = ПланФакт.НайтиСтроки(Отбор);
		Если НС.Количество() = 0 Тогда
			СтрокаПланФакт = ПланФакт.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланФакт, СтрокаФакт, "Тип, ТипДокумента1С, НомерДокумента1С, Документ");
		Иначе
			СтрокаПланФакт = НС[0];	
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаПланФакт, СтрокаФакт, КолонкиФактСтрокой, "Тип, ТипДокумента1С, НомерДокумента1С, Документ");
	КонецЦикла;
	
	ОтветФункции.Результат = Истина;
	Возврат ОтветФункции;
	//}}}Добавил Поляков А.С. 18.02.2021
	
КонецФункции //(ПолучитьПланФактПоМаршрутномуЛисту)

////СЛУЖЕБНЫЕ////

Функция ПолучитьКолонкиПланДляТаблицыПланФакт()
	
	//{{{Добавил Поляков А.С. 05.04.2021
	КолонкиПлан = Новый Соответствие;
	
	КолонкиПлан.Вставить("Тип"							, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("ТипДокумента1С"				, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("НомерДокумента1С"				, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("Документ"						, Служебный.ОписаниеТиповПереопределенное("ЛюбаяСсылка"));
	КолонкиПлан.Вставить("ВремяПрибытия"				, Служебный.ОписаниеТиповПереопределенное("Дата", ЧастиДаты.ДатаВремя));
	КолонкиПлан.Вставить("ВремяПрибытияСтрокой"			, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("ВремяПрибытияВСекундах"	    , Служебный.ОписаниеТиповПереопределенное("Число", 10, 0, ДопустимыйЗнак.Неотрицательный));
	КолонкиПлан.Вставить("КодУзлаЗабора"				, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("НазваниеМеста"				, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("ВремяОтправления"				, Служебный.ОписаниеТиповПереопределенное("Дата", ЧастиДаты.ДатаВремя));
	КолонкиПлан.Вставить("ВремяОтправленияВСекундах"	, Служебный.ОписаниеТиповПереопределенное("Число", 10, 0, ДопустимыйЗнак.Неотрицательный));
	КолонкиПлан.Вставить("ВремяОтправленияСтрокой"		, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиПлан.Вставить("ВремяНаЗаказПлан"				, Служебный.ОписаниеТиповПереопределенное("Число", 10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат КолонкиПлан;
	//}}}Добавил Поляков А.С. 05.04.2021
	
КонецФункции //(ПолучитьКолонкиПланДляТаблицыПланФакт)

Функция ПолучитьКолонкиФактДляТаблицыПланФакт()
	
	//{{{Добавил Поляков А.С. 05.04.2021
	КолонкиФакт = Новый Соответствие;
	
	КолонкиФакт.Вставить("ТекущийСтатусЗаказа"					, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("НомерМаршрута"						, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ИмяЗаказчика"							, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ИмяКурьера"							, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("КодКурьера"							, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("КодСклада"							, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ВыполненаВНезапланированномПорядке"	, Служебный.ОписаниеТиповПереопределенное("Булево"));
	КолонкиФакт.Вставить("ДатаМаршрута"							, Служебный.ОписаниеТиповПереопределенное("Дата", ЧастиДаты.ДатаВремя));
	КолонкиФакт.Вставить("ВремяВизита"							, Служебный.ОписаниеТиповПереопределенное("Дата", ЧастиДаты.ДатаВремя));
	КолонкиФакт.Вставить("ЧасовойПояс"							, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ВремяВизитаВСекундах"					, Служебный.ОписаниеТиповПереопределенное("Число", 10, 0, ДопустимыйЗнак.Неотрицательный));
	КолонкиФакт.Вставить("ВремяВизитаСтрокой"					, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ВремяУбытия"							, Служебный.ОписаниеТиповПереопределенное("Дата", ЧастиДаты.ДатаВремя));
	КолонкиФакт.Вставить("ЧасовойПоясУбытия"					, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ВремяУбытияВСекундах"					, Служебный.ОписаниеТиповПереопределенное("Число", 10, 0, ДопустимыйЗнак.Неотрицательный));
	КолонкиФакт.Вставить("ВремяУбытияСтрокой"					, Служебный.ОписаниеТиповПереопределенное("Строка", 150, ДопустимаяДлина.Переменная));
	КолонкиФакт.Вставить("ВремяНаЗаказФакт"						, Служебный.ОписаниеТиповПереопределенное("Число", 10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат КолонкиФакт;
	//}}}Добавил Поляков А.С. 05.04.2021
	
КонецФункции

Функция ПолучитьПустуюТаблицуПланФакт()
	
	//{{{Добавил Поляков А.С. 18.02.2021
	ПланФакт = Новый ТаблицаЗначений;
	
	КолонкиПлан = ПолучитьКолонкиПланДляТаблицыПланФакт();
	Для Каждого КолонкаПлан Из КолонкиПлан Цикл
		ПланФакт.Колонки.Добавить(КолонкаПлан.Ключ, КолонкаПлан.Значение);	
	КонецЦикла;
		
	КолонкиФакт = ПолучитьКолонкиФактДляТаблицыПланФакт();
	Для Каждого КолонкаФакт Из КолонкиФакт Цикл
		ПланФакт.Колонки.Добавить(КолонкаФакт.Ключ, КолонкаФакт.Значение);	
	КонецЦикла;
		
	Возврат ПланФакт;
	//}}}Добавил Поляков А.С. 18.02.2021
	
КонецФункции //(ПолучитьПустуюТаблицуПланФакт)

Функция ПолучитьПустуюТаблицуНераспределенныеУзлыМаршрута()
	
	//{{{Добавил Поляков А.С. 18.02.2021
	НераспределенныеМаршруты = Новый ТаблицаЗначений;
	
	НераспределенныеМаршруты.Колонки.Добавить("Тип");
	НераспределенныеМаршруты.Колонки.Добавить("ТипДокумента1С");
	НераспределенныеМаршруты.Колонки.Добавить("НомерДокумента1С");
	НераспределенныеМаршруты.Колонки.Добавить("Документ");
	НераспределенныеМаршруты.Колонки.Добавить("ОписаниеОшибки");
	НераспределенныеМаршруты.Колонки.Добавить("КодУзлаЗабора");
	НераспределенныеМаршруты.Колонки.Добавить("НазваниеМеста");
		
	Возврат НераспределенныеМаршруты;
	//}}}Добавил Поляков А.С. 18.02.2021
	
КонецФункции //(ПолучитьПустуюТаблицуНераспределенныеМаршруты)
	
/////////////////////////////////////
/////////	ОБЩИЕ МЕТОДЫ	/////////
/////////////////////////////////////

Функция ПолучитьСоставМаршрутогоЛиста(МаршрутныйЛист)
	
	//{{{Добавил Поляков А.С. 17.02.2021
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ");
	ТаблицаДокументов.Колонки.Добавить("Тип");
	ТаблицаДокументов.Колонки.Добавить("Номер");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МаршрутныйЛистСостав.ЗаказПокупателя,
	               |	МаршрутныйЛистСостав.ЗаказПокупателя.Номер,
	               |	МаршрутныйЛистСостав.РеализацияТоваровУслуг,
	               |	МаршрутныйЛистСостав.РеализацияТоваровУслуг.Номер,
	               |	МаршрутныйЛистСостав.ВозвратТоваровОтПокупателя,
	               |	МаршрутныйЛистСостав.ВозвратТоваровОтПокупателя.Номер,
	               |	МаршрутныйЛистСостав.Перемещение,
	               |	МаршрутныйЛистСостав.Перемещение.Номер,
	               |	МаршрутныйЛистСостав.ВозвратТоваровПоставщику,
	               |	МаршрутныйЛистСостав.ВозвратТоваровПоставщику.Номер,
	               |	МаршрутныйЛистСостав.ЗаказПоставщику,
	               |	МаршрутныйЛистСостав.ЗаказПоставщику.Номер
	               |ИЗ
	               |	Документ.МаршрутныйЛист.Состав КАК МаршрутныйЛистСостав
	               |ГДЕ
	               |	МаршрутныйЛистСостав.Ссылка = &МаршрутныйЛист";
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаДокументов;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл			
		Если ЗначениеЗаполнено(Выборка.ЗаказПокупателя) Тогда
			Если ЗначениеЗаполнено(Выборка.РеализацияТоваровУслуг) Тогда 					
				сТаблицаДокументов = ТаблицаДокументов.Добавить();
				сТаблицаДокументов.Документ = Выборка.РеализацияТоваровУслуг;
				сТаблицаДокументов.Тип = "реализация";
				сТаблицаДокументов.Номер = Выборка.РеализацияТоваровУслугНомер;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ВозвратТоваровОтПокупателя) Тогда 
				сТаблицаДокументов = ТаблицаДокументов.Добавить();
				сТаблицаДокументов.Документ = Выборка.ВозвратТоваровОтПокупателя;
				сТаблицаДокументов.Тип = "возврат от покупателя";
				сТаблицаДокументов.Номер = Выборка.ВозвратТоваровОтПокупателяНомер;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Перемещение) Тогда					
				сТаблицаДокументов = ТаблицаДокументов.Добавить();
				сТаблицаДокументов.Документ = Выборка.Перемещение;
				сТаблицаДокументов.Тип = "перемещение";
				сТаблицаДокументов.Номер = Выборка.ПеремещениеНомер;
			КонецЕсли;
			сТаблицаДокументов = ТаблицаДокументов.Добавить();
			сТаблицаДокументов.Документ = Выборка.ЗаказПокупателя;
			сТаблицаДокументов.Тип = "заказ покупателя";
			сТаблицаДокументов.Номер = СокрЛП(Выборка.ЗаказПокупателяНомер);
		ИначеЕсли ЗначениеЗаполнено(Выборка.ЗаказПоставщику) Тогда
			сТаблицаДокументов = ТаблицаДокументов.Добавить();
			сТаблицаДокументов.Документ = Выборка.ЗаказПоставщику;
			сТаблицаДокументов.Тип = "заказ поставщику";
			сТаблицаДокументов.Номер = Выборка.ЗаказПоставщикуНомер;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ВозвратТоваровПоставщику) Тогда
			сТаблицаДокументов = ТаблицаДокументов.Добавить();
			сТаблицаДокументов.Документ = Выборка.ВозвратТоваровПоставщику;
			сТаблицаДокументов.Тип = "возврат поставщику";
			сТаблицаДокументов.Номер = Выборка.ВозвратТоваровПоставщикуНомер;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Перемещение) Тогда
			сТаблицаДокументов = ТаблицаДокументов.Добавить();
			сТаблицаДокументов.Документ = Выборка.Перемещение;
			сТаблицаДокументов.Тип = "перемещение";
			сТаблицаДокументов.Номер = Выборка.ПеремещениеНомер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	//}}}Добавил Поляков А.С. 17.02.2021
	
КонецФункции //(ПолучитьСоставМаршрутогоЛиста)

Процедура ЗаполнитьДокументыВМаршрутахAPIПоМаршрутномуЛисту(МаршрутыAPI, СоставМаршрутногоЛиста)
	
	//{{{Добавил Поляков А.С. 17.02.2021
	Для Каждого МаршрутAPI Из МаршрутыAPI Цикл				
		Отбор = Новый Структура;
		Отбор.Вставить("Тип", МаршрутAPI.ТипДокумента1С);
		Отбор.Вставить("Номер", МаршрутAPI.НомерДокумента1С);
		
		НС = СоставМаршрутногоЛиста.НайтиСтроки(Отбор);
		Если НС.Количество() > 0 Тогда
			МаршрутAPI.Документ = НС[0].Документ;	
		КонецЕсли;
	КонецЦикла;
	//}}}Добавил Поляков А.С. 17.02.2021
	
КонецПроцедуры //(ЗаполнитьДокументыВМаршрутахAPIПоМаршрутномуЛисту)

Функция СформироватьВремяПрибытияИзСоставаВремени(СоставВремени)
	
	ВремяПрибытия = "";
	
	Если СоставВремени.Дни > 1 Тогда
		ВремяПрибытия = ВремяПрибытия + (СоставВремени.Дни - 1) + ".";		
	КонецЕсли;
	
	Если СтрДлина(СоставВремени.Часы) = 1 Тогда
		ВремяПрибытия = ВремяПрибытия + "0" + СоставВремени.Часы;
	Иначе
		ВремяПрибытия = ВремяПрибытия + СоставВремени.Часы;	
	КонецЕсли;
	
	Если СтрДлина(СоставВремени.Минуты) = 1 Тогда
		ВремяПрибытия = ВремяПрибытия + ":0" + СоставВремени.Минуты;
	Иначе
		ВремяПрибытия = ВремяПрибытия + ":" + СоставВремени.Минуты;	
	КонецЕсли;
	
	Возврат ВремяПрибытия;
КонецФункции //(СформироватьВремяПрибытияИзСоставаВремени)

Функция ПолучитьАдресСервиса()
	
	АдресСервиса = Справочники.Константы.ЯМ_АдресСервиса.Значение;
	Если НЕ ТипЗнч(АдресСервиса) = Тип("Строка") Тогда
		АдресСервиса = "";	
	КонецЕсли;
	
	Возврат АдресСервиса;
КонецФункции //(ПолучитьАдресСервиса)

Функция ПолучитьКлючАпи()
	
	КлючАпи = Справочники.Константы.ЯМ_КлючАпи.Значение;
	Если НЕ ТипЗнч(КлючАпи) = Тип("Строка") Тогда
		КлючАпи = "";	
	КонецЕсли;
	
	Возврат КлючАпи;
КонецФункции //(ПолучитьКлючАпи)
