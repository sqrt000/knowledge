
#Область МетодыAPI

// Функция - АПИ проверить текст
//
// Параметры: 
//  text	 - Строка - Текст для проверки.
//  lang	 - Строка - Языки проверки (перечисляются через запятую). 
//	Возможные значения:
//  ru — русский;
//  uk — украинский;
//  en — английский.
//	По умолчанию: "ru,en".
//	options	- Число - Опции Яндекс.Спеллера. Значением параметра является сумма значений требуемых опций.
//  Опция					Значение (десятичное)	Описание (пример)
// 	IGNORE_DIGITS			2						Пропускать слова с цифрами, например, "авп17х4534".
//	IGNORE_URLS				4						Пропускать интернет-адреса, почтовые адреса и имена файлов.
//	FIND_REPEAT_WORDS		8						Подсвечивать повторы слов, идущие подряд. Например, "я полетел на на Кипр".
//  IGNORE_CAPITALIZATION	512						Игнорировать неверное употребление ПРОПИСНЫХ/строчных букв, например, в слове "москва".	
//  format	 - Строка - Формат проверяемого текста.
//	Возможные значения:
//	1) plain — текст без разметки (значение по умолчанию);
//	2) html — текст в формате HTML.
// Интерфейс:
// Возможные значения:
// 1) JSON
// 2) XML
// Возвращаемое значение:
// Структура - ТекстОшибки, ОтветСайта
//
Функция АПИ_ПроверитьТекст(Параметры, Интерфейс) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ОтветСайта", "");
	
	//// ГОТОВИМ ТЕКСТ ЗАПРОСА ////
	Шаблон = "?%1";
	
	Текст = "text=" + Параметры.text;
	
	Если Параметры.Свойство("lang") Тогда
		Шаблон = Шаблон + "%2";
		Язык = "&lang=" + Параметры.lang;
	Иначе
		Язык = "";	
	КонецЕсли;
	
	Если Параметры.Свойство("options") Тогда
		Шаблон = Шаблон + "%3";
		Опции = "&options=" + Параметры.options;
	Иначе
		Опции = "";		
	КонецЕсли;
	
	Если Параметры.Свойство("format") Тогда
		Шаблон = Шаблон + "%4";
		ФорматТекста = "&format=" + Параметры.format;
	Иначе
		ФорматТекста = "";		
	КонецЕсли;
	
	АдресРесурса = ПолучитьАдресРесурсаПроверитьТекст(Интерфейс) + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Текст, Язык, Опции, ФорматТекста); 
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовкиЗапроса);
	
	// GET ЗАПРОС ////
	Сервер = ПолучитьАдресСервера();
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	ИмяВыходногоФайла = ПолучитьИмяВременногоФайла(Интерфейс);	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВыходногоФайла);
	Исключение
		Результат.ТекстОшибки = "Не удалось получить данные. Описание ошибки: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	//// РАБОТА С ОТВЕТОМ САЙТА ////
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВыходногоФайла, КодировкаТекста.UTF8);          
	Результат.ОтветСайта = ЧтениеТекста.Прочитать();
			
	Возврат Результат;
КонецФункции

Функция АПИ_СоответствиеОпций()
	
	СоответствиеОпций = Новый Соответствие;
	СоответствиеОпций.Вставить("ПропускатьСловаСЦифрами", 2);
	СоответствиеОпций.Вставить("ПропускатьИнтернетАдреса", 4);
	СоответствиеОпций.Вставить("ПодсвечиватьПовторыСлов", 8);
	СоответствиеОпций.Вставить("ИгнорироватьНеверноеУпотреблениеПрописныхБукв", 512);
	
	Возврат СоответствиеОпций;
КонецФункции

Функция АПИ_СуммаОпций(ПропускатьСловаСЦифрами = Ложь, ПропускатьИнтернетАдреса = Ложь, ПодсвечиватьПовторыСлов = Ложь, ИгнорироватьНеверноеУпотреблениеПрописныхБукв = Истина) Экспорт
	
	СуммаОпций = 0;
	
	СоответствиеОпций = АПИ_СоответствиеОпций();
	
	Если ПропускатьСловаСЦифрами Тогда
		СуммаОпций = СуммаОпций + СоответствиеОпций["ПропускатьСловаСЦифрами"]	
	КонецЕсли;
	
	Если ПропускатьИнтернетАдреса Тогда
		СуммаОпций = СуммаОпций + СоответствиеОпций["ПропускатьИнтернетАдреса"]	
	КонецЕсли;
	
	Если ПодсвечиватьПовторыСлов Тогда
		СуммаОпций = СуммаОпций + СоответствиеОпций["ПодсвечиватьПовторыСлов"]	
	КонецЕсли;
	
	Если НЕ ИгнорироватьНеверноеУпотреблениеПрописныхБукв Тогда
		СуммаОпций = СуммаОпций + СоответствиеОпций["ИгнорироватьНеверноеУпотреблениеПрописныхБукв"]	
	КонецЕсли;
	
	Возврат СуммаОпций;
КонецФункции

Функция АПИ_СоответствиеКодовОшибок()
	
	СоответствиеКодовОшибок = Новый Соответствие;
	СоответствиеКодовОшибок.Вставить(1, "Слова нет в словаре.");
	СоответствиеКодовОшибок.Вставить(2, "Повтор слова.");
	СоответствиеКодовОшибок.Вставить(3, "Неверное употребление прописных и строчных букв.");
	СоответствиеКодовОшибок.Вставить(4, "Текст содержит слишком много ошибок. При этом приложение может отправить Яндекс.Спеллеру оставшийся непроверенным текст в следующем запросе.");
		
	Возврат СоответствиеКодовОшибок;
КонецФункции

Функция АПИ_ОбработатьКодОшибки(КодОшибки) Экспорт
	
	СоответствиеКодовОшибок = АПИ_СоответствиеКодовОшибок();
	Возврат СоответствиеКодовОшибок.Получить(КодОшибки);
	
КонецФункции

#КонецОбласти

#Область ПрикладныеМетоды

// Функция - Проверка текста
//
// Параметры:
//  Текст				 - Строка - Текст для проверки.
//  КодыЯзыковПроверки	 - Число - Языки проверки (перечисляются через запятую).
//	Возможные значения:
//  ru — русский;
//  uk — украинский;
//  en — английский.
//	По умолчанию: "ru,en".
//  Опции				 - Число - Опции Яндекс.Спеллера. Значением параметра является сумма значений требуемых опций.
//  Опция					Значение (десятичное)	Описание (пример)
// 	IGNORE_DIGITS			2						Пропускать слова с цифрами, например, "авп17х4534".
//	IGNORE_URLS				4						Пропускать интернет-адреса, почтовые адреса и имена файлов.
//	FIND_REPEAT_WORDS		8						Подсвечивать повторы слов, идущие подряд. Например, "я полетел на на Кипр".
//  IGNORE_CAPITALIZATION	512						Игнорировать неверное употребление ПРОПИСНЫХ/строчных букв, например, в слове "москва".
//  ФорматТекста		 - Строка - Формат проверяемого текста.
//	Возможные значения:
//	1) plain — текст без разметки (значение по умолчанию);
//	2) html — текст в формате HTML.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверкаТекста(Текст, КодыЯзыковПроверки = "", Опции = 0, ФорматТекста = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("СловаСОшибкой", Новый Массив);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("text", Текст);
	
	Если ЗначениеЗаполнено(КодыЯзыковПроверки) Тогда
		ПараметрыПроверки.Вставить("lang", КодыЯзыковПроверки);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Опции) Тогда
		ПараметрыПроверки.Вставить("options", Опции);			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФорматТекста) Тогда
		ПараметрыПроверки.Вставить("format", ФорматТекста);
	КонецЕсли;

	Интерфейс = "json";
	
	РезультатЗапроса = АПИ_ПроверитьТекст(ПараметрыПроверки, Интерфейс); 
	Если ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда
		Результат.ТекстОшибки = РезультатЗапроса.ТекстОшибки;	
	Иначе	
		
		ОтветСайта = Служебный.РазобратьJSON(РезультатЗапроса.ОтветСайта);
		Если ОтветСайта = Неопределено Тогда
			Если ТипЗнч(РезультатЗапроса.ОтветСайта) = Тип("Строка") Тогда
				Результат.ТекстОшибки = РезультатЗапроса.ОтветСайта;
			КонецЕсли;	
		Иначе
			СловаСОшибкой = Новый Массив;
			Для Каждого сОтветСайта из ОтветСайта Цикл
				СловоСОшибкой = СтруктураСловаСОшибкой();
				СловоСОшибкой.КодОшибки = сОтветСайта.code;
				СловоСОшибкой.Ошибка = АПИ_ОбработатьКодОшибки(СловоСОшибкой.КодОшибки);
				СловоСОшибкой.ПозицияСлова = сОтветСайта.pos;
				СловоСОшибкой.НомерСтроки = сОтветСайта.row;
				СловоСОшибкой.НомерСтолбца = сОтветСайта.col;
				СловоСОшибкой.ДлинаСлова = сОтветСайта.len;
				СловоСОшибкой.ИсходноеСлово = сОтветСайта.word;
				СловоСОшибкой.Подсказки = сОтветСайта.s;
				
				СловаСОшибкой.Добавить(СловоСОшибкой);
			КонецЦикла;
			Результат.СловаСОшибкой = СловаСОшибкой;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПроверитьТекст(Текст, КодыЯзыковПроверки = "", Ошибки = "") Экспорт
		
	РезультатПроверки = ПроверкаТекста(Текст, КодыЯзыковПроверки, АПИ_СуммаОпций(Истина, Истина, Истина, Ложь));
	Ошибки = РезультатПроверки.ТекстОшибки;
	
	Возврат РезультатПроверки.СловаСОшибкой;
КонецФункции

Функция ПроверитьТекстНаРусском(Текст, Ошибки = "") Экспорт
	
	МассивЯзыков = Новый Массив;
	МассивЯзыков.Добавить(Справочники.Языки.Русский);
	КодыЯзыковПроверки = ПодготовитьКодыЯзыковПроверки(МассивЯзыков);	
	Возврат ПроверитьТекст(Текст, КодыЯзыковПроверки, Ошибки);
	
КонецФункции

Функция ПроверитьТекстНаАнглийском(Текст, Ошибки = "") Экспорт
	
	МассивЯзыков = Новый Массив;
	МассивЯзыков.Добавить(Справочники.Языки.Английский);
	КодыЯзыковПроверки = ПодготовитьКодыЯзыковПроверки(МассивЯзыков);	
	Возврат ПроверитьТекст(Текст, КодыЯзыковПроверки, Ошибки);
	
КонецФункции

#КонецОбласти

#Область Константы

Функция ПолучитьАдресСервера()
	Возврат "speller.yandex.net";	
КонецФункции

Функция ПолучитьАдресРесурсаПроверитьТекст(Интерфейс = "json")
	
	АдресРесурса = "";
	Если ВРЕГ(Интерфейс) = "JSON" Тогда
		АдресРесурса = "/services/spellservice.json/checkText";
	ИначеЕсли ВРЕГ(Интерфейс) = "XML" Тогда
		АдресРесурса = "/services/spellservice/checkText";
	КонецЕсли;
	
	Возврат АдресРесурса;
КонецФункции

#КонецОбласти

#Область СлужебныеМетоды

Функция СтруктураСловаСОшибкой()
	
	Ответ = Новый Структура;
	Ответ.Вставить("КодОшибки");
	Ответ.Вставить("Ошибка");
	Ответ.Вставить("ПозицияСлова");
	Ответ.Вставить("НомерСтроки");
	Ответ.Вставить("НомерСтолбца");
	Ответ.Вставить("ДлинаСлова");
	Ответ.Вставить("ИсходноеСлово");
	Ответ.Вставить("Подсказки");
	
	Возврат Ответ;
КонецФункции

Функция ПодготовитьКодыЯзыковПроверки(МассивЯзыков = Неопределено) Экспорт
	
	КодыЯзыковПроверки = "";
	
	Если НЕ ТипЗнч(МассивЯзыков) = Тип("Массив") Тогда
		МассивЯзыков = Новый Массив;
		МассивЯзыков.Добавить(Справочники.Языки.Русский);
	КонецЕсли;
	
	МассивКодов = Новый Массив;
	Для Каждого Язык из МассивЯзыков Цикл
		МассивКодов.Добавить(УправлениеПереводом.ПолучитьКодЯзыка(Язык));	
	КонецЦикла;
	
	КодыЯзыковПроверки = _СтрСоединить(МассивКодов, ",");
	
	Возврат КодыЯзыковПроверки;
КонецФункции

#КонецОбласти
