#Область ПрограммныйИнтерфейс

//// ЗАПИСЬ ////
Функция ЗаписатьJSON_Файл(ОбъектЗаписиJSON, ПутьКФайлу, КодировкаТекста = "UTF-8") Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат"			, Ложь);
	ОтветФункции.Вставить("ОписаниеОшибкиДляЖР"	, "");
	ОтветФункции.Вставить("ОписаниеОшибки"		, "");
	ОтветФункции.Вставить("ПутьКФайлу"			, ПутьКФайлу);
		
	Попытка		
		ЗаписьJSON = Новый ЗаписьJSON; 
		ЗаписьJSON.ОткрытьФайл(ПутьКФайлу, КодировкаТекста);
		ЗаписатьJSON(ЗаписьJSON, ОбъектЗаписиJSON,, "ПреобразованиеJSON", РаботаСJSON); 
		ЗаписьJSON.Закрыть();
		
		ОтветФункции.Результат = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
				
		ОтветФункции.ОписаниеОшибкиДляЖР = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОтветФункции.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат ОтветФункции;
	
КонецФункции

Функция ЗаписатьJSON_Строка(ОбъектЗаписиJSON) Экспорт

	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат"			, Ложь);
	ОтветФункции.Вставить("ОписаниеОшибкиДляЖР"	, "");
	ОтветФункции.Вставить("ОписаниеОшибки"		, "");
	ОтветФункции.Вставить("СтрокаJSON"			, "");
	
	Попытка	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ОбъектЗаписиJSON,, "ПреобразованиеJSON", РаботаСJSON);
		ОтветФункции.СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ОтветФункции.Результат = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
				
		ОтветФункции.ОписаниеОшибкиДляЖР = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОтветФункции.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);  
	КонецПопытки;
	
	Возврат ОтветФункции;
	
КонецФункции

Функция УпрощеннаяСериализация(ОбъектЗаписиJSON) Экспорт
	
	//преобразует неподдерживаемые объекты в строку, 
	//добавляет всем объектам тип и URIПространстваИмен
	//для корректного восстановления значения в приемнике
		
	Если ТипЗнч(ОбъектЗаписиJSON) = Тип("Массив") Тогда
		ОбъектЗаписиJSONНорм = СериализацияМассив(ОбъектЗаписиJSON);	
	ИначеЕсли ТипЗнч(ОбъектЗаписиJSON) = Тип("Структура") Тогда
		ОбъектЗаписиJSONНорм = СериализацияСтруктура(ОбъектЗаписиJSON);
	Иначе
		ОбъектЗаписиJSONНорм = ОбъектЗаписиJSON;
	КонецЕсли;
	
	Возврат ОбъектЗаписиJSONНорм;
	
КонецФункции


//// ЧТЕНИЕ ////
Функция ПрочитатьJSON_Файл(ПутьКФайлу, КодировкаТекста = "UTF-8") Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат"			, Ложь);
	ОтветФункции.Вставить("ОписаниеОшибкиДляЖР"	, "");
	ОтветФункции.Вставить("ОписаниеОшибки"		, "");
	ОтветФункции.Вставить("ОбъектЗаписиJSON"	, Неопределено);
	
	Попытка
		ЧтениеДЖСОН = Новый ЧтениеJSON();
		ЧтениеДЖСОН.ОткрытьФайл(ПутьКФайлу, КодировкаТекста);
		ОтветФункции.ОбъектЗаписиJSON = ПрочитатьJSON(ЧтениеДЖСОН);
		
		ОтветФункции.Результат = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
				
		ОтветФункции.ОписаниеОшибкиДляЖР = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОтветФункции.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);	
	КонецПопытки;
    
	Возврат ОтветФункции;
	
КонецФункции

Функция ПрочитатьJSON_Строка(ТекстJSON) Экспорт
	
	ОтветФункции = Новый Структура;
	ОтветФункции.Вставить("Результат"			, Ложь);
	ОтветФункции.Вставить("ОписаниеОшибкиДляЖР"	, "");
	ОтветФункции.Вставить("ОписаниеОшибки"		, "");
	ОтветФункции.Вставить("ОбъектЗаписиJSON"	, Неопределено);
	
	Попытка
		ЧтениеДЖСОН = Новый ЧтениеJSON();
		ЧтениеДЖСОН.УстановитьСтроку(ТекстJSON);
		ОтветФункции.ОбъектЗаписиJSON = ПрочитатьJSON(ЧтениеДЖСОН);
		
		ОтветФункции.Результат = Истина;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтветФункции.ОписаниеОшибкиДляЖР = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОтветФункции.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);	
	КонецПопытки;
	
	Возврат ОтветФункции;
	
КонецФункции

Функция УпрощеннаяДесериализация(ОбъектЗаписиJSON) Экспорт
	
	Если ТипЗнч(ОбъектЗаписиJSON) = Тип("Массив") Тогда
		ОбъектЗаписиJSONНорм = ДесериализацияМассив(ОбъектЗаписиJSON);	
	ИначеЕсли ТипЗнч(ОбъектЗаписиJSON) = Тип("Структура") Тогда
		ОбъектЗаписиJSONНорм = ДесериализацияСтруктура(ОбъектЗаписиJSON);
	Иначе
		ОбъектЗаписиJSONНорм = ОбъектЗаписиJSON;
	КонецЕсли;
	
	Возврат ОбъектЗаписиJSONНорм;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//// ЗАПИСЬ ////
Функция ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Возврат СериализацияЗначение(Значение);
	
КонецФункции

//// УПРОЩЕННАЯ СЕРИАЛИЗАЦИЯ //// 
Функция СериализацияМассив(ВхМассив)
	
	МассивСтруктурНорм = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВхМассив Цикл
		
		ТипЭлемета = ТипЗнч(ЭлементМассива);
		Если ТипЭлемета = Тип("Массив") Тогда
			НовыйЭлемент = СериализацияМассив(ЭлементМассива);	
		ИначеЕсли ТипЭлемета = Тип("Структура") Тогда
			НовыйЭлемент = СериализацияСтруктура(ЭлементМассива);	
		Иначе
			НовыйЭлемент = СериализацияЗначение(ЭлементМассива);	
		КонецЕсли;
		МассивСтруктурНорм.Добавить(НовыйЭлемент);
		
	КонецЦикла;
	
	Возврат МассивСтруктурНорм;
	
КонецФункции

Функция СериализацияСтруктура(ВхСтруктура)
	
	СтруктураНорм = Новый Структура;
	
	Для Каждого КлючИЗначение Из ВхСтруктура Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		Если ТипЗначения = Тип("Массив") Тогда
			НовыйРеквизит = СериализацияМассив(КлючИЗначение.Значение);
		ИначеЕсли ТипЗначения = Тип("Структура") Тогда
			НовыйРеквизит = СериализацияСтруктура(КлючИЗначение.Значение);	
		Иначе
			НовыйРеквизит = СериализацияЗначение(КлючИЗначение.Значение);	
		КонецЕсли;
	   	СтруктураНорм.Вставить(КлючИЗначение.Ключ, НовыйРеквизит);
		
	КонецЦикла;
	
	Возврат СтруктураНорм;
	
КонецФункции

Функция СериализацияЗначение(ВхЗначение)
	
	НовыйРеквизит = Новый Структура;
	НовыйРеквизит.Вставить("Значение", XMLСтрока(ВхЗначение));
	
	ТипЗначенияХМЛ = XMLТипЗнч(ВхЗначение);
	НовыйРеквизит.Вставить("ИмяТипа"			, XMLСтрока(ТипЗначенияХМЛ.ИмяТипа));
	НовыйРеквизит.Вставить("URIПространстваИмен", XMLСтрока(ТипЗначенияХМЛ.URIПространстваИмен));
	
	Возврат НовыйРеквизит;
	
КонецФункции

//// УПРОЩЕННАЯ ДЕСЕРИАЛИЗАЦИЯ //// 
Функция ДесериализацияМассив(ВхМассив)
	
	МассивСтруктурНорм = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВхМассив Цикл
		
		ТипЭлемета = ТипЗнч(ЭлементМассива);
		Если ТипЭлемета = Тип("Массив") Тогда
			НовыйЭлемент = ДесериализацияМассив(ЭлементМассива);	
		ИначеЕсли ТипЭлемета = Тип("Структура") Тогда
			НовыйЭлемент = ДесериализацияСтруктура(ЭлементМассива);	
		Иначе
			НовыйЭлемент = ДесериализацияЗначение(ЭлементМассива);	
		КонецЕсли;
		МассивСтруктурНорм.Добавить(НовыйЭлемент);
		
	КонецЦикла;
	
	Возврат МассивСтруктурНорм;
	
КонецФункции

Функция ДесериализацияСтруктура(ВхСтруктура)
	
	СтруктураНорм = Новый Структура;
	
	Для Каждого КлючИЗначение Из ВхСтруктура Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		Если ТипЗначения = Тип("Массив") Тогда
			НовыйРеквизит = ДесериализацияМассив(КлючИЗначение.Значение);
		ИначеЕсли ТипЗначения = Тип("Структура") Тогда	
			Если КлючИЗначение.Значение.Свойство("URIПространстваИмен") Тогда
				НовыйРеквизит = ДесериализацияЗначение(КлючИЗначение.Значение);	
			Иначе
				НовыйРеквизит = ДесериализацияСтруктура(КлючИЗначение.Значение);
			КонецЕсли;	
		КонецЕсли;
	   	СтруктураНорм.Вставить(КлючИЗначение.Ключ, НовыйРеквизит);
		
	КонецЦикла;
	
	Возврат СтруктураНорм;
	
КонецФункции

Функция ДесериализацияЗначение(ВхЗначение)
	
	ТипДанныхXML = Новый ТипДанныхXML(ВхЗначение.ИмяТипа, ВхЗначение.URIПространстваИмен);
	ТипЗначения = ИзXMLТипа(ТипДанныхXML);
	Если ТипЗначения = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат XMLЗначение(ТипЗначения, ВхЗначение.Значение);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
